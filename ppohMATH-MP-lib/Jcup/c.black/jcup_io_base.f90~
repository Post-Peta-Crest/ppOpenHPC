module jcup_io_base
  use jcup_constant, only : NAME_LEN
  include "mpif.h"
  private

  public :: jcup_init_io ! subroutine ()
  public :: jcup_io_init_file ! subroutine (comp_name, file_code, data_name, ni, nj, nk, is, ie, js, je, ks, ke)
  public :: set_current_time ! subroutine (time(6))
  public :: jcup_write_data ! subroutine (data, ni, name), subroutine (data, file_code, data_name)
  public :: jcup_io_create_type ! subroutine (grid_name, grid_index)
  public :: jcup_write_restart_base ! subroutine (file_id, component_id, end_time)
  public :: jcup_read_restart_base ! subroutine (file_id, component_id, end_time)
  !public :: jcup_read_data
  public :: jcup_io_close_file ! subroutine (file_code, data_name)

! --------------- AGCM variables ---------------

  !interface jcup_read_data
  !  module procedure jcup_read_data_1d, jcup_read_data_2d, jcup_read_data_25d
  !end interface

  interface jcup_write_data
    module procedure jcup_write_data_2d_all
  end interface

  integer :: time(6)
  character(len=14) :: time_str

  integer, parameter :: FILE_ID = 298

  integer :: LOG_FILE_ID 

  type ft_type ! file type type
    integer :: comp_id
    integer :: grid_id
    integer :: file_type
    type(ft_type), pointer :: next_ptr
  end type

  type (ft_type), pointer :: ft_ptr


contains

!*=======+=========+=========+=========+=========+=========+=========+=========+

subroutine jcup_init_io()
  !use jcup_interface, only : jcup_get_mpi_parameter
  implicit none

  nullify(ft_ptr)

end subroutine jcup_init_io

!*=======+=========+=========+=========+=========+=========+=========+=========+

subroutine jcup_io_create_type(comp_id, grid_id, grid_index)
  implicit none
  integer, intent(IN) :: comp_id
  integer, intent(IN) :: grid_id
  integer, intent(IN) :: grid_index(:)

  type(ft_type), pointer :: current_ft

  if (.not.associated(ft_ptr)) then
    allocate(ft_ptr)
    ft_ptr%comp_id = comp_id
    ft_ptr%grid_id = grid_id
    call jcup_io_create_file_type(ft_ptr, grid_index)
    nullify(ft_ptr%next_ptr)
    current_ft => ft_ptr
  else
    current_ft => ft_ptr
    do 
      if ((current_ft%comp_id == comp_id).and.(current_ft%grid_id == grid_id)) then
        exit
      end if
      if (.not.associated(current_ft%next_ptr)) then
        allocate(current_ft%next_ptr)
        current_ft%next_ptr%comp_id = comp_id
        current_ft%next_ptr%grid_id = grid_id
        current_ft => current_ft%next_ptr
        call jcup_io_create_file_type(current_ft, grid_index)
        nullify(current_ft%next_ptr)
        exit
      end if
      current_ft => current_ft%next_ptr
    end do
  end if

end subroutine jcup_io_create_type

!*=======+=========+=========+=========+=========+=========+=========+=========+

subroutine jcup_io_create_file_type(ftp, grid_index)
  use jcup_utils, only : error, put_log
  implicit none
  type(ft_type), pointer :: ftp
  integer, intent(IN) :: grid_index(:)
  integer, allocatable :: index_buffer(:)
  integer :: ierror = 0
  integer :: offset

  allocate(index_buffer(size(grid_index)))
  index_buffer(:) = grid_index(:) - 1

  offset = 1
  call MPI_type_create_indexed_block(size(grid_index), offset, index_buffer, MPI_DOUBLE_PRECISION, ftp%file_type, ierror)

  if (ierror>0) then
     call error("jcup_io_create_file_type", "MPI_TYPE_create_indexed_block ")
     stop
  end if

  call MPI_Type_commit(ftp%file_type, ierror)

  if (ierror>0) then
     call error("jcup_io_create_file_type", "MPI_TYPE_commit error ")
  end if

  deallocate(index_buffer)
    
  !write(LOG_FILE_ID, '(" Msg : Sub[jcup_io_create_file_type]/Mod[jcup_io_base]")')
  !write(LOG_FILE_ID, '(" ----- File type : 2D")') 
  !write(LOG_FILE_ID, '(" ------- array size : x =",I7," y =",I7)') size_2d(1), size_2d(2)
  !write(LOG_FILE_ID, '(" ------- sub size   : x =",I7," y =",I7)') subsize_2d(1), subsize_2d(2)
  !write(LOG_FILE_ID, '(" ------- starts     : x =",I7," y =",I7)') starts_2d(1), starts_2d(2)
  !write(LOG_FILE_ID, '(" ------- filetype   :    ",I12,"    ",I3)') ftp%file_type, ierror
   
end subroutine jcup_io_create_file_type

!*=======+=========+=========+=========+=========+=========+=========+=========+

subroutine  search_file_type(comp_id, grid_id, ftp)
  use jcup_utils, only : error
  implicit none
  integer, intent(IN) :: comp_id
  integer, intent(IN) :: grid_id
  type(ft_type), pointer :: ftp

  ftp => ft_ptr
  do while(associated(ftp))
    if ((ftp%comp_id == comp_id).and.(ftp%grid_id == grid_id)) then
      return
    end if
    ftp => ftp%next_ptr
  end do
  
  call error("search_file_type", "no such comp and grid")

end subroutine search_file_type
  
!*=======+=========+=========+=========+=========+=========+=========+=========+

subroutine jcup_write_restart_base(fid, comp_id, end_time)
  use jcup_constant, only : STRING_LEN
  use jcup_buffer, only : get_num_of_time, get_send_buffer_ptr
  use jcup_time_buffer, only : time_buffer, get_start_data_ptr, get_next_time_ptr => get_next_ptr
  use jcup_data_buffer, only : data_buffer, get_next_data_ptr => get_next_ptr, write_data_buffer
  use jcup_comp, only : get_component_name
  use jcup_utils, only : error
  use jcup_time, only : write_time
  use jcup_config, only : get_send_data_conf_ptr, send_data_conf_type, set_current_conf
  implicit none
  integer, intent(IN) :: fid ! file id
  integer, intent(IN) :: comp_id ! component id
  integer, intent(IN) :: end_time(6) ! integration end time
  character(len=STRING_LEN) :: mastar_file_name
  logical :: is_opened
  type(time_buffer), pointer :: tb
  type(data_buffer), pointer :: db
  integer :: num_of_time
  integer :: i
  integer :: time_array(6)
  logical :: write_flag
  character(len=NAME_LEN) :: data_name
  real(kind=8), pointer :: data_ptr(:)
  type(send_data_conf_type), pointer :: send_data_conf_ptr
  integer :: file_handler

  write(mastar_file_name, '(A,".restart.mst.",I4.4,5I2.2,".dat")') trim(get_component_name(comp_id)), &
       end_time(1), end_time(2), end_time(3), end_time(4), end_time(5), end_time(6)

  inquire(fid, opened = is_opened)
  if (is_opened) close(fid)

  open(fid, file=trim(mastar_file_name),form = 'formatted', &
         access = 'sequential', action = 'write', err = 200)

  call write_time(fid, comp_id)

  tb => get_send_buffer_ptr()

  num_of_time = get_num_of_time(tb)

  do i = 1, num_of_time

    db => get_start_data_ptr(tb)
    do
      if (.not.associated(db)) exit
      if (associated(db)) then
        time_array(1) = tb%time%yyyy ; time_array(2) = tb%time%mo ; time_array(3) = tb%time%dd
        time_array(4) = tb%time%hh   ; time_array(5) = tb%time%mm ; time_array(6) = tb%time%ss

        if (time_array(1) < 9999) then

          call write_data_buffer(time_array, db, fid, comp_id, write_flag, data_name, data_ptr)

          if (write_flag) then ! output buffer data
              call set_current_conf(comp_id)
              send_data_conf_ptr => get_send_data_conf_ptr(data_name)
              call jcup_io_open_file("./", comp_id, data_name, time_array, send_data_conf_ptr%grid_id, file_handler)            
              call jcup_write_data_2d_all(file_handler, data_ptr)
              call jcup_io_close_file(file_handler)
          end if
        end if
      end if
      db => get_next_data_ptr(db)
      if (associated(db, tb%dt_start)) exit
    end do

    tb => get_next_time_ptr(tb)

  end do


  close(fid)

  return

200 call error('open_log_file','cannot create log file: '//trim(mastar_file_name))
    return
  
  
end subroutine jcup_write_restart_base

!*=======+=========+=========+=========+=========+=========+=========+=========+

subroutine jcup_read_restart_base(fid, comp_id, end_time)
  use jcup_constant, only : NAME_LEN, STRING_LEN
  use jcup_buffer, only : get_num_of_time, get_send_buffer_ptr
  use jcup_buffer, only : put_send_data
  use jcup_comp, only : get_component_name, is_my_component
  use jcup_utils, only : error
  use jcup_time, only : read_time, time_type
  use jcup_mpi_lib, only : jml_isLocalLeader, jml_BcastLocal
  implicit none
  integer, intent(IN) :: fid ! file id
  integer, intent(IN) :: comp_id ! component id
  integer, intent(IN) :: end_time(6) ! integration end time
  character(len=STRING_LEN) :: mastar_file_name
  logical :: is_opened
  integer :: num_of_time
  integer :: time_array(6)
  integer :: component_id, data_id, data_type, data_dim
  character(len=NAME_LEN) :: data_name
  integer :: file_handler
  integer :: int_buffer(6+1+1+1+1)
  real(kind=8), pointer :: data_ptr(:)
  type(time_type) :: data_time

  if (jml_isLocalLeader(comp_id)) then
    write(mastar_file_name, '(A,".restart.mst.",I4.4,5I2.2,".dat")') trim(get_component_name(comp_id)), &
         end_time(1), end_time(2), end_time(3), end_time(4), end_time(5), end_time(6)

    inquire(fid, opened = is_opened)
    if (is_opened) close(fid)

    open(fid, file=trim(mastar_file_name),form = 'formatted', &
           access = 'sequential', action = 'read', err = 200)

    call read_time(fid, comp_id)

    do
      read(fid, *, end = 100) data_name
      read(fid, *, end = 100) time_array
      read(fid, *, end = 100) component_id
      read(fid, *, end = 100) data_id
      read(fid, *, end = 100) data_type
      read(fid, *, end = 100) data_dim
      int_buffer(1:6) = time_array
      int_buffer(7) = component_id
      int_buffer(8) = data_id
      int_buffer(9) = data_type
      int_buffer(10) = data_dim
      call jml_BcastLocal(comp_id, int_buffer, 1, 10)
      call jml_BcastLocal(comp_id, data_name)

      call jcup_read_restart_data("./", comp_id, data_name, time_array, data_ptr)
      
      data_time%yyyy = time_array(1) ; data_time%mo = time_array(2) ; data_time%dd = time_array(3)
      data_time%hh   = time_array(4) ; data_time%mm = time_array(5) ; data_time%ss = time_array(6)

      call put_send_data(data_ptr, data_time, comp_id, data_id, data_name, .false., 1.d0)

      deallocate(data_ptr)
    end do

    100 continue
     int_buffer(1) = -1
     call jml_BcastLocal(comp_id, int_buffer, 1, 10)

  else
    call read_time(fid, comp_id)

    do
      call jml_BcastLocal(comp_id, int_buffer, 1, 10)
      if (int_buffer(1) <= 0) exit
      time_array(:) = int_buffer(1:6)
      component_id  = int_buffer(7)
      data_id       = int_buffer(8)
      data_type     = int_buffer(9)
      data_dim      = int_buffer(10)
      call jml_BcastLocal(comp_id, data_name)

      call jcup_read_restart_data("./", comp_id, data_name, time_array, data_ptr)

      data_time%yyyy = time_array(1) ; data_time%mo = time_array(2) ; data_time%dd = time_array(3)
      data_time%hh   = time_array(4) ; data_time%mm = time_array(5) ; data_time%ss = time_array(6)

      call put_send_data(data_ptr, data_time, comp_id, data_id, data_name, .false., 1.d0)

      deallocate(data_ptr)
    end do

  end if

  close(fid)

  return

200 call error('open_log_file','cannot create log file: '//trim(mastar_file_name))
    return
  
  
end subroutine jcup_read_restart_base

!*=======+=========+=========+=========+=========+=========+=========+=========

subroutine jcup_read_restart_data(out_dir, comp_id, data_name, data_time, data_ptr)
  use jcup_config, only : set_current_conf, get_send_data_conf_ptr, send_data_conf_type
  use jcup_grid_base, only : get_num_of_point
  implicit none
  character(len=*), intent(IN) :: out_dir
  integer, intent(IN) :: comp_id
  character(len=*), intent(IN) :: data_name
  integer, intent(IN) :: data_time(6)
  real(kind=8), pointer :: data_ptr(:)
  type(send_data_conf_type), pointer :: send_data_conf_ptr
  integer :: grid_id
  integer :: num_of_point
  integer :: file_handler
  character(len=NAME_LEN) :: data_name_new

  call set_current_conf(comp_id)

  if (index(data_name, "__") > 0) then
    data_name_new = data_name(1:index(data_name, "__")-1)
  else
    data_name_new = data_name
  end if

  send_data_conf_ptr => get_send_data_conf_ptr(data_name_new)
  grid_id = send_data_conf_ptr%grid_id

  num_of_point = get_num_of_point(comp_id, grid_id)*send_data_conf_ptr%num_of_data
   
  allocate(data_ptr(num_of_point))

  call jcup_io_open_file(out_dir, comp_id, data_name, data_time, grid_id, file_handler)

  call jcup_read_data_2d_all(file_handler, data_ptr)

  call jcup_io_close_file(file_handler)

end subroutine jcup_read_restart_data

!*=======+=========+=========+=========+=========+=========+=========+=========

subroutine jcup_io_open_file(out_dir, comp_id, data_name, data_time, grid_id, file_handler)
  use jcup_comp, only : get_component_name
  use jcup_mpi_lib, only : jml_GetComm
  use jcup_constant, only : STRING_LEN
  implicit none
  character(len=*), intent(IN) :: out_dir
  integer, intent(IN)          :: comp_id
  character(len=*), intent(IN) :: data_name
  integer, intent(IN)          :: data_time(6)
  integer, intent(IN)          :: grid_id
  integer, intent(OUT) :: file_handler
  integer :: my_comm
  character(len=32) :: datarep
  integer :: ierror = 0
  integer(kind=MPI_OFFSET_KIND) :: offset
  character(len=STRING_LEN) :: file_name
  type(ft_type), pointer :: ftp

  my_comm = jml_GetComm(comp_id)

  write(file_name, '(A,A,".restart.",I4.4,5I2.2,".",A,".dat")') &
        trim(out_dir), trim(get_component_name(comp_id)), &
        data_time(1), data_time(2), data_time(3), data_time(4), data_time(5), data_time(6), trim(data_name) 


  call MPI_File_Open(my_comm, trim(file_name), &
                     MPI_MODE_CREATE + MPI_MODE_RDWR, MPI_INFO_NULL, file_handler, ierror)

    !if (ierror>0) then
    !   write(LOG_FILE_ID, '(" Msg : Sub[jcup_io_open_file]/Mod[jcup_io_base]")')
    !   write(LOG_FILE_ID, '(" ----- MPI_File_open error",I5)') ierror 
    !   write(LOG_FILE_ID, '(" ----- file name : ",A)') trim(fhp%file_name)
    !   write(LOG_FILE_ID, '(" ------- file_handler id =",I3," file_handler =",I5,", file_type id =",I3," file_type =",I12)') &
    !                       fhp%fh_id, fhp%file_handler, fhp%file_type%ft_id, fhp%file_type%file_type
    !   close(LOG_FILE_ID)
    !   write(0,*) "jcup_io_open_file, MPI_File_Open error ", ierror
    !   stop
    !end if

  !write(LOG_FILE_ID, '(" Msg : Sub[jcup_io_open_file]/Mod[jcup_io_base]")')
  !write(LOG_FILE_ID, '(" ----- File open : ",A)') trim(fhp%file_name)
  !write(LOG_FILE_ID, '(" ------- file_handler id =",I3," file_handler =",I5,", file_type id =",I3," file_type =",I12)') &
  !                    fhp%fh_id, fhp%file_handler, fhp%file_type%ft_id, fhp%file_type%file_type


  call search_file_type(comp_id, grid_id, ftp)

  offset = 0 
  datarep = "native"
  call MPI_File_set_view(file_handler, offset, MPI_REAL8, ftp%file_type, trim(datarep), MPI_INFO_NULL, ierror)

   ! if (ierror>0) then
   !    write(LOG_FILE_ID, '(" Msg : Sub[jcup_io_open_file]/Mod[jcup_io_base]")')
   !    write(LOG_FILE_ID, '(" ----- MPI_File_set_view error",I5)') ierror 
   !    close(LOG_FILE_ID)
   !    write(0,*) "jcup_io_open_file, MPI_File_set_view error ", ierror
   !    stop
   ! end if

  !write(LOG_FILE_ID, '(" ----- File set view")') 
  !write(LOG_FILE_ID, '(" ------- displacement =",I5,", data representation ="A)') &
  !                    offset, datarep

end subroutine jcup_io_open_file

!*=======+=========+=========+=========+=========+=========+=========+=========+

subroutine jcup_io_close_file(file_handler)
  !use jcup_interface, only : jcup_error
  implicit none
  integer, intent(IN) :: file_handler
  integer :: ierror = 0

  call MPI_file_close(file_handler, ierror)
      
      !if (ierror > 0) then
      !  write(LOG_FILE_ID, '(" Msg : Sub[jcup_io_close_file]/Mod[jcup_io_base]")')
      !  write(LOG_FILE_ID, '(" ----- File close error : ",A)') trim(current_fh%file_name)
      !  close(LOG_FILE_ID)
      !  write(0,*) "jcup_io_close file, file close error ", ierror
      !  stop
      !end if

      !write(LOG_FILE_ID, '(" Msg : Sub[jcup_io_close_file]/Mod[jcup_io_base]")')
      !write(LOG_FILE_ID, '(" ----- File close : ",A)') trim(current_fh%file_name)

end subroutine jcup_io_close_file

!*=======+=========+=========+=========+=========+=========+=========+=========+

subroutine jcup_write_data_2d_all(file_handler, data)
  implicit none
  integer, intent(IN) :: file_handler
  real(kind=8), pointer :: data(:)
  integer :: ierror
  integer :: status(MPI_STATUS_SIZE)
  integer :: data_size

  data_size = size(data)

  call MPI_File_write_all(file_handler, data, data_size, MPI_REAL8, status, ierror)

  !write(LOG_FILE_ID, *)
  !write(LOG_FILE_ID, '(" ---------------------------------------------------------------------------------------")') 
  !write(LOG_FILE_ID, '(" Msg : Sub[jcup_write_data]/Mod[jcup_io_base]")')
  !write(LOG_FILE_ID, '(" --- Write data. data name =",A)') data_name
  !write(LOG_FILE_ID, '(" ----- file id = ",I3,", file type id =",I3,", data size =",I6)') &
  !                    current_ptr%fh_id, current_ptr%file_type%ft_id, data_size
  !write(LOG_FILE_ID, '(" ----- max val = ",F16.5,", min val =",F16.5)') &
  !                    maxval(data), minval(data)


end subroutine jcup_write_data_2d_all

!*=======+=========+=========+=========+=========+=========+=========+=========+

subroutine jcup_read_data_2d_all(file_handler, data)
  implicit none
  integer, intent(IN) :: file_handler
  real(kind=8), pointer :: data(:)
  integer :: ierror
  integer :: status(MPI_STATUS_SIZE)
  integer :: data_size

  data_size = size(data)

  call MPI_File_read_all(file_handler, data, data_size, MPI_REAL8, status, ierror)

  !write(LOG_FILE_ID, *)
  !write(LOG_FILE_ID, '(" ---------------------------------------------------------------------------------------")') 
  !write(LOG_FILE_ID, '(" Msg : Sub[jcup_write_data]/Mod[jcup_io_base]")')
  !write(LOG_FILE_ID, '(" --- Write data. data name =",A)') data_name
  !write(LOG_FILE_ID, '(" ----- file id = ",I3,", file type id =",I3,", data size =",I6)') &
  !                    current_ptr%fh_id, current_ptr%file_type%ft_id, data_size
  !write(LOG_FILE_ID, '(" ----- max val = ",F16.5,", min val =",F16.5)') &
  !                    maxval(data), minval(data)


end subroutine jcup_read_data_2d_all

!*=======+=========+=========+=========+=========+=========+=========+=========+

  subroutine set_current_time(current_time)
    implicit none
    integer, intent(IN) :: current_time(6)
 
    time_str = "00000000000000"

    write(time_str, '(I4.4,I2.2,I2.2,I2.2,I2.2,I2.2)') current_time(1), current_time(2), current_time(3), &
                                                       current_time(4), current_time(5), current_time(6)

  end subroutine set_current_time

!*=======+=========+=========+=========+=========+=========+=========+=========+


end module jcup_io_base

