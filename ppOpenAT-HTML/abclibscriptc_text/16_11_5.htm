
<html>
<head>
<title>ToString メンバ関数説明</title><base target="main">
<link rel ="stylesheet" type="text/css" href="stylesheet.css" title="stylesheet">
<meta http-equiv="Content-Type" content="text/html;charset=Shift_JIS">
</head>

<body bgcolor="#ffffff">

<div align="right"><font size="2">ABCLibScriptC プロジェクト</font></div>

<table width=100% bgcolor="#e6e6fa" class="titlebgcolor" border="1" cellpadding="7" cellspacing="0">
<tr>
    <td><font class="titlefont">14.11.5. ToString メンバ関数説明</font></td>
</tr>
</table>

<p></p>
<table border="1">
<tr><th align="left" nowrap>メンバ関数名</th>  <td nowrap>ToString</td></tr>
<tr><th align="left" nowrap>定義ファイル名</th><td nowrap>pass2.cpp</td></tr>
<tr><th align="left" nowrap>定義行</th>        <td nowrap>2006</td></tr>
<tr><th align="left" nowrap>所属名</th>        <td nowrap>TValData</td></tr>
<tr><th align="left" nowrap>アクセス属性</th>  <td nowrap>public</td></tr>
<tr><th align="left" nowrap>宣言形式</th>      <td nowrap>string ToString ( )</td></tr>
<tr><th align="left" nowrap>概要</th>          <td nowrap>変数の情報を文字列で所得する。</td></tr>
<tr><th align="left" nowrap>戻り値</th>        <td nowrap>変数情報の文字列</td></tr>
<tr><th align="left" nowrap>パラメタ説明</th>  <td nowrap></td></tr>
<tr><th align="left" nowrap>機能説明</th>      <td nowrap></td></tr>
<tr><th align="left" nowrap>備考</th>          <td nowrap></td></tr>
</table>

<p></p>

<p></p>
呼出し先関数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap>FloatToStr</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap>108</td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap>IntToStr</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap>107</td>
</tr>
</table>

<p></p>

<p></p>
参照メンバ変数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap>TValData::ArgF</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap>118</td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap>TValData::ArrayCount</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap>149</td>
</tr>
<tr>
<td nowrap>3</td>
<td nowrap>TValData::ArrayLevel</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap>146</td>
</tr>
<tr>
<td nowrap>4</td>
<td nowrap>TValData::ArrayStart</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap>148</td>
</tr>
<tr>
<td nowrap>5</td>
<td nowrap>TValData::DataLength</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap>126</td>
</tr>
<tr>
<td nowrap>6</td>
<td nowrap>TValData::DataType</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap>125</td>
</tr>
<tr>
<td nowrap>7</td>
<td nowrap>TValData::dData</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap>145</td>
</tr>
<tr>
<td nowrap>8</td>
<td nowrap>TValData::ModuleIdx</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap>121</td>
</tr>
<tr>
<td nowrap>9</td>
<td nowrap>TValData::ParamValF</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap>111</td>
</tr>
<tr>
<td nowrap>10</td>
<td nowrap>TValData::RefCount</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap>142</td>
</tr>
<tr>
<td nowrap>11</td>
<td nowrap>TValData::SetCount</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap>143</td>
</tr>
<tr>
<td nowrap>12</td>
<td nowrap>TValData::Str</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap>109</td>
</tr>
</table>

<p></p>

<p></p>
<pre>
関数論理チャート

        |  +------------------------------+ 
  2006  +--+ string TValData::ToString()  | 
  2007     | {                            | 
           +--+---------------------------+ 
  2008        +--- string s;
  2009        +--- string DataTypeStr[] = {&quot;Int&quot;,&quot;Real&quot;,&quot;Char&quot;,&quot;Logic&quot;,&quot;Complex&quot;,&quot;Float&quot;,&quot;Void&quot;,
  2010        |        &quot;IntFunc&quot;,&quot;RealFunc&quot;,&quot;CharFunc&quot;,&quot;LogicFunc&quot;,&quot;ComplexFunc&quot;,&quot;FloatFunc&quot;,     
  2011        |        &quot;VoidFunc&quot;  };                                                             
  2012        |    
  2013        +--- s = &quot; (MIdx=&quot;+IntToStr(ModuleIdx)+&quot;) &quot;;
              |  +----------------------+ 
  2014        +--+ if(DataLength != 0){ | 
              |  +--+-------------------+ 
              |     |  +----------------------+ 
  2015        |     +--+ if(DataType == -1){  | 
              |     |  +--+-------------------+ 
  2016        |     |     +--- s += (string)(&quot;??&quot;)+&quot;*&quot;+IntToStr(DataLength);
              |     |   +-+---+ 
  2017        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  2017        |     |   |  else{  | 
              |     |   +-+-------+ 
  2018        |     |     +--- s += (string)(DataTypeStr[DataType])+&quot;*&quot;+IntToStr(DataLength);
              |     |   +-+---+ 
  2019        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
  2020        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  2020        |   |  else{  | 
              |   +-+-------+ 
              |     |  +----------------------+ 
  2021        |     +--+ if(DataType == -1){  | 
              |     |  +--+-------------------+ 
  2022        |     |     +--- s += (string)(&quot;??&quot;);
              |     |   +-+---+ 
  2023        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  2023        |     |   |  else{  | 
              |     |   +-+-------+ 
  2024        |     |     +--- s += (string)(DataTypeStr[DataType]);
              |     |   +-+---+ 
  2025        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
  2026        |   |  }  | 
              |   +-----+ 
  2027        +--- s += &quot; &quot;+Str;
              |  +----------------------------------------+ 
  2028        +--+ for(int i = 0 ; i &lt; ArrayLevel ; i++){ | 
              |  +--+-------------------------------------+ 
  2029        |     +--- s += &quot;(&quot;;
              |     |  +--------------------------+ 
  2030        |     +--+ if(ArrayStart[i] != 1){  | 
              |     |  +--+-----------------------+ 
  2031        |     |     +--- s += IntToStr(ArrayStart[i])+&quot;:&quot;+IntToStr(ArrayStart[i]+ArrayCount[i]);
              |     |   +-+---+ 
  2032        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  2032        |     |   |  else{  | 
              |     |   +-+-------+ 
  2033        |     |     +--- s += IntToStr(ArrayCount[i]);
              |     |   +-+---+ 
  2034        |     |   |  }  | 
              |     |   +-----+ 
  2035        |     +--- s += &quot;)&quot;;
              |   +-+---+ 
  2036        |   |  }  | 
              |   +-----+ 
              |  +----------------+ 
  2037        +--+ if(ParamValF){ | 
              |  +--+-------------+ 
  2038        |     +--- s += &quot;=&quot;+FloatToStr(dData);
              |   +-+---+ 
  2039        |   |  }  | 
              |   +-----+ 
  2040        +--- s += &quot; (RW=&quot;+IntToStr(RefCount)+&quot;,&quot;+IntToStr(SetCount)+&quot;)&quot;;
  2041        |    
              |  +------------+ 
  2042        +--+ if(ArgF){  | 
              |  +--+---------+ 
  2043        |     +--- s += &quot;(Arg)&quot;;
              |   +-+---+ 
  2044        |   |  }  | 
              |   +-----+ 
  2045        |    
              |  +------------+ 
  2046        +--+ return s;  | 
              |  +------------+ 
  2047        +--- /*
  2048        |        char *DataTypeStr[] = {&quot;Int&quot;,&quot;Real&quot;,&quot;Char&quot;,&quot;Logic&quot;,&quot;Complex&quot;,    
  2049        |            &quot;IntFunc&quot;,&quot;RealFunc&quot;,&quot;CharFunc&quot;,&quot;LogicFunc&quot;,&quot;ComplexFunc&quot;};  
  2050        |                                                                         
  2051        |        s = &quot; (MIdx=&quot;+IntToStr(ModuleIdx)+&quot;) &quot;;                          
  2052        |        s += &quot;(Nest = &quot;+IntToStr(BrNestLevel)+&quot;) &quot;;                      
  2053        |        s += &quot;(Type = &quot;+IntToStr(DataType)+&quot;) &quot;;                         
  2054        |        s += &quot; &quot;+Str;                                                    
  2055        |        for(int i = 1 ; i &lt; ArrayLevel ; i++){                           
  2056        |            s += &quot;[]&quot;;                                                   
  2057        |        }                                                                
  2058        |        if(ParamValF){                                                   
  2059        |            s += &quot;=&quot;+FloatToStr(dData);                                  
  2060        |        }                                                                
  2061        |        s += &quot; (RW=&quot;+IntToStr(RefCount)+&quot;,&quot;+IntToStr(SetCount)+&quot;)&quot;;      
  2062        |                                                                         
  2063        |        return s;                                                        
  2064        |    */                                                                   
            +-+---+ 
  2065      |  }  | 
            +-----+ 
</pre>


</body>
</html>
