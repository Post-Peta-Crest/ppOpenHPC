
<html>
<head>
<title>OutputAutoExecCode_Fortran メンバ関数説明</title><base target="main">
<link rel ="stylesheet" type="text/css" href="stylesheet.css" title="stylesheet">
<meta http-equiv="Content-Type" content="text/html;charset=Shift_JIS">
</head>

<body bgcolor="#ffffff">

<div align="right"><font size="2">ABCLibScriptC プロジェクト</font></div>

<table width=100% bgcolor="#e6e6fa" class="titlebgcolor" border="1" cellpadding="7" cellspacing="0">
<tr>
    <td><font class="titlefont">14.10.32. OutputAutoExecCode_Fortran メンバ関数説明</font></td>
</tr>
</table>

<p></p>
<table border="1">
<tr><th align="left" nowrap>メンバ関数名</th>  <td nowrap>OutputAutoExecCode_Fortran</td></tr>
<tr><th align="left" nowrap>定義ファイル名</th><td nowrap>TuneRegion.cpp</td></tr>
<tr><th align="left" nowrap>定義行</th>        <td nowrap>2878</td></tr>
<tr><th align="left" nowrap>所属名</th>        <td nowrap>TTuneRegion</td></tr>
<tr><th align="left" nowrap>アクセス属性</th>  <td nowrap>public</td></tr>
<tr><th align="left" nowrap>宣言形式</th>      <td nowrap>void OutputAutoExecCode_Fortran ( FILE * fp )</td></tr>
<tr><th align="left" nowrap>概要</th>          <td nowrap>時間計測を行うための ATexec サブルーチンのコードの生成を行う。</td></tr>
<tr><th align="left" nowrap>戻り値</th>        <td nowrap></td></tr>
<tr><th align="left" nowrap>パラメタ説明</th>  <td nowrap>fp  出力先ファイルポインタ</td></tr>
<tr><th align="left" nowrap>機能説明</th>      <td nowrap></td></tr>
<tr><th align="left" nowrap>備考</th>          <td nowrap></td></tr>
</table>

<p></p>
呼出し元関数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap><a href="16_4_8.htm">TPass5::MakeControlCode_Fortran</a></td>
<td nowrap><a href="5_6.htm">pass5.cpp</a></td>
<td nowrap><a href="16_4_8.htm">765</a></td>
</tr>
</table>

<p></p>
呼出し先関数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap><a href="16_2_6.htm">TMainF::ErrMessage</a></td>
<td nowrap><a href="5_1.htm">main.cpp</a></td>
<td nowrap><a href="16_2_6.htm">767</a></td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap><a href="16_5_4.htm">TScript::GetATExecArgStr</a></td>
<td nowrap><a href="5_4.htm">pass3.cpp</a></td>
<td nowrap><a href="16_5_4.htm">663</a></td>
</tr>
<tr>
<td nowrap>3</td>
<td nowrap><a href="16_11_4.htm">TValData::GetDefStr_Fortran</a></td>
<td nowrap><a href="5_3.htm">pass2.cpp</a></td>
<td nowrap><a href="16_11_4.htm">2536</a></td>
</tr>
<tr>
<td nowrap>4</td>
<td nowrap><a href="16_10_19.htm">TTuneRegion::GetPrePostSubregionStr</a></td>
<td nowrap><a href="5_7.htm">TuneRegion.cpp</a></td>
<td nowrap><a href="16_10_19.htm">12747</a></td>
</tr>
<tr>
<td nowrap>5</td>
<td nowrap>TList::IndexOf</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap>68</td>
</tr>
<tr>
<td nowrap>6</td>
<td nowrap>TStringList::IndexOf</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap>88</td>
</tr>
<tr>
<td nowrap>7</td>
<td nowrap><a href="31_21.htm">SepLongStr</a></td>
<td nowrap><a href="5_4.htm">pass3.cpp</a></td>
<td nowrap><a href="31_21.htm">950</a></td>
</tr>
<tr>
<td nowrap>8</td>
<td nowrap>LowerCase</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap>109</td>
</tr>
<tr>
<td nowrap>9</td>
<td nowrap>Trim</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap>105</td>
</tr>
<tr>
<td nowrap>10</td>
<td nowrap>c_str</td>
<td nowrap><br></td>
<td nowrap><br></td>
</tr>
<tr>
<td nowrap>11</td>
<td nowrap>find</td>
<td nowrap><br></td>
<td nowrap><br></td>
</tr>
<tr>
<td nowrap>12</td>
<td nowrap>fprintf</td>
<td nowrap><br></td>
<td nowrap><br></td>
</tr>
<tr>
<td nowrap>13</td>
<td nowrap>length</td>
<td nowrap><br></td>
<td nowrap><br></td>
</tr>
<tr>
<td nowrap>14</td>
<td nowrap>strlen</td>
<td nowrap><br></td>
<td nowrap><br></td>
</tr>
<tr>
<td nowrap>15</td>
<td nowrap>substr</td>
<td nowrap><br></td>
<td nowrap><br></td>
</tr>
</table>

<p></p>
参照外部変数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap>MainF</td>
<td nowrap><a href="5_1.htm">main.cpp</a></td>
<td nowrap>53</td>
</tr>
</table>

<p></p>
参照メンバ変数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap>TTuneRegion::AccordingStr</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>201</td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap>TTuneRegion::ArgValList</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>207</td>
</tr>
<tr>
<td nowrap>3</td>
<td nowrap>TTuneRegion::BaseValList</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>216</td>
</tr>
<tr>
<td nowrap>4</td>
<td nowrap>TTuneRegion::CaseCount</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>209</td>
</tr>
<tr>
<td nowrap>5</td>
<td nowrap>TTuneRegion::Comment</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>161</td>
</tr>
<tr>
<td nowrap>6</td>
<td nowrap>TTuneRegion::FittingDegree</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>253</td>
</tr>
<tr>
<td nowrap>7</td>
<td nowrap>TTuneRegion::FittingDspline</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>248</td>
</tr>
<tr>
<td nowrap>8</td>
<td nowrap>TTuneRegion::FittingType</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>251</td>
</tr>
<tr>
<td nowrap>9</td>
<td nowrap>TTuneRegion::FuncName</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>193</td>
</tr>
<tr>
<td nowrap>10</td>
<td nowrap>TTuneRegion::Name</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>192</td>
</tr>
<tr>
<td nowrap>11</td>
<td nowrap>TTuneRegion::ParamValList</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>220</td>
</tr>
<tr>
<td nowrap>12</td>
<td nowrap>TTuneRegion::Pass4</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>145</td>
</tr>
<tr>
<td nowrap>13</td>
<td nowrap>TTuneRegion::SampledList</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>254</td>
</tr>
<tr>
<td nowrap>14</td>
<td nowrap>TTuneRegion::SubRegionList</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>211</td>
</tr>
<tr>
<td nowrap>15</td>
<td nowrap>TTuneRegion::TokenList</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>187</td>
</tr>
<tr>
<td nowrap>16</td>
<td nowrap>TTuneRegion::TuneGroup</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>195</td>
</tr>
<tr>
<td nowrap>17</td>
<td nowrap>TTuneRegion::TuneGroupName</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>196</td>
</tr>
<tr>
<td nowrap>18</td>
<td nowrap>TTuneRegion::UseAccordingF</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>199</td>
</tr>
<tr>
<td nowrap>19</td>
<td nowrap>TTuneRegion::ValDataList</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>188</td>
</tr>
<tr>
<td nowrap>20</td>
<td nowrap>TTuneRegion::variedFromValue</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>235</td>
</tr>
<tr>
<td nowrap>21</td>
<td nowrap>TTuneRegion::variedStepValue</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>237</td>
</tr>
<tr>
<td nowrap>22</td>
<td nowrap>TTuneRegion::variedToValue</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>236</td>
</tr>
</table>

<p></p>
参照先一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>種別</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap><a href="16_5_1.htm">TScript</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_12.htm">pass3.h</a></td>
<td nowrap><a href="16_5_1.htm">209</a></td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap><a href="16_8_1.htm">TSubRegion</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap><a href="16_8_1.htm">375</a></td>
</tr>
<tr>
<td nowrap>3</td>
<td nowrap><a href="16_9_1.htm">TToken</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_10.htm">pass1.h</a></td>
<td nowrap><a href="16_9_1.htm">294</a></td>
</tr>
<tr>
<td nowrap>4</td>
<td nowrap><a href="16_11_1.htm">TValData</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap><a href="16_11_1.htm">106</a></td>
</tr>
</table>

<p></p>
<pre>
関数論理チャート

        |  +--------------------------------------------------------+ 
  2878  +--+ void TTuneRegion::OutputAutoExecCode_Fortran(FILE *fp) | 
  2879     | {                                                      | 
           +--+-----------------------------------------------------+ 
  2880        +--- int idx;
  2881        +--- int i;
  2882        +--- string s;
  2883        +--- TValData *ValData;
  2884        +--- int CaseArrayCount;
  2885        +--- string ValName;
  2886        +--- string BaseValName;
  2887        +--- string ArgStr;
  2888        +--- bool VisualF = MainF-&gt;VisualF;
  2889        +--- const char *F90Char;
  2890        |    
              |  +------------------------------------------------+ 
  2891        +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |  +--+---------------------------------------------+ 
  2892        |     +--- F90Char = &quot; &amp;&quot;;
              |   +-+---+ 
  2893        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  2893        |   |  else{  | 
              |   +-+-------+ 
  2894        |     +--- F90Char = &quot;&quot;;
              |   +-+---+ 
  2895        |   |  }  | 
              |   +-----+ 
  2896        |    
  2897        +--- BaseValName = BaseValList-&gt;Strings[0];
  2898        +--- CaseArrayCount = CaseCount;
              |  +------------------------+ 
  2899        +--+ if(FittingType != 0){  | 
              |  +--+---------------------+ 
  2900        |     +--- CaseArrayCount = SampledList-&gt;Count;
              |   +-+---+ 
  2901        |   |  }  | 
              |   +-----+ 
  2902        +--- fprintf(fp,&quot;%c     ==== %s Optimization Routines\n&quot;,Comment,TuneGroupName.c_str());
  2903        +--- fprintf(fp,&quot;%c     ==============================================================\n&quot;,Comment);
  2904        +--- /*****************************************************************************************************/
  2905        |    //                                                                                                       
  2906        |    //Kogakuin Irie                                                                                          
  2907        |    //引数が不足しているため修正                                                                             
  2908        |    //既存コードはコメントアウト                                                                             
  2909        |    //                                                                                                       
  2910        +--- //  if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){
  2911        |    //      if(TuneGroup != tgDynamic){                                                
  2912        |    //          ArgStr = MainF-&gt;Call_ATExec_Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);      
  2913        |    //          s = &quot;      subroutine OAT_ATexec&quot;+TuneGroupName+Name+&quot;(OAT_Routines&quot;;  
  2914        |    //          s += ArgStr + &quot;)&quot;;                                                     
  2915        |    //          s = SepLongStr(s);                                                     
  2916        |    //          fprintf(fp,&quot;%s\n&quot;,s.c_str());                                          
  2917        |    //      }else{                                                                     
  2918        |    //          ArgStr = MainF-&gt;Call_ATExec_Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);      
  2919        |    //          s = &quot;      subroutine OAT_ATexec&quot;+TuneGroupName+Name+&quot;(OAT_Routines&quot;;  
  2920        |    //          s += ArgStr + &quot;)&quot;;                                                     
  2921        |    //          s = SepLongStr(s);                                                     
  2922        |    //          fprintf(fp,&quot;%s\n&quot;,s.c_str());                                          
  2923        |    //      }                                                                          
  2924        |    //      if(MainF-&gt;MPIF){                                                           
  2925        |    //          fprintf(fp,&quot;      use mpi\n&quot;);                                         
  2926        |    //      }                                                                          
  2927        |    //      fprintf(fp,&quot;      character*%d OAT_Routines\n&quot;,MainF-&gt;CharMaxLen);         
  2928        |    //  }else{                                                                         
  2929        |    //      if(TuneGroup != tgDynamic){                                                
  2930        |    //          ArgStr = MainF-&gt;Call_ATExec_Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);      
  2931        |    //          s = &quot;      subroutine OAT_ATexec&quot;+TuneGroupName+Name+&quot;(OAT_Routines&quot;;  
  2932        |    //          s += ArgStr + &quot;)&quot;;                                                     
  2933        |    //          s = SepLongStr(s);                                                     
  2934        |    //          fprintf(fp,&quot;%s\n&quot;,s.c_str());                                          
  2935        |    //          fprintf(fp,&quot;      character*%d OAT_Routines\n&quot;,MainF-&gt;CharMaxLen);     
  2936        |    //      }else{                                                                     
  2937        |    //          s = &quot;      subroutine OAT_ATexec&quot;+TuneGroupName+Name+&quot;(OAT_Routines,&quot;+ 
  2938        |    //              BaseValName+&quot;,iBestSw1&quot;;                                           
  2939        |    //          s += &quot;)&quot;;                                                              
  2940        |    //          s = SepLongStr(s);                                                     
  2941        |    //          fprintf(fp,&quot;%s\n&quot;,s.c_str());                                          
  2942        |    //          fprintf(fp,&quot;      character*%d OAT_Routines\n&quot;,MainF-&gt;CharMaxLen);     
  2943        |    //          fprintf(fp,&quot;      integer %s\n&quot;,BaseValName.c_str());                  
  2944        |    //          fprintf(fp,&quot;      integer iBestSw1\n&quot;);                                
  2945        |    //      }                                                                          
  2946        |    //  }                                                                              
              |  +------------------------------------------------+ 
  2947        +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |  +--+---------------------------------------------+ 
              |     |  +------------------------------+ 
  2948        |     +--+ if(TuneGroup != tgDynamic){  | 
              |     |  +--+---------------------------+ 
              |     |     |  +----------------------------------------+ 
  2949        |     |     +--+ if(MainF-&gt;Call_ATExec_Script == NULL){ | 
              |     |     |  +--+-------------------------------------+ 
  2950        |     |     |     +--- TScript *Script = new TScript(MainF-&gt;TokenList,0,NULL,ValDataList);
  2951        |     |     |     +--- ArgStr = Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);
  2952        |     |     |     +--- s = &quot;      subroutine OAT_ATexec&quot;+TuneGroupName+Name+&quot;(OAT_Routines&quot;;
  2953        |     |     |     +--- s += ArgStr + &quot;)&quot;;
  2954        |     |     |     +--- s = SepLongStr(s);
  2955        |     |     |     +--- fprintf(fp,&quot;%s\n&quot;,s.c_str());
  2956        |     |     |     +--- delete Script;
              |     |     |   +-+---+ 
  2957        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  2958        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  2959        |     |     |     +--- ArgStr = MainF-&gt;Call_ATExec_Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);
  2960        |     |     |     +--- s = &quot;      subroutine OAT_ATexec&quot;+TuneGroupName+Name+&quot;(OAT_Routines&quot;;
  2961        |     |     |     +--- s += ArgStr + &quot;)&quot;;
  2962        |     |     |     +--- s = SepLongStr(s);
  2963        |     |     |     +--- fprintf(fp,&quot;%s\n&quot;,s.c_str());
              |     |     |   +-+---+ 
  2964        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |   +-+---+ 
  2965        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  2965        |     |   |  else{  | 
              |     |   +-+-------+ 
              |     |     |  +----------------------------------------+ 
  2966        |     |     +--+ if(MainF-&gt;Call_ATExec_Script == NULL){ | 
              |     |     |  +--+-------------------------------------+ 
  2967        |     |     |     +--- TScript *Script = new TScript(MainF-&gt;TokenList,0,NULL,ValDataList);
  2968        |     |     |     +--- ArgStr = Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);
  2969        |     |     |     +--- s = &quot;      subroutine OAT_ATexec&quot;+TuneGroupName+Name+&quot;(OAT_Routines,iBestSw1&quot;;
  2970        |     |     |     +--- s += ArgStr + &quot;)&quot;;
  2971        |     |     |     +--- s = SepLongStr(s);
  2972        |     |     |     +--- fprintf(fp,&quot;%s\n&quot;,s.c_str());
  2973        |     |     |     +--- delete Script;
              |     |     |   +-+---+ 
  2974        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  2975        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  2976        |     |     |     +--- ArgStr = MainF-&gt;Call_ATExec_Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);
  2977        |     |     |     +--- s = &quot;      subroutine OAT_ATexec&quot;+TuneGroupName+Name+&quot;(OAT_Routines,iBestSw1&quot;;
  2978        |     |     |     +--- s += ArgStr + &quot;)&quot;;
  2979        |     |     |     +--- s = SepLongStr(s);
  2980        |     |     |     +--- fprintf(fp,&quot;%s\n&quot;,s.c_str());
              |     |     |   +-+---+ 
  2981        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |   +-+---+ 
  2982        |     |   |  }  | 
              |     |   +-----+ 
  2983        |     +--- fprintf(fp,&quot;      character*%d OAT_Routines\n&quot;,MainF-&gt;CharMaxLen);
              |     |  +------------------------------+ 
  2984        |     +--+ if(TuneGroup == tgDynamic){  | 
              |     |  +--+---------------------------+ 
  2985        |     |     +--- fprintf(fp,&quot;      integer iBestSw1\n&quot;);
              |     |   +-+---+ 
  2986        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
  2987        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  2987        |   |  else{  | 
              |   +-+-------+ 
              |     |  +------------------------------+ 
  2988        |     +--+ if(TuneGroup != tgDynamic){  | 
              |     |  +--+---------------------------+ 
              |     |     |  +----------------------------------------+ 
  2989        |     |     +--+ if(MainF-&gt;Call_ATExec_Script == NULL){ | 
              |     |     |  +--+-------------------------------------+ 
  2990        |     |     |     +--- TScript *Script = new TScript(MainF-&gt;TokenList,0,NULL,ValDataList);
  2991        |     |     |     +--- ArgStr = Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);
  2992        |     |     |     +--- s = &quot;      subroutine OAT_ATexec&quot;+TuneGroupName+Name+&quot;(OAT_Routines&quot;;
  2993        |     |     |     +--- s += ArgStr + &quot;)&quot;;
  2994        |     |     |     +--- s = SepLongStr(s);
  2995        |     |     |     +--- fprintf(fp,&quot;%s\n&quot;,s.c_str());
  2996        |     |     |     +--- delete Script;
              |     |     |   +-+---+ 
  2997        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  2998        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  2999        |     |     |     +--- ArgStr = MainF-&gt;Call_ATExec_Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);
  3000        |     |     |     +--- s = &quot;      subroutine OAT_ATexec&quot;+TuneGroupName+Name+&quot;(OAT_Routines&quot;;
  3001        |     |     |     +--- s += ArgStr + &quot;)&quot;;
  3002        |     |     |     +--- s = SepLongStr(s);
  3003        |     |     |     +--- fprintf(fp,&quot;%s\n&quot;,s.c_str());
              |     |     |   +-+---+ 
  3004        |     |     |   |  }  | 
              |     |     |   +-----+ 
  3005        |     |     +--- fprintf(fp,&quot;      character*%d OAT_Routines\n&quot;,MainF-&gt;CharMaxLen);
              |     |   +-+---+ 
  3006        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  3006        |     |   |  else{  | 
              |     |   +-+-------+ 
              |     |     |  +----------------------------------------+ 
  3007        |     |     +--+ if(MainF-&gt;Call_ATExec_Script == NULL){ | 
              |     |     |  +--+-------------------------------------+ 
  3008        |     |     |     +--- TScript *Script = new TScript(MainF-&gt;TokenList,0,NULL,ValDataList);
  3009        |     |     |     +--- ArgStr = Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);
  3010        |     |     |     +--- s = &quot;      subroutine OAT_ATexec&quot;+TuneGroupName+Name+&quot;(OAT_Routines,iBestSw1&quot;;
  3011        |     |     |     +--- s += ArgStr + &quot;)&quot;;
  3012        |     |     |     +--- s = SepLongStr(s);
  3013        |     |     |     +--- fprintf(fp,&quot;%s\n&quot;,s.c_str());
  3014        |     |     |     +--- delete Script;
              |     |     |   +-+---+ 
  3015        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  3016        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  3017        |     |     |     +--- ArgStr = MainF-&gt;Call_ATExec_Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);
  3018        |     |     |     +--- s = &quot;      subroutine OAT_ATexec&quot;+TuneGroupName+Name+&quot;(OAT_Routines,iBestSw1&quot;;
  3019        |     |     |     +--- s += ArgStr + &quot;)&quot;;
  3020        |     |     |     +--- s = SepLongStr(s);
  3021        |     |     |     +--- fprintf(fp,&quot;%s\n&quot;,s.c_str());
              |     |     |   +-+---+ 
  3022        |     |     |   |  }  | 
              |     |     |   +-----+ 
  3023        |     |     +--- fprintf(fp,&quot;      character*%d OAT_Routines\n&quot;,MainF-&gt;CharMaxLen);
  3024        |     |     +--- fprintf(fp,&quot;      integer iBestSw1\n&quot;);
              |     |   +-+---+ 
  3025        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
  3026        |   |  }  | 
              |   +-----+ 
  3027        +--- //
  3028        |    //ここまで                                                                                               
  3029        |    //                                                                                                       
  3030        |    /*****************************************************************************************************/  
  3031        |                                                                                                             
  3032        |    //                                                                                                       
  3033        |    // チューニングに使用する引数宣言                                                                        
  3034        |    //  配列の添え字部分が、N 一致する場合は、NN に置換（変数名固定）                                        
  3035        |    // 配列の添え字部分が、基本パラメタ名(N等) 一致する場合は、                                              
  3036        |    // 基本パラメタ名*2(NN等） に置換（変数名固定-&gt;可変 2009/03/05）                                         
  3037        |    //                                                                                                       
  3038        +--- idx = Pass4-&gt;OAT_ValList-&gt;IndexOf(&quot;OAT_ENDTUNESIZE&quot;);
              |  +----------------+ 
  3039        +--+ if(idx == -1){ | 
              |  +--+-------------+ 
  3040        |     +--- //
  3041        |     |    // OAT_ENDTUNESIZEがない場合は、 PROB_VALN,PROB_VALNNの変数を検索して  
  3042        |     |    // その Parm値を使用する。（N,NN固定が前提となる）                     
  3043        |     |    //                                                                     
  3044        |     +--- int kk;
  3045        |     |    
  3046        |     +--- ValName = BaseValList-&gt;Strings[0];
              |     |  +------------------------------------------------+ 
  3047        |     +--+ for(kk = 0 ; kk &lt; ValDataList-&gt;Count ; kk++){  | 
              |     |  +--+---------------------------------------------+ 
  3048        |     |     +--- ValData = (TValData *)ValDataList-&gt;Items[kk];
              |     |     |  +----------------------+ 
  3049        |     |     +--+ if(ValData == NULL){ | 
              |     |     |  +--+-------------------+ 
              |     |     |     |  +------------+ 
  3050        |     |     |     +--+ continue;  | 
              |     |     |     |  +------------+ 
              |     |     |   +-+---+ 
  3051        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +----------------------------------+ 
  3052        |     |     +--+ if(ValData-&gt;ParamValF == false){ | 
              |     |     |  +--+-------------------------------+ 
              |     |     |     |  +------------+ 
  3053        |     |     |     +--+ continue;  | 
              |     |     |     |  +------------+ 
              |     |     |   +-+---+ 
  3054        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +----------------------------------------------------+ 
  3055        |     |     +--+ if(LowerCase(ValData-&gt;Str) == LowerCase(ValName)){ | 
              |     |     |  +--+-------------------------------------------------+ 
              |     |     |     |  +--------+ 
  3056        |     |     |     +--+ break; | 
              |     |     |     |  +--------+ 
              |     |     |   +-+---+ 
  3057        |     |     |   |  }  | 
              |     |     |   +-----+ 
  3058        |     |     +--- // Add 2004/11/12 NN=xxx でもＯＫとした。Fittingサンプル
              |     |     |  +------------------------------------------------------------+ 
  3059        |     |     +--+ if(LowerCase(ValData-&gt;Str) == LowerCase(ValName+ValName)){ | 
              |     |     |  +--+---------------------------------------------------------+ 
              |     |     |     |  +--------+ 
  3060        |     |     |     +--+ break; | 
              |     |     |     |  +--------+ 
              |     |     |   +-+---+ 
  3061        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |   +-+---+ 
  3062        |     |   |  }  | 
              |     |   +-----+ 
              |     |  +--------------------------------+ 
  3063        |     +--+ if(kk &gt;= ValDataList-&gt;Count){  | 
              |     |  +--+-----------------------------+ 
  3064        |     |     +--- MainF-&gt;ErrMessage(-1,&quot;parameter (&quot;+ValName+&quot;=)が設定されていません。&quot;);
              |     |     |  +----------+ 
  3065        |     |     +--+ return;  | 
              |     |     |  +----------+ 
              |     |   +-+---+ 
  3066        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
  3067        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3067        |   |  else{  | 
              |   +-+-------+ 
  3068        |     +--- //      EndTuneSizeData = (int)Pass4-&gt;OAT_ValList-&gt;Objects[idx];
              |   +-+---+ 
  3069        |   |  }  | 
              |   +-----+ 
  3070        +--- //
  3071        |    //  ArgValでの引数リストを追加。Fortran用は、改行コードを含む。      
  3072        |    //  ここの呼び出しの引数までは、AtExec()の並びと合わせる。2013/03/17 
  3073        |    //                                                                   
              |  +------------------------------------------------+ 
  3074        +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |  +--+---------------------------------------------+ 
              |     |  +----------------------------------------+ 
  3075        |     +--+ if(MainF-&gt;Call_ATExec_Script != NULL){ | 
              |     |  +--+-------------------------------------+ 
  3076        |     |     +--- ArgStr = MainF-&gt;Call_ATExec_Script-&gt;GetATExecArgStr(true,&quot;&quot;,&quot;&quot;);
  3077        |     |     +--- fprintf(fp,&quot;%s&quot;,ArgStr.c_str());
              |     |   +-+---+ 
  3078        |     |   |  }  | 
              |     |   +-----+ 
  3079        |     +--- /***********************************************************************/
  3080        |     |    //                                                                         
  3081        |     |    //Kogakuin Irie                                                            
  3082        |     |    //仮引数の宣言部分を追加                                                   
  3083        |     |    //                                                                         
              |     |   +-+-------+ 
  3084        |     |   |  else{  | 
              |     |   +-+-------+ 
  3085        |     |     +--- TScript *Script = new TScript(MainF-&gt;TokenList,0,NULL,ValDataList);
  3086        |     |     +--- ArgStr = Script-&gt;GetATExecArgStr(true,&quot;&quot;,&quot;&quot;);
  3087        |     |     +--- fprintf(fp,&quot;%s&quot;,ArgStr.c_str());
  3088        |     |     +--- delete Script;
              |     |   +-+---+ 
  3089        |     |   |  }  | 
              |     |   +-----+ 
  3090        |     +--- //
  3091        |     |    //ここまで                                                                 
  3092        |     |    //                                                                         
  3093        |     |    /***********************************************************************/  
              |   +-+---+ 
  3094        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3094        |   |  else{  | 
              |   +-+-------+ 
  3095        |     |    
  3096        |     +--- /***********************************************************************/
  3097        |     |    //                                                                         
  3098        |     |    //Kogakuin Irie                                                            
  3099        |     |    //仮引数の宣言部分を追加                                                   
  3100        |     |    //                                                                         
              |     |  +----------------------------------------+ 
  3101        |     +--+ if(MainF-&gt;Call_ATExec_Script == NULL){ | 
              |     |  +--+-------------------------------------+ 
  3102        |     |     +--- TScript *Script = new TScript(MainF-&gt;TokenList,0,NULL,ValDataList);
  3103        |     |     +--- ArgStr = Script-&gt;GetATExecArgStr(true,&quot;&quot;,&quot;&quot;);
  3104        |     |     +--- fprintf(fp,&quot;%s&quot;,ArgStr.c_str());
  3105        |     |     +--- delete Script;
              |     |   +-+---+ 
  3106        |     |   |  }  | 
              |     |   +-----+ 
  3107        |     +--- //
  3108        |     |    //ここまで                                                                 
  3109        |     |    //                                                                         
  3110        |     |    /***********************************************************************/  
  3111        |     +--- int DefPosS;
  3112        |     +--- int ParamValIdx;
  3113        |     +--- int BaseValIdx;
  3114        |     +--- TToken *Token;
  3115        |     +--- int j;
  3116        |     |    
  3117        |     +--- DefPosS = -1;
  3118        |     +--- s = &quot;&quot;;
              |     |  +--------------------------------------------+ 
  3119        |     +--+ for(i = 0 ; i &lt; ArgValList-&gt;Count ; i++){  | 
              |     |  +--+-----------------------------------------+ 
              |     |     |  +------------------------------+ 
  3120        |     |     +--+ if(TuneGroup == tgDynamic){  | 
              |     |     |  +--+---------------------------+ 
              |     |     |     |  +--------------------+ 
  3121        |     |     |     +--+ break;  // Dynamic | 
              |     |     |     |  +--------------------+ 
              |     |     |   +-+---+ 
  3122        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +------------------------------------+ 
  3123        |     |     +--+ if(ArgValList-&gt;Strings[i] == &quot;&quot;){  | 
              |     |     |  +--+---------------------------------+ 
              |     |     |     |  +------------+ 
  3124        |     |     |     +--+ continue;  | 
              |     |     |     |  +------------+ 
              |     |     |   +-+---+ 
  3125        |     |     |   |  }  | 
              |     |     |   +-----+ 
  3126        |     |     +--- ValData = (TValData *)ArgValList-&gt;Objects[i];
  3127        |     |     +--- ValName = ValData-&gt;Str;
  3128        |     |     +--- //
  3129        |     |     |    // パラメータ文として追加済みと同名の変数は対象外とする。（名前で比較）  
  3130        |     |     |    // N-&gt;NN の場合の Nは置き換えを行っているため対象外となる。              
  3131        |     |     |    //                                                                       
              |     |     |  +----------------------------------------------------------------------------+ 
  3132        |     |     +--+ for(ParamValIdx = 0 ; ParamValIdx &lt; ParamValList-&gt;Count ; ParamValIdx++){  | 
              |     |     |  +--+-------------------------------------------------------------------------+ 
              |     |     |     |  +--------------------------------------------------------------------------+ 
  3133        |     |     |     +--+ if(LowerCase(ParamValList-&gt;Strings[ParamValIdx]) == LowerCase(ValName)){ | 
              |     |     |     |  +--+-----------------------------------------------------------------------+ 
              |     |     |     |     |  +--------+ 
  3134        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  3135        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  3136        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +----------------------------------------+ 
  3137        |     |     +--+ if(ParamValIdx &lt; ParamValList-&gt;Count){ | 
              |     |     |  +--+-------------------------------------+ 
              |     |     |     |  +------------+ 
  3138        |     |     |     +--+ continue;  | 
              |     |     |     |  +------------+ 
              |     |     |   +-+---+ 
  3139        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +------------------------------------------------------------------------+ 
  3140        |     |     +--+ for(BaseValIdx = 0 ; BaseValIdx &lt; BaseValList-&gt;Count ; BaseValIdx++){  | 
              |     |     |  +--+---------------------------------------------------------------------+ 
              |     |     |     |  +------------------------------------------------------------------------+ 
  3141        |     |     |     +--+ if(LowerCase(BaseValList-&gt;Strings[BaseValIdx]) == LowerCase(ValName)){ | 
              |     |     |     |  +--+---------------------------------------------------------------------+ 
              |     |     |     |     |  +--------+ 
  3142        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  3143        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  3144        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +------------------------------------------------------------+ 
  3145        |     |     +--+ if((BaseValIdx &lt; BaseValList-&gt;Count)&amp;&amp;(BaseValIdx != 0)){  | 
              |     |     |  +--+---------------------------------------------------------+ 
              |     |     |     |  +------------+ 
  3146        |     |     |     +--+ continue;  | 
              |     |     |     |  +------------+ 
              |     |     |   +-+---+ 
  3147        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +------------------------------+ 
  3148        |     |     +--+ if(TuneGroup == tgDynamic){  | 
              |     |     |  +--+---------------------------+ 
              |     |     |     |  +--------------------------------------+ 
  3149        |     |     |     +--+ if(BaseValIdx &lt; BaseValList-&gt;Count){ | 
              |     |     |     |  +--+-----------------------------------+ 
              |     |     |     |     |  +------------+ 
  3150        |     |     |     |     +--+ continue;  | 
              |     |     |     |     |  +------------+ 
              |     |     |     |   +-+---+ 
  3151        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  3152        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------------------------------------------------------------------+ 
  3153        |     |     +--+ if((DefPosS == -1)||(ValData-&gt;DefPosS != DefPosS)){ // 違う定義行  | 
              |     |     |  +--+-----------------------------------------------------------------+ 
              |     |     |     |  +--------------+ 
  3154        |     |     |     +--+ if(s != &quot;&quot;){ | 
              |     |     |     |  +--+-----------+ 
  3155        |     |     |     |     +--- fprintf(fp,&quot;%s\n&quot;,s.c_str());
  3156        |     |     |     |     +--- s = &quot;&quot;;
              |     |     |     |   +-+---+ 
  3157        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
  3158        |     |     |     +--- //
  3159        |     |     |     |    //  Dimension属性 に対応するための N-&gt;NN への置換を定義文字列まで拡張した  
  3160        |     |     |     |    //  2007/1/19                                                              
  3161        |     |     |     |    //                                                                         
  3162        |     |     |     +--- int j;
  3163        |     |     |     |    
  3164        |     |     |     +--- s = &quot;&quot;;
              |     |     |     |  +------------------------------+ 
  3165        |     |     |     +--+ if(ValData-&gt;DefPosS != -1){  | 
              |     |     |     |  +--+---------------------------+ 
              |     |     |     |     |  +----------------------------------------------------------+ 
  3166        |     |     |     |     +--+ for(j = ValData-&gt;DefPosS ; j &lt; ValData-&gt;DefPosE ; j++){  | 
              |     |     |     |     |  +--+-------------------------------------------------------+ 
  3167        |     |     |     |     |     +--- Token = (TToken *)TokenList-&gt;Items[j];
  3168        |     |     |     |     |     +--- ValName = Token-&gt;OrgStr;
              |     |     |     |     |     |  +------------------------------------------------------+ 
  3169        |     |     |     |     |     +--+ if((Token-&gt;TokId == -1)||(Token-&gt;TokId == tid_Val)){ | 
              |     |     |     |     |     |  +--+---------------------------------------------------+ 
              |     |     |     |     |     |     |  +------------------------------------------------------------------------+ 
  3170        |     |     |     |     |     |     +--+ for(BaseValIdx = 0 ; BaseValIdx &lt; BaseValList-&gt;Count ; BaseValIdx++){  | 
              |     |     |     |     |     |     |  +--+---------------------------------------------------------------------+ 
              |     |     |     |     |     |     |     |  +------------------------------------------------------------------------+ 
  3171        |     |     |     |     |     |     |     +--+ if(LowerCase(BaseValList-&gt;Strings[BaseValIdx]) == LowerCase(ValName)){ | 
              |     |     |     |     |     |     |     |  +--+---------------------------------------------------------------------+ 
              |     |     |     |     |     |     |     |     |  +--------+ 
  3172        |     |     |     |     |     |     |     |     +--+ break; | 
              |     |     |     |     |     |     |     |     |  +--------+ 
              |     |     |     |     |     |     |     |   +-+---+ 
  3173        |     |     |     |     |     |     |     |   |  }  | 
              |     |     |     |     |     |     |     |   +-----+ 
              |     |     |     |     |     |     |   +-+---+ 
  3174        |     |     |     |     |     |     |   |  }  | 
              |     |     |     |     |     |     |   +-----+ 
  3175        |     |     |     |     |     |     +--- /* 引数渡しになったので、基本パラメータの名前変更は、不要のはず。
  3176        |     |     |     |     |     |     |                                if(BaseValIdx &lt; BaseValList-&gt;Count){                                         
  3177        |     |     |     |     |     |     |                                    ValName = BaseValList-&gt;Strings[0]+BaseValList-&gt;Strings[0]; // Exp. N-&gt;NN 
  3178        |     |     |     |     |     |     |                                }                                                                            
  3179        |     |     |     |     |     |     |    */                                                                                                       
              |     |     |     |     |     |   +-+---+ 
  3180        |     |     |     |     |     |   |  }  | 
              |     |     |     |     |     |   +-----+ 
  3181        |     |     |     |     |     +--- s += ValName;
              |     |     |     |     |   +-+---+ 
  3182        |     |     |     |     |   |  }  | 
              |     |     |     |     |   +-----+ 
              |     |     |     |   +-+---+ 
  3183        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+-------+ 
  3183        |     |     |     |   |  else{  | 
              |     |     |     |   +-+-------+ 
  3184        |     |     |     |     +--- s = ValData-&gt;GetDefStr_Fortran();
              |     |     |     |   +-+---+ 
  3185        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |     |  +--------------+ 
  3186        |     |     |     +--+ if(s == &quot;&quot;){ | 
              |     |     |     |  +--+-----------+ 
              |     |     |     |     |  +------------+ 
  3187        |     |     |     |     +--+ continue;  | 
              |     |     |     |     |  +------------+ 
              |     |     |     |   +-+---+ 
  3188        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
  3189        |     |     |     +--- DefPosS = ValData-&gt;DefPosS;
              |     |     |   +-+---+ 
  3190        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  3190        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  3191        |     |     |     +--- s += &quot;,&quot;;
              |     |     |   +-+---+ 
  3192        |     |     |   |  }  | 
              |     |     |   +-----+ 
  3193        |     |     +--- s += &quot; &quot; + ValData-&gt;Str;
              |     |     |  +--------------------------------------------------------------------+ 
  3194        |     |     +--+ for(j = ValData-&gt;ArrayDefPosS ; j &lt; ValData-&gt;ArrayDefPosE ; j++){  | 
              |     |     |  +--+-----------------------------------------------------------------+ 
  3195        |     |     |     +--- Token = (TToken *)TokenList-&gt;Items[j];
  3196        |     |     |     +--- // Change for N or n 2007/1/19
  3197        |     |     |     +--- ValName = Token-&gt;OrgStr;
              |     |     |     |  +------------------------------------------------------+ 
  3198        |     |     |     +--+ if((Token-&gt;TokId == -1)||(Token-&gt;TokId == tid_Val)){ | 
              |     |     |     |  +--+---------------------------------------------------+ 
              |     |     |     |     |  +------------------------------------------------------------------------+ 
  3199        |     |     |     |     +--+ for(BaseValIdx = 0 ; BaseValIdx &lt; BaseValList-&gt;Count ; BaseValIdx++){  | 
              |     |     |     |     |  +--+---------------------------------------------------------------------+ 
              |     |     |     |     |     |  +------------------------------------------------------------------------+ 
  3200        |     |     |     |     |     +--+ if(LowerCase(BaseValList-&gt;Strings[BaseValIdx]) == LowerCase(ValName)){ | 
              |     |     |     |     |     |  +--+---------------------------------------------------------------------+ 
              |     |     |     |     |     |     |  +--------+ 
  3201        |     |     |     |     |     |     +--+ break; | 
              |     |     |     |     |     |     |  +--------+ 
              |     |     |     |     |     |   +-+---+ 
  3202        |     |     |     |     |     |   |  }  | 
              |     |     |     |     |     |   +-----+ 
              |     |     |     |     |   +-+---+ 
  3203        |     |     |     |     |   |  }  | 
              |     |     |     |     |   +-----+ 
  3204        |     |     |     |     +--- /* 引数渡しになｔったので、基本パラメータの名前変更は、不要のはず。
  3205        |     |     |     |     |                        if(BaseValIdx &lt; BaseValList-&gt;Count){                                         
  3206        |     |     |     |     |                            ValName = BaseValList-&gt;Strings[0]+BaseValList-&gt;Strings[0]; // Exp. N-&gt;NN 
  3207        |     |     |     |     |                        }                                                                            
  3208        |     |     |     |     |    */                                                                                               
              |     |     |     |   +-+---+ 
  3209        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
  3210        |     |     |     +--- s += ValName;
              |     |     |   +-+---+ 
  3211        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |   +-+---+ 
  3212        |     |   |  }  | 
              |     |   +-----+ 
              |     |  +--------------+ 
  3213        |     +--+ if(s != &quot;&quot;){ | 
              |     |  +--+-----------+ 
  3214        |     |     +--- fprintf(fp,&quot;%s\n&quot;,s.c_str());
              |     |   +-+---+ 
  3215        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
  3216        |   |  }  | 
              |   +-----+ 
  3217        |    
  3218        +--- fprintf(fp,&quot;\n&quot;);
  3219        +--- fprintf(fp,&quot;      include 'OAT.h'\n&quot;);
  3220        +--- /**********************************************/
  3221        |    //                                               
  3222        |    //Kogakuin Irie                                  
  3223        |    //mpif.hをインクルードさせる処理を追加           
  3224        |    //                                               
              |  +------------------+ 
  3225        +--+ if(MainF-&gt;MPIF){ | 
              |  +--+---------------+ 
  3226        |     +--- fprintf(fp,&quot;      include 'mpif.h'\n&quot;);
              |   +-+---+ 
  3227        |   |  }  | 
              |   +-----+ 
  3228        +--- //
  3229        |    //ここまで                                       
  3230        |    //                                               
  3231        |    /**********************************************/ 
  3232        +--- fprintf(fp,&quot;\n&quot;);
  3233        |    
              |  +------------------------+ 
  3234        +--+ if(FittingType != 0){  | 
              |  +--+---------------------+ 
  3235        |     +--- fprintf(fp,&quot;%c     !!!!!! fitting用\n&quot;,Comment);
  3236        |     +--- fprintf(fp,&quot;%c     === for estimation using Least Square Method\n&quot;,Comment);
  3237        |     +--- fprintf(fp,&quot;%c        ===  for sumipling data\n&quot;,Comment);
  3238        |     +--- fprintf(fp,&quot;      real*8  xDim(0:OATLSM_MAX_N-1, 0:OATLSM_MAX_NPARM-1)\n&quot;);
  3239        |     +--- fprintf(fp,&quot;      real*8  yEst(0:OATLSM_MAX_N-1, 0:OATLSM_MAX_NPARM-1)\n&quot;);
  3240        |     +--- fprintf(fp,&quot;      real*8  x(0:OATLSM_MAX_N-1)\n&quot;);
  3241        |     +--- fprintf(fp,&quot;      real*8  y(0:OATLSM_MAX_N-1)\n&quot;);
  3242        |     +--- fprintf(fp,&quot;%c        === for target coefficients\n&quot;,Comment);
  3243        |     +--- fprintf(fp,&quot;      real*8  a_lsm(0:OATLSM_MAX_M)\n&quot;);
  3244        |     +--- fprintf(fp,&quot;      real*8  aa_lsm(0:OATLSM_MAX_M, 0:OATLSM_MAX_NPARM-1)\n&quot;);
  3245        |     +--- fprintf(fp,&quot;%c     !!!!!! fitting用終り\n&quot;,Comment);
              |   +-+---+ 
  3246        |   |  }  | 
              |   +-----+ 
  3247        +--- fprintf(fp,&quot;\n&quot;);
  3248        +--- fprintf(fp,&quot;      integer iusw1\n&quot;);
  3249        +--- //      fprintf(fp,&quot;      integer F1(%d)\n&quot;,CaseCount);
  3250        +--- fprintf(fp,&quot;      integer F1(%d)\n&quot;,CaseArrayCount);
              |  +------------------------------------------------+ 
  3251        +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |  +--+---------------------------------------------+ 
  3252        |     +--- /******************************************************************************************/
  3253        |     |    //                                                                                           
  3254        |     |    //Kogakuin Irie                                                                              
  3255        |     |    //install以外にも対応できるよう修正                                                          
  3256        |     |    //既存コードはコメントアウト                                                                 
  3257        |     |    //                                                                                           
  3258        |     +--- //      fprintf(fp,&quot;      integer iloop_install,iloop_iter,iloop_n\n&quot;);
  3259        |     +--- fprintf(fp,&quot;      integer iloop_%s,iloop_iter,iloop_n\n&quot;,LowerCase(TuneGroupName).c_str());
  3260        |     +--- //
  3261        |     |    //ここまで                                                                                   
  3262        |     |    //                                                                                           
  3263        |     |    /******************************************************************************************/ 
  3264        |     +--- fprintf(fp,&quot;\n&quot;);
              |     |  +------------------------------+ 
  3265        |     +--+ if(TuneGroup != tgDynamic){  | 
              |     |  +--+---------------------------+ 
  3266        |     |     +--- fprintf(fp,&quot;      integer iBestSw1\n&quot;);
              |     |   +-+---+ 
  3267        |     |   |  }  | 
              |     |   +-----+ 
  3268        |     +--- fprintf(fp,&quot;\n&quot;);
              |   +-+---+ 
  3269        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3269        |   |  else{  | 
              |   +-+-------+ 
              |     |  +------------------------------+ 
  3270        |     +--+ if(TuneGroup != tgDynamic){  | 
              |     |  +--+---------------------------+ 
  3271        |     |     +--- fprintf(fp,&quot;      integer iBestSw1\n&quot;);
              |     |   +-+---+ 
  3272        |     |   |  }  | 
              |     |   +-----+ 
  3273        |     +--- fprintf(fp,&quot;\n&quot;);
              |   +-+---+ 
  3274        |   |  }  | 
              |   +-----+ 
  3275        +--- fprintf(fp,&quot;\n&quot;);
  3276        +--- fprintf(fp,&quot;      real*8  t1, t2, t_all, bt\n&quot;);
  3277        +--- fprintf(fp,&quot;      real*8  dBestTime1\n&quot;);
              |  +------------------------------------------------+ 
  3278        +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |  +--+---------------------------------------------+ 
              |     |  +--------------------------------------+ 
  3279        |     +--+ if(!MainF-&gt;IncludeCodeInContainsF){  | 
              |     |  +--+-----------------------------------+ 
  3280        |     |     +--- // Includeの位置でread*4と混在するため必要
  3281        |     |     |    // Contains内に配置する場合は不要。2013/03/22  
  3282        |     |     +--- /*****************************************************/
  3283        |     |     |    //                                                       
  3284        |     |     |    //Kogakuin Irie                                          
  3285        |     |     |    //エラーの原因となったのでプログラム内でコメントアウト   
  3286        |     |     |    //                                                       
  3287        |     |     +--- fprintf(fp,&quot;!      real*8  OAT_Wtime\n&quot;);
  3288        |     |     +--- //
  3289        |     |     |    //ここまで                                               
  3290        |     |     |    //                                                       
  3291        |     |     |    /*****************************************************/  
              |     |   +-+---+ 
  3292        |     |   |  }  | 
              |     |   +-----+ 
  3293        |     +--- fprintf(fp,&quot;\n&quot;);
  3294        |     +--- fprintf(fp,&quot;      integer ierr\n&quot;);
              |   +-+---+ 
  3295        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3295        |   |  else{  | 
              |   +-+-------+ 
  3296        |     +--- fprintf(fp,&quot;      real*8  OAT_Wtime\n&quot;);
              |   +-+---+ 
  3297        |   |  }  | 
              |   +-----+ 
  3298        +--- fprintf(fp,&quot;\n&quot;);
  3299        +--- fprintf(fp,&quot;\n&quot;);
              |  +----------------------------------------------------------------------------------+ 
  3300        +--+ if(MainF-&gt;EECntlF){     // -eectrlのフラグ(ON時は、コントロール部分を置き換え）  | 
              |  +--+-------------------------------------------------------------------------------+ 
  3301        |     +--- // この定義がないと do While等での型チェックで問題発生していた
  3302        |     +--- fprintf(fp,&quot;      integer OAT_Eecntl_NextIndex\n&quot;);
  3303        |     +--- fprintf(fp,&quot;      logical OAT_Eecntl_Continue\n&quot;);
              |   +-+---+ 
  3304        |   |  }  | 
              |   +-----+ 
              |  +--------------------------------+ 
  3305        +--+ if(VisualF){ // Visualize = ON | 
              |  +--+-----------------------------+ 
  3306        |     +--- // 格納用の ExecState() と読込み用の cbufを確保する。
  3307        |     +--- fprintf(fp,&quot;      integer inum,iloop_v,LoopCount\n&quot;);
  3308        |     +--- fprintf(fp,&quot;      integer ExecState(%d)\n&quot;,MainF-&gt;TuneRegionList-&gt;Count);
  3309        |     +--- fprintf(fp,&quot;      character*100 cbuf\n&quot;);
  3310        |     +--- fprintf(fp,&quot;      real*8 t_all_sum\n&quot;);
              |   +-+---+ 
  3311        |   |  }  | 
              |   +-----+ 
  3312        |    
  3313        +--- fprintf(fp,&quot;\n&quot;);
  3314        +--- fprintf(fp,&quot;%c     ---- file create\n&quot;,Comment);
  3315        +--- fprintf(fp,&quot;%c     -----------------------------------------\n&quot;,Comment);
              |  +------------------------------------------------+ 
  3316        +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |  +--+---------------------------------------------+ 
  3317        |     +--- fprintf(fp,&quot;      if (oat_myid .eq. 0) then\n&quot;);
              |   +-+---+ 
  3318        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3318        |   |  else{  | 
              |   +-+-------+ 
  3319        |     +--- fprintf(fp,&quot;      if (myid .eq. 0) then\n&quot;);
              |   +-+---+ 
  3320        |   |  }  | 
              |   +-----+ 
  3320        +--- fprintf(fp,&quot;        open(11, status = 'replace',%s\n&quot;,F90Char);
  3321        +--- fprintf(fp,&quot;     &amp;     file = 'OAT_%s%sParam.dat',%s\n&quot;,TuneGroupName.c_str(),Name.c_str(),F90Char);
  3322        +--- fprintf(fp,&quot;     &amp;     action = 'write', pad= 'yes')\n&quot;);
  3323        +--- fprintf(fp,&quot;\n&quot;);
  3324        +--- fprintf(fp,&quot;        write (11, *) \&quot;(%s\&quot;\n&quot;,Name.c_str());
              |  +------------------------------+ 
  3325        +--+ if(TuneGroup != tgDynamic){  | 
              |  +--+---------------------------+ 
  3326        |     +--- fprintf(fp,&quot;        write (11, *) \&quot;  (OAT_NUMPROCS \&quot;, OAT_NUMPROCS,\&quot;)\&quot;\n&quot;);
  3327        |     +--- fprintf(fp,&quot;        write (11, *) \&quot;  (OAT_SAMPDIST \&quot;, OAT_SAMPDIST,\&quot;)\&quot;\n&quot;);
              |   +-+---+ 
  3328        |   |  }  | 
              |   +-----+ 
  3329        |    
              |  +--------------------------------+ 
  3330        +--+ if(VisualF){ // Visualize = ON | 
              |  +--+-----------------------------+ 
  3331        |     +--- // 格納用の ExecState() の現在の値を読み込む。
  3332        |     +--- fprintf(fp,&quot;\n&quot;);
  3333        |     |    
              |     |  +------------------------------+ 
  3334        |     +--+ if(TuneGroup != tgDynamic){  | 
              |     |  +--+---------------------------+ 
  3335        |     |     +--- fprintf(fp,&quot;        LoopCount = OAT_ENDTUNESIZE-OAT_STARTTUNESIZE\n&quot;);
  3336        |     |     +--- fprintf(fp,&quot;        LoopCount = LoopCount+OAT_SAMPDIST\n&quot;);
  3337        |     |     +--- fprintf(fp,&quot;        LoopCount = LoopCount/OAT_SAMPDIST\n&quot;);
              |     |   +-+---+ 
  3338        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  3338        |     |   |  else{  | 
              |     |   +-+-------+ 
  3339        |     |     +--- fprintf(fp,&quot;        LoopCount = 1\n&quot;);
              |     |   +-+---+ 
  3340        |     |   |  }  | 
              |     |   +-----+ 
  3341        |     +--- fprintf(fp,&quot;\n&quot;);
  3342        |     |    
  3343        |     +--- fprintf(fp,&quot;        open(12, status = 'old',%s\n&quot;,F90Char);
  3344        |     +--- fprintf(fp,&quot;     &amp;     file = 'OATATLog.dat',%s\n&quot;,F90Char);
  3345        |     +--- fprintf(fp,&quot;     &amp;     action = 'read', pad= 'yes')\n&quot;);
  3346        |     +--- fprintf(fp,&quot;\n&quot;);
  3347        |     +--- fprintf(fp,&quot;        do iloop_v = 1, %d\n&quot;,MainF-&gt;TuneRegionList-&gt;Count);
  3348        |     +--- fprintf(fp,&quot;          read(12, *) cbuf\n&quot;);
  3349        |     +--- fprintf(fp,&quot;          call OATCharToNum(cbuf,inum)\n&quot;);
  3350        |     +--- fprintf(fp,&quot;          ExecState(iloop_v) = inum\n&quot;);
  3351        |     +--- fprintf(fp,&quot;        enddo\n&quot;);
  3352        |     +--- fprintf(fp,&quot;        close(12, status = 'keep')\n&quot;);
  3353        |     +--- fprintf(fp,&quot;\n&quot;);
  3354        |     |    
  3355        |     +--- // 結果Logの書き出し用ファイルをOpen
  3356        |     +--- fprintf(fp,&quot;        open(13, status = 'replace',%s\n&quot;,F90Char);
  3357        |     +--- fprintf(fp,&quot;     &amp;     file = 'OATATLog_%s.dat',%s\n&quot;,Name.c_str(),F90Char);
  3358        |     +--- fprintf(fp,&quot;     &amp;     action = 'write', pad= 'yes')\n&quot;);
  3359        |     +--- fprintf(fp,&quot;        write (13, *) OAT_NUMPROCS , \&quot;NUMPROCS\&quot;\n&quot;);
              |     |  +------------------------------+ 
  3360        |     +--+ if(TuneGroup != tgDynamic){  | 
              |     |  +--+---------------------------+ 
  3361        |     |     +--- fprintf(fp,&quot;        write (13, *) OAT_STARTTUNESIZE, \&quot;OAT_STARTTUNESIZE\&quot;\n&quot;);
  3362        |     |     +--- fprintf(fp,&quot;        write (13, *) OAT_ENDTUNESIZE, \&quot;OAT_ENDTUNESIZE\&quot;\n&quot;);
  3363        |     |     +--- fprintf(fp,&quot;        write (13, *) OAT_SAMPDIST, \&quot;OAT_SAMPDIST\&quot;\n&quot;);
              |     |   +-+---+ 
  3364        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  3364        |     |   |  else{  | 
              |     |   +-+-------+ 
  3365        |     |     +--- fprintf(fp,&quot;        write (13, *) N, \&quot;OAT_STARTTUNESIZE\&quot;\n&quot;);
  3366        |     |     +--- fprintf(fp,&quot;        write (13, *) N, \&quot;OAT_ENDTUNESIZE\&quot;\n&quot;);
  3367        |     |     +--- fprintf(fp,&quot;        write (13, *) 100, \&quot;OAT_SAMPDIST\&quot;\n&quot;);
              |     |   +-+---+ 
  3368        |     |   |  }  | 
              |     |   +-----+ 
  3369        |     +--- fprintf(fp,&quot;        write (13, *) -1, \&quot;EndOfHeader\&quot;\n&quot;);
  3370        |     +--- fprintf(fp,&quot;\n&quot;);
              |   +-+---+ 
  3371        |   |  }  | 
              |   +-----+ 
  3372        |    
  3373        |     
  3374        +--- fprintf(fp,&quot;      endif\n&quot;);
              |  +------------------------------------------------+ 
  3375        +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |  +--+---------------------------------------------+ 
  3376        |     +--- fprintf(fp,&quot;\n&quot;);
  3377        |     +--- fprintf(fp,&quot;    if (oat_myid .eq. 0) then\n&quot;);
  3378        |     +--- fprintf(fp,&quot;        open(12, status = 'replace', &amp;\n&quot;);
  3379        |     +--- //      fprintf(fp,&quot;     &amp;     file = 'OAT_InstallppohBEMresidual_directTuneLog.dat', &amp;\n&quot;);
  3380        |     +--- fprintf(fp,&quot;     &amp;     file = 'OAT_%s%sTuneLog.dat', &amp;\n&quot;,TuneGroupName.c_str(),Name.c_str());
  3381        |     +--- fprintf(fp,&quot;     &amp;     action = 'write', pad= 'yes')\n&quot;);
  3382        |     +--- fprintf(fp,&quot;\n&quot;);
  3383        |     +--- fprintf(fp,&quot;    endif\n&quot;);
  3384        |     +--- fprintf(fp,&quot;!     ----------------------------------------\n&quot;);
  3385        |     +--- fprintf(fp,&quot;\n&quot;);
  3386        |     +--- #if 1
  3387        |     +--- fprintf(fp,&quot;    if (OAT_DEBUG .ge. 1)then\n&quot;);
  3388        |     +--- fprintf(fp,&quot;      if (oat_myid .eq. 0) then\n&quot;);
  3389        |     +--- fprintf(fp,&quot;         print *, \&quot;AT region: %s\&quot;\n&quot;,Name.c_str());
  3390        |     +--- fprintf(fp,&quot;      endif\n&quot;);
  3391        |     +--- fprintf(fp,&quot;    endif\n&quot;);
  3392        |     +--- #else
  3393        |     +--- fprintf(fp,&quot;      if (oat_myid .eq. 0) then\n&quot;);
  3394        |     +--- fprintf(fp,&quot;         print *, \&quot;AT region: %s\&quot;\n&quot;,Name.c_str());
  3395        |     +--- fprintf(fp,&quot;      endif\n&quot;);
  3396        |     +--- #endif
              |     |  +------------------------------------------------+ 
  3397        |     +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |     |  +--+---------------------------------------------+ 
  3398        |     |     +--- fprintf(fp,&quot;    if (oat_myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  3399        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  3399        |     |   |  else{  | 
              |     |   +-+-------+ 
  3400        |     |     +--- fprintf(fp,&quot;    if (myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  3401        |     |   |  }  | 
              |     |   +-----+ 
  3402        |     +--- //      fprintf(fp,&quot;            write (12,\&quot;(A)\&quot;) \&quot;AT region: ppohBEMresidual_direct\&quot;\n&quot;);
  3403        |     +--- fprintf(fp,&quot;            write (12,\&quot;(A)\&quot;) \&quot;AT region: %s\&quot;\n&quot;,Name.c_str());
  3404        |     +--- fprintf(fp,&quot;    endif\n&quot;);
  3405        |     +--- fprintf(fp,&quot;\n&quot;);
  3406        |     +--- fprintf(fp,&quot;\n&quot;);
              |   +-+---+ 
  3407        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3407        |   |  else{  | 
              |   +-+-------+ 
  3408        |     +--- fprintf(fp,&quot;%c     ----------------------------------------\n&quot;,Comment);
              |   +-+---+ 
  3409        |   |  }  | 
              |   +-----+ 
  3410        +--- fprintf(fp,&quot;%c     ---- Start tune\n&quot;,Comment);
  3411        +--- fprintf(fp,&quot;%c     -----------------------------------------\n&quot;,Comment);
              |  +------------------------+ 
  3412        +--+ if(FittingType != 0){  | 
              |  +--+---------------------+ 
              |     |  +--------------------------------------------+ 
  3413        |     +--+ for(i = 0 ; i &lt; SampledList-&gt;Count ; i++){ | 
              |     |  +--+-----------------------------------------+ 
  3414        |     |     +--- fprintf(fp,&quot;      F1(%d)=%d\n&quot;,i+1,(int)(long)SampledList-&gt;Items[i]);
              |     |   +-+---+ 
  3415        |     |   |  }  | 
              |     |   +-----+ 
  3416        |     |    
  3417        |     +--- fprintf(fp,&quot;\n&quot;);
  3418        |     +--- fprintf(fp,&quot;%c     !!!!!! fitting用変数\n&quot;,Comment);
  3419        |     +--- fprintf(fp,&quot;%c     !!! variedから推定する最大パラメタ組合せ数\n&quot;,Comment);
  3420        |     +--- fprintf(fp,&quot;      nparm = %d\n&quot;,CaseCount);
  3421        |     +--- fprintf(fp,&quot;\n&quot;);
  3422        |     +--- fprintf(fp,&quot;%c     !!! パラメタの変化数 / sampled 指定子から算出\n&quot;,Comment);
  3423        |     +--- fprintf(fp,&quot;      n_lsm = %d\n&quot;,SampledList-&gt;Count);
  3424        |     +--- fprintf(fp,&quot;\n&quot;);
  3425        |     +--- fprintf(fp,&quot;%c     !!! 行列サイズに関するサンプル点の個数\n&quot;,Comment);
  3426        |     +--- fprintf(fp,&quot;      nsamp = 0\n&quot;);
  3427        |     +--- fprintf(fp,&quot;      do iloop_n=OAT_STARTTUNESIZE,%s\n&quot;,F90Char);
  3428        |     +--- fprintf(fp,&quot;     &amp;           OAT_ENDTUNESIZE,%s\n&quot;,F90Char);
  3429        |     +--- fprintf(fp,&quot;     &amp;           OAT_SAMPDIST\n&quot;);
  3430        |     +--- fprintf(fp,&quot;         nsamp = nsamp + 1\n&quot;);
  3431        |     +--- fprintf(fp,&quot;      enddo\n&quot;);
  3432        |     +--- fprintf(fp,&quot;\n&quot;);
  3433        |     +--- fprintf(fp,&quot;\n&quot;);
  3434        |     +--- fprintf(fp,&quot;\n&quot;);
  3435        |     +--- fprintf(fp,&quot;%c     !!! fitting least squares で指定した次元数\n&quot;,Comment);
  3436        |     +--- fprintf(fp,&quot;      m_lsm = %d\n&quot;,FittingDegree);
  3437        |     +--- fprintf(fp,&quot;\n&quot;);
  3438        |     +--- fprintf(fp,&quot;%c     !!! サンプリング点インデックス初期化\n&quot;,Comment);
  3439        |     +--- fprintf(fp,&quot;      isamp_indx = 0\n&quot;);
  3440        |     +--- fprintf(fp,&quot;\n&quot;);
  3441        |     +--- fprintf(fp,&quot;%c      print *, \&quot;nparm = \&quot;, nparm\n&quot;,Comment);
  3442        |     +--- fprintf(fp,&quot;%c      print *, \&quot;nsamp = \&quot;, nsamp\n&quot;,Comment);
  3443        |     +--- fprintf(fp,&quot;%c      print *, \&quot;m_lsm = \&quot;, m_lsm\n&quot;,Comment);
  3444        |     +--- fprintf(fp,&quot;\n&quot;);
              |   +-+---+ 
  3445        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3445        |   |  else{  | 
              |   +-+-------+ 
              |     |  +------------------------------------+ 
  3446        |     +--+ for(i = 1 ; i &lt;= CaseCount ; i++){ | 
              |     |  +--+---------------------------------+ 
  3447        |     |     +--- fprintf(fp,&quot;      F1(%d)=%d\n&quot;,i,i);
              |     |   +-+---+ 
  3448        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
  3449        |   |  }  | 
              |   +-----+ 
              |  +--------------------------------+ 
  3450        +--+ if(VisualF){ // Visualize = ON | 
              |  +--+-----------------------------+ 
  3451        |     +--- fprintf(fp,&quot;      t_all_sum = 0\n&quot;); // １秒以上のチェック
              |   +-+---+ 
  3452        |   |  }  | 
              |   +-----+ 
              |  +------------------------------------------------+ 
  3453        +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |  +--+---------------------------------------------+ 
              |     |  +------------------------------+ 
  3454        |     +--+ if(TuneGroup != tgDynamic){  | 
              |     |  +--+---------------------------+ 
  3455        |     |     +--- fprintf(fp,&quot;      do iloop_n=OAT_STARTTUNESIZE,%s\n&quot;,F90Char);
  3456        |     |     +--- fprintf(fp,&quot;     &amp;           OAT_ENDTUNESIZE,%s\n&quot;,F90Char);
  3457        |     |     +--- fprintf(fp,&quot;     &amp;           OAT_SAMPDIST\n&quot;);
              |     |   +-+---+ 
  3458        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  3458        |     |   |  else{  | 
              |     |   +-+-------+ 
  3459        |     |     +--- /************************************************************************/
  3460        |     |     |    //                                                                         
  3461        |     |     |    //Kogakuin Irie                                                            
  3462        |     |     |    //BaseValList-&gt;String[0]の変数が宣言されていないため変更                   
  3463        |     |     |    //既存コードをコメントアウトにして対処                                     
  3464        |     |     |    //                                                                         
  3465        |     |     |    //if(BaseValList-&gt;Count &gt; 0){                                              
  3466        |     |     |    //  fprintf(fp,&quot;      iloop_n=%s\n&quot;,BaseValList-&gt;Strings[0].c_str());      
  3467        |     |     |    //}else{                                                                   
  3468        |     |     |    //  fprintf(fp,&quot;      iloop_n=1\n&quot;);                                       
  3469        |     |     |    //}                                                                        
  3470        |     |     +--- fprintf(fp,&quot;      iloop_n=1\n&quot;);
  3471        |     |     +--- //
  3472        |     |     |    //ここまで                                                                 
  3473        |     |     |    //                                                                         
  3474        |     |     |    /************************************************************************/ 
              |     |   +-+---+ 
  3475        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
  3476        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3476        |   |  else{  | 
              |   +-+-------+ 
              |     |  +------------------------------+ 
  3477        |     +--+ if(TuneGroup != tgDynamic){  | 
              |     |  +--+---------------------------+ 
  3478        |     |     +--- fprintf(fp,&quot;      do iloop_n=OAT_STARTTUNESIZE,%s\n&quot;,F90Char);
  3479        |     |     +--- fprintf(fp,&quot;     &amp;           OAT_ENDTUNESIZE,%s\n&quot;,F90Char);
  3480        |     |     +--- fprintf(fp,&quot;     &amp;           OAT_SAMPDIST\n&quot;);
              |     |   +-+---+ 
  3481        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  3481        |     |   |  else{  | 
              |     |   +-+-------+ 
  3482        |     |     +--- /************************************************************************/
  3483        |     |     |    //                                                                         
  3484        |     |     |    //Kogakuin Irie                                                            
  3485        |     |     |    //BaseValList-&gt;String[0]の変数が宣言されていないため変更                   
  3486        |     |     |    //既存コードをコメントアウトにして対処                                     
  3487        |     |     |    //                                                                         
  3488        |     |     |    //if(BaseValList-&gt;Count &gt; 0){                                              
  3489        |     |     |    //  fprintf(fp,&quot;      iloop_n=%s\n&quot;,BaseValList-&gt;Strings[0].c_str());      
  3490        |     |     |    //}else{                                                                   
  3491        |     |     |    //  fprintf(fp,&quot;      iloop_n=1\n&quot;);                                       
  3492        |     |     |    //}                                                                        
  3493        |     |     +--- fprintf(fp,&quot;      iloop_n=1\n&quot;);
  3494        |     |     +--- //
  3495        |     |     |    //ここまで                                                                 
  3496        |     |     |    //                                                                         
  3497        |     |     |    /************************************************************************/ 
              |     |   +-+---+ 
  3498        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
  3499        |   |  }  | 
              |   +-----+ 
  3500        +--- fprintf(fp,&quot;\n&quot;);
              |  +--------------------------------------------------------------------------------------+ 
  3501        +--+ if(!MainF-&gt;EECntlF){        // -eectrlのフラグ(ON時は、コントロール部分を置き換え）  | 
              |  +--+-----------------------------------------------------------------------------------+ 
  3502        |     +--- fprintf(fp,&quot;        do iloop_%s=1, %d\n&quot;,LowerCase(TuneGroupName).c_str(),CaseArrayCount);
  3503        |     +--- fprintf(fp,&quot;\n&quot;);
  3504        |     +--- fprintf(fp,&quot;          iusw1 = F1(iloop_%s)\n&quot;,LowerCase(TuneGroupName).c_str());
  3505        |     +--- fprintf(fp,&quot;\n&quot;);
              |   +-+---+ 
  3506        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3506        |   |  else{  | 
              |   +-+-------+ 
  3507        |     +--- fprintf(fp,&quot;        call OAT_Eecntl_Init(F1,%d)\n&quot;,CaseArrayCount);
  3508        |     +--- fprintf(fp,&quot;        iBestSw1 = 0\n&quot;);
  3509        |     +--- fprintf(fp,&quot;        do while ( .true.)\n&quot;);
  3510        |     +--- fprintf(fp,&quot;          iusw1 = OAT_Eecntl_NextIndex()\n&quot;);
  3511        |     +--- fprintf(fp,&quot;          if (iusw1 &lt; 1 ) exit\n&quot;);
  3512        |     +--- fprintf(fp,&quot;\n&quot;);
              |   +-+---+ 
  3513        |   |  }  | 
              |   +-----+ 
  3514        +--- //
  3515        |    // NがParameterの場合に実行時エラーになるので、 iloop_nを引数に入れる形に修正した。  
  3516        |    // 2013/03/15                                                                        
  3517        |    // 従来との互換性のため .f の場合のみ有効に戻した。2013/08/11                        
  3518        |    // .fに対しても引数で持って来る形になったので、どちらもなしとした。 2015/03/01       
  3519        |    //                                                                                   
  3520        +--- #if 0
              |  +------------------------------------------------+ 
  3521        +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |  +--+---------------------------------------------+ 
  3522        |     |    
              |   +-+---+ 
  3523        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3523        |   |  else{  | 
              |   +-+-------+ 
              |     |  +------------------------------+ 
  3524        |     +--+ if(TuneGroup != tgDynamic){  | 
              |     |  +--+---------------------------+ 
              |     |     |  +--------------------------------------------+ 
  3525        |     |     +--+ for(i = 0 ; i &lt; BaseValList-&gt;Count ; i++){ | 
              |     |     |  +--+-----------------------------------------+ 
  3526        |     |     |     +--- ValName = BaseValList-&gt;Strings[i];
  3527        |     |     |     +--- fprintf(fp,&quot;          %s = iloop_n\n&quot;,ValName.c_str());
              |     |     |   +-+---+ 
  3528        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |   +-+---+ 
  3529        |     |   |  }  | 
              |     |   +-----+ 
  3530        |     +--- fprintf(fp,&quot;\n&quot;);
              |   +-+---+ 
  3531        |   |  }  | 
              |   +-----+ 
  3532        +--- #endif
  3533        +--- /*********************************************************************************************************************/
  3534        |    //                                                                                                                       
  3535        |    //Kogakuin Irie                                                                                                          
  3536        |    //Fortran版d-Spline用追加部分                                                                                            
  3537        |    //インストール時自動チューニング用追加部分                                                                               
  3538        |    //                                                                                                                       
  3539        |                                                                                                                             
              |  +------------------------------+ 
  3540        +--+ if(TuneGroup == tgInstall){  | 
              |  +--+---------------------------+ 
              |     |  +--------------------------+ 
  3541        |     +--+ if(FittingDspline == 1){ | 
              |     |  +--+-----------------------+ 
  3542        |     |     +--- fprintf(fp,&quot;          iBestSw1 = dspgiv%s%s(%d&quot;, TuneGroupName.c_str(), Name.c_str(), CaseArrayCount);
  3543        |     |     |    
              |     |     |  +----------------------------------------+ 
  3544        |     |     +--+ if(MainF-&gt;Call_ATExec_Script == NULL){ | 
              |     |     |  +--+-------------------------------------+ 
  3545        |     |     |     +--- TScript *Script = new TScript(MainF-&gt;TokenList,0,NULL,ValDataList);
  3546        |     |     |     +--- string ArgStr = Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);
  3547        |     |     |     +--- fprintf(fp,&quot;%s);\n&quot;,ArgStr.c_str());
  3548        |     |     |     +--- delete Script;
              |     |     |   +-+---+ 
  3549        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  3550        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  3551        |     |     |     +--- string ArgStr = MainF-&gt;Call_ATExec_Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);
  3552        |     |     |     +--- fprintf(fp,&quot;%s);\n&quot;,ArgStr.c_str());
              |     |     |   +-+---+ 
  3553        |     |     |   |  }  | 
              |     |     |   +-----+ 
  3554        |     |     |    
  3555        |     |     +--- fprintf(fp,&quot;          exit\n&quot;);
              |     |   +-+---+ 
  3556        |     |   |  }  | 
              |     |   +-----+ 
  3557        |     +--- //以下は2次元の場合
              |     |  +--------------------------+ 
  3558        |     +--+ if(FittingDspline == 2){ | 
              |     |  +--+-----------------------+ 
  3559        |     |     |    
  3560        |     |     +--- int CaseArrayCount2[2];
  3561        |     |     +--- CaseArrayCount2[0] = (int)( (variedToValue[0] - variedFromValue[0]) / variedStepValue[0] + 1 );
  3562        |     |     +--- CaseArrayCount2[1] = (int)( (variedToValue[1] - variedFromValue[1]) / variedStepValue[1] + 1 );
  3563        |     |     |    
  3564        |     |     +--- fprintf(fp,&quot;          iBestSw1 = dsp2giv%s%s(%d,%d,%d&quot;,TuneGroupName.c_str(),
  3565        |     |     |            Name.c_str(),CaseArrayCount,CaseArrayCount2[0],CaseArrayCount2[1]);    
  3566        |     |     |    
              |     |     |  +----------------------------------------+ 
  3567        |     |     +--+ if(MainF-&gt;Call_ATExec_Script == NULL){ | 
              |     |     |  +--+-------------------------------------+ 
  3568        |     |     |     +--- TScript *Script = new TScript(MainF-&gt;TokenList,0,NULL,ValDataList);
  3569        |     |     |     +--- string ArgStr = Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);
  3570        |     |     |     +--- fprintf(fp,&quot;%s);\n&quot;,ArgStr.c_str());
  3571        |     |     |     +--- delete Script;
              |     |     |   +-+---+ 
  3572        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  3572        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  3573        |     |     |     +--- string ArgStr = MainF-&gt;Call_ATExec_Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);
  3574        |     |     |     +--- fprintf(fp,&quot;%s);\n&quot;,ArgStr.c_str());
              |     |     |   +-+---+ 
  3575        |     |     |   |  }  | 
              |     |     |   +-----+ 
  3576        |     |     |    
  3577        |     |     +--- fprintf(fp,&quot;          exit\n&quot;);
              |     |   +-+---+ 
  3578        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
  3579        |   |  }  | 
              |   +-----+ 
  3580        +--- //
  3581        |    //ここまで                                                                                                               
  3582        |    //                                                                                                                       
  3583        |    /*********************************************************************************************************************/  
  3584        |                                                                                                                             
  3585        +--- s = GetPrePostSubregionStr(0);
              |  +--------------+ 
  3586        +--+ if(s != &quot;&quot;){ | 
              |  +--+-----------+ 
  3587        |     +--- fprintf(fp,&quot;%s&quot;,s.c_str());
  3588        |     +--- fprintf(fp,&quot;\n&quot;);
              |   +-+---+ 
  3589        |   |  }  | 
              |   +-----+ 
              |  +------------------+ 
  3590        +--+ if(MainF-&gt;MPIF){ | 
              |  +--+---------------+ 
  3591        |     +--- fprintf(fp,&quot;          call MPI_BARRIER(MPI_COMM_WORLD, ierr)\n&quot;);
              |   +-+---+ 
  3592        |   |  }  | 
              |   +-----+ 
              |  +----------------------------------+ 
  3593        +--+ if(MainF-&gt;my_timer_start != &quot;&quot;){ | 
              |  +--+-------------------------------+ 
  3594        |     +--- fprintf(fp,&quot;          call %s()\n&quot;,MainF-&gt;my_timer_start.c_str());
              |   +-+---+ 
  3595        |   |  }  | 
              |   +-----+ 
  3596        +--- fprintf(fp,&quot;          t1 = %s()\n&quot;,MainF-&gt;TimeFunc.c_str());
  3597        +--- fprintf(fp,&quot;\n&quot;);
  3598        |    
  3599        +--- /***********************************************************/
  3600        |    //                                                             
  3601        |    //Kogakuin Irie                                                
  3602        |    //宣言されていない変数（OAT_MAXSAMPITER）が登場                
  3603        |    //出力プログラム内ではコメントアウトされるよう処理             
  3604        |    //                                                             
  3605        +--- //  fprintf(fp,&quot;          do iloop_iter=1, OAT_MAXSAMPITER\n&quot;);
  3606        +--- fprintf(fp,&quot;!          do iloop_iter=1, OAT_MAXSAMPITER\n&quot;);
  3607        +--- //
  3608        |    //ここまで                                                     
  3609        |    //                                                             
  3610        |    /***********************************************************/  
  3611        +--- fprintf(fp,&quot;\n&quot;);
  3612        |    
              |  +----------------------------------------------------------------------------------+ 
  3613        +--+ if(MainF-&gt;EECntlF){     // -eectrlのフラグ(ON時は、コントロール部分を置き換え）  | 
              |  +--+-------------------------------------------------------------------------------+ 
  3614        |     +--- fprintf(fp,&quot;          iloop_inner = 0\n&quot;);
  3615        |     +--- fprintf(fp,&quot;          do while (OAT_Eecntl_Continue())\n&quot;);
  3616        |     +--- s = &quot;              call &quot;+FuncName + &quot;(&quot;;
              |   +-+---+ 
  3617        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3617        |   |  else{  | 
              |   +-+-------+ 
  3618        |     +--- s = &quot;            call &quot;+FuncName + &quot;(&quot;;
              |   +-+---+ 
  3619        |   |  }  | 
              |   +-----+ 
              |  +--------------------------------------------+ 
  3620        +--+ for(i = 0 ; i &lt; ArgValList-&gt;Count ; i++){  | 
              |  +--+-----------------------------------------+ 
              |     |  +------------------------------------+ 
  3621        |     +--+ if(ArgValList-&gt;Strings[i] == &quot;&quot;){  | 
              |     |  +--+---------------------------------+ 
              |     |     |  +------------+ 
  3622        |     |     +--+ continue;  | 
              |     |     |  +------------+ 
              |     |   +-+---+ 
  3623        |     |   |  }  | 
              |     |   +-----+ 
  3624        |     +--- ValData = (TValData *)ArgValList-&gt;Objects[i];
  3625        |     |    
              |     |  +------------------------------------------------+ 
  3626        |     +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |     |  +--+---------------------------------------------+ 
              |     |     |  +------------------------------------------------------------------------+ 
  3627        |     |     +--+ if((BaseValList-&gt;Count &gt; 0)&amp;&amp;                                          | 
  3628        |     |     |  |     (LowerCase(ValData-&gt;Str) == LowerCase(BaseValList-&gt;Strings[0]))){  | 
              |     |     |  +--+---------------------------------------------------------------------+ 
  3629        |     |     |     +--- s += &quot;iloop_n, &quot;;
              |     |     |   +-+---+ 
  3630        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  3630        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  3631        |     |     |     +--- s += ValData-&gt;Str + &quot;, &quot;;
              |     |     |   +-+---+ 
  3632        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |   +-+---+ 
  3633        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  3633        |     |   |  else{  | 
              |     |   +-+-------+ 
  3634        |     |     +--- //          s += ValData-&gt;Str + &quot;, &quot;;   // 2015/03/01 F90と同じコードになるように修正。
              |     |     |  +------------------------------------------------------------------------+ 
  3635        |     |     +--+ if((BaseValList-&gt;Count &gt; 0)&amp;&amp;                                          | 
  3636        |     |     |  |     (LowerCase(ValData-&gt;Str) == LowerCase(BaseValList-&gt;Strings[0]))){  | 
              |     |     |  +--+---------------------------------------------------------------------+ 
  3637        |     |     |     +--- s += &quot;iloop_n, &quot;;
              |     |     |   +-+---+ 
  3638        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  3638        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  3639        |     |     |     +--- s += ValData-&gt;Str + &quot;, &quot;;
              |     |     |   +-+---+ 
  3640        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |   +-+---+ 
  3641        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
  3642        |   |  }  | 
              |   +-----+ 
  3643        +--- s += &quot;iusw1)&quot;;
  3644        +--- s = SepLongStr(s);
  3645        +--- fprintf(fp,&quot;%s\n&quot;,s.c_str());
              |  +----------------------------------------------------------------------------------+ 
  3646        +--+ if(MainF-&gt;EECntlF){     // -eectrlのフラグ(ON時は、コントロール部分を置き換え）  | 
              |  +--+-------------------------------------------------------------------------------+ 
  3647        |     +--- fprintf(fp,&quot;            iloop_inner = iloop_inner + 1\n&quot;);
  3648        |     +--- fprintf(fp,&quot;          end do\n&quot;);
              |   +-+---+ 
  3649        |   |  }  | 
              |   +-----+ 
  3650        |    
  3651        +--- fprintf(fp,&quot;\n&quot;);
  3652        |    
  3653        +--- /********************************************************/
  3654        |    //                                                         
  3655        |    //Kogakuin Irie                                            
  3656        |    //上の追加処理と関係                                       
  3657        |    //do文をコメントアウトしているため，end doもコメントアウト 
  3658        |    //                                                         
  3659        +--- //  fprintf(fp,&quot;          end do\n&quot;);
  3660        +--- fprintf(fp,&quot;!          end do\n&quot;);
  3661        +--- //
  3662        |    //ここまで                                                 
  3663        |    //                                                         
  3664        |    /********************************************************/ 
  3665        |                                                               
  3666        +--- fprintf(fp,&quot;\n&quot;);
              |  +------------------+ 
  3667        +--+ if(MainF-&gt;MPIF){ | 
              |  +--+---------------+ 
  3668        |     +--- fprintf(fp,&quot;          call MPI_BARRIER(MPI_COMM_WORLD, ierr)\n&quot;);
              |   +-+---+ 
  3669        |   |  }  | 
              |   +-----+ 
              |  +----------------------------------+ 
  3670        +--+ if(MainF-&gt;my_timer_stop != &quot;&quot;){  | 
              |  +--+-------------------------------+ 
  3671        |     +--- fprintf(fp,&quot;          call %s()\n&quot;,MainF-&gt;my_timer_stop.c_str());
              |   +-+---+ 
  3672        |   |  }  | 
              |   +-----+ 
  3673        +--- //  fprintf(fp,&quot;          t2 = MPI_WTIME()\n&quot;);
  3674        +--- fprintf(fp,&quot;          t2 = %s()\n&quot;,MainF-&gt;TimeFunc.c_str());
  3675        |    
  3676        +--- fprintf(fp,&quot;          t_all = t2 - t1\n&quot;);
              |  +------------------+ 
  3677        +--+ if(MainF-&gt;MPIF){ | 
              |  +--+---------------+ 
  3678        |     +--- fprintf(fp,&quot;          call MPI_ALLREDUCE(t_all, bt, 1, MPI_DOUBLE_PRECISION,%s\n&quot;,F90Char);
  3679        |     +--- fprintf(fp,&quot;     &amp;           MPI_MAX, MPI_COMM_WORLD, ierr)\n&quot;);
              |   +-+---+ 
  3680        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3680        |   |  else{  | 
              |   +-+-------+ 
  3681        |     +--- fprintf(fp,&quot;          bt = t_all\n&quot;);
              |   +-+---+ 
  3682        |   |  }  | 
              |   +-----+ 
              |  +--------------------------------------------------------------------------------------+ 
  3683        +--+ if(!MainF-&gt;EECntlF){        // -eectrlのフラグ(ON時は、コントロール部分を置き換え）  | 
              |  +--+-----------------------------------------------------------------------------------+ 
  3684        |     +--- fprintf(fp,&quot;          t_all = bt\n&quot;);
              |   +-+---+ 
  3685        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3685        |   |  else{  | 
              |   +-+-------+ 
  3686        |     +--- fprintf(fp,&quot;          t_all = bt / iloop_inner\n&quot;);
  3687        |     +--- fprintf(fp,&quot;          call OAT_Eecntl_Repperf(iusw1, t_all)\n&quot;);
              |   +-+---+ 
  3688        |   |  }  | 
              |   +-----+ 
  3689        +--- fprintf(fp,&quot;\n&quot;);
  3690        |    
  3691        +--- s = GetPrePostSubregionStr(1);
              |  +--------------+ 
  3692        +--+ if(s != &quot;&quot;){ | 
              |  +--+-----------+ 
  3693        |     +--- fprintf(fp,&quot;%s&quot;,s.c_str());
  3694        |     +--- fprintf(fp,&quot;\n&quot;);
              |   +-+---+ 
  3695        |   |  }  | 
              |   +-----+ 
  3696        |    
              |  +--------------------------------+ 
  3697        +--+ if(VisualF){ // Visualize = ON | 
              |  +--+-----------------------------+ 
  3698        |     +--- // 0から100(%)までの進行状態の値をセットする。
              |     |  +------------------------------------------------+ 
  3699        |     +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |     |  +--+---------------------------------------------+ 
  3700        |     |     +--- fprintf(fp,&quot;          if (oat_myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  3701        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  3701        |     |   |  else{  | 
              |     |   +-+-------+ 
  3702        |     |     +--- fprintf(fp,&quot;          if (myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  3703        |     |   |  }  | 
              |     |   +-----+ 
  3704        |     +--- fprintf(fp,&quot;            t_all_sum = t_all_sum + t_all\n&quot;); // １秒以上のチェック
  3705        |     +--- fprintf(fp,&quot;            if(t_all_sum .ge. 1.0) then\n&quot;); // １秒以上のチェック
  3706        |     +--- fprintf(fp,&quot;              t_all_sum = 0\n&quot;); // １秒以上のチェック
  3707        |     +--- fprintf(fp,&quot;              inum = (iloop_n-OAT_STARTTUNESIZE)/OAT_SAMPDIST\n&quot;);
  3708        |     |    
  3709        |     +--- fprintf(fp,&quot;              ExecState(%d) = (100*inum+%s\n&quot;,MainF-&gt;TuneRegionList-&gt;IndexOf(this)+1,F90Char);
  3710        |     +--- fprintf(fp,&quot;     &amp;                    100*(iloop_%s-1)/%d)/LoopCount\n&quot;,
  3711        |     |            LowerCase(TuneGroupName).c_str(),                                
  3712        |     |            CaseCount);                                                      
  3713        |     |    
  3714        |     +--- // 格納用の ExecState() の現在の値を書き込む。
  3715        |     +--- fprintf(fp,&quot;              open(12, status = 'replace',%s\n&quot;,F90Char);
  3716        |     +--- fprintf(fp,&quot;     &amp;           file = 'OATATLog.dat',%s\n&quot;,F90Char);
  3717        |     +--- fprintf(fp,&quot;     &amp;           action = 'write', pad= 'yes')\n&quot;);
  3718        |     +--- fprintf(fp,&quot;\n&quot;);
  3719        |     +--- fprintf(fp,&quot;              do iloop_v = 1, %d\n&quot;,MainF-&gt;TuneRegionList-&gt;Count);
  3720        |     +--- fprintf(fp,&quot;                write (12, *) ExecState(iloop_v)\n&quot;);
  3721        |     +--- fprintf(fp,&quot;              enddo\n&quot;);
  3722        |     +--- fprintf(fp,&quot;              close(12, status = 'keep')\n&quot;);
  3723        |     |    
  3724        |     +--- fprintf(fp,&quot;            endif\n&quot;); // １秒以上のチェック
  3725        |     +--- fprintf(fp,&quot;          endif\n&quot;);
              |   +-+---+ 
  3726        |   |  }  | 
              |   +-----+ 
  3727        |    
  3728        +--- //
  3729        |    // According 指定がある場合は、計測時間を置き換える。              
  3730        |    //  条件指定の場合（estimatedなし）には、条件が一致すれば time = 0 
  3731        |    //  条件が一一致しない場合は、かかった時間（0より大きい値)         
  3732        |    //  Accordingと varidの２重の場合には、 範囲で選択となる。         
  3733        |    //  時間変数があると便利？ 例例えば、 OAT_TIME  ？？？             
  3734        |    //                                                                 
              |  +--------------------+ 
  3735        +--+ if(UseAccordingF){ | 
              |  +--+-----------------+ 
  3736        |     +--- string aStr;
  3737        |     +--- TSubRegion *SubRegion;
  3738        |     +--- int cp1,cp2;
  3739        |     +--- int CaseIdx = 1;
  3740        |     |    
              |     |  +--------------------------------+ 
  3741        |     +--+ if(SubRegionList-&gt;Count != 0){ | 
              |     |  +--+-----------------------------+ 
  3742        |     |     +--- fprintf(fp,&quot;          select case(iusw1)\n&quot;);
              |     |     |  +----------------------------------------------+ 
  3743        |     |     +--+ for(i = 0 ; i &lt; SubRegionList-&gt;Count ; i++){ | 
              |     |     |  +--+-------------------------------------------+ 
  3744        |     |     |     +--- SubRegion = (TSubRegion *)SubRegionList-&gt;Items[i];
  3745        |     |     |     +--- aStr = SubRegion-&gt;AccordingStr;
              |     |     |     |  +------------------+ 
  3746        |     |     |     +--+ if(aStr == &quot;&quot;){  | 
              |     |     |     |  +--+---------------+ 
              |     |     |     |     |  +------------+ 
  3747        |     |     |     |     +--+ continue;  | 
              |     |     |     |     |  +------------+ 
              |     |     |     |   +-+---+ 
  3748        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |     |  +--------------------------------+ 
  3749        |     |     |     +--+ if(SubRegion-&gt;CaseCount &lt;= 1){ | 
              |     |     |     |  +--+-----------------------------+ 
  3750        |     |     |     |     +--- fprintf(fp,&quot;            case(%d)\n&quot;,CaseIdx++);
              |     |     |     |   +-+---+ 
  3751        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+-------+ 
  3751        |     |     |     |   |  else{  | 
              |     |     |     |   +-+-------+ 
  3752        |     |     |     |     +--- fprintf(fp,&quot;            case(%d:%d)\n&quot;,CaseIdx,CaseIdx+SubRegion-&gt;CaseCount-1);
  3753        |     |     |     |     +--- CaseIdx += SubRegion-&gt;CaseCount;
              |     |     |     |   +-+---+ 
  3754        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
  3755        |     |     |     +--- cp1 = aStr.find(&quot;according&quot;) + strlen(&quot;according&quot;);
  3756        |     |     |     +--- cp2 = aStr.find(&quot;estimated&quot;);
              |     |     |     |  +----------------+ 
  3757        |     |     |     +--+ if(cp2 != 0){  | 
              |     |     |     |  +--+-------------+ 
  3758        |     |     |     |     +--- cp1 = cp2 + strlen(&quot;estimated&quot;);
  3759        |     |     |     |     +--- aStr = Trim(aStr.substr(cp1,aStr.length()));
  3760        |     |     |     |     +--- fprintf(fp,&quot;              t_all = dble(%s)\n&quot;,aStr.c_str());
              |     |     |     |   +-+---+ 
  3761        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+-----------------+ 
  3761        |     |     |     |   |  else{ // 条件式  | 
              |     |     |     |   +-+-----------------+ 
  3762        |     |     |     |     +--- aStr = Trim(aStr.substr(cp1,aStr.length()));
  3763        |     |     |     |     +--- fprintf(fp,&quot;              if (%s) then\n&quot;,aStr.c_str());
  3764        |     |     |     |     +--- fprintf(fp,&quot;                t_all = 0\n&quot;);
  3765        |     |     |     |     +--- fprintf(fp,&quot;              endif\n&quot;);
              |     |     |     |   +-+---+ 
  3766        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  3767        |     |     |   |  }  | 
              |     |     |   +-----+ 
  3768        |     |     +--- fprintf(fp,&quot;          end select\n&quot;);
              |     |   +-+---+ 
  3769        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  3769        |     |   |  else{  | 
              |     |   +-+-------+ 
  3770        |     |     +--- aStr = AccordingStr;
  3771        |     |     +--- cp1 = aStr.find(&quot;according&quot;) + strlen(&quot;according&quot;);
  3772        |     |     +--- cp2 = aStr.find(&quot;estimated&quot;);
              |     |     |  +----------------+ 
  3773        |     |     +--+ if(cp2 != 0){  | 
              |     |     |  +--+-------------+ 
  3774        |     |     |     +--- cp1 = cp2 + strlen(&quot;estimated&quot;);
  3775        |     |     |     +--- aStr = Trim(aStr.substr(cp1,aStr.length()));
  3776        |     |     |     +--- fprintf(fp,&quot;            t_all = dble(%s)\n&quot;,aStr.c_str());
              |     |     |   +-+---+ 
  3777        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-----------------+ 
  3777        |     |     |   |  else{ // 条件式  | 
              |     |     |   +-+-----------------+ 
  3778        |     |     |     +--- aStr = Trim(aStr.substr(cp1,aStr.length()));
  3779        |     |     |     +--- fprintf(fp,&quot;            if (%s) then\n&quot;,aStr.c_str());
  3780        |     |     |     +--- fprintf(fp,&quot;              t_all = 0\n&quot;);
  3781        |     |     |     +--- fprintf(fp,&quot;            endif\n&quot;);
              |     |     |   +-+---+ 
  3782        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |   +-+---+ 
  3783        |     |   |  }  | 
              |     |   +-----+ 
  3784        |     +--- fprintf(fp,&quot;\n&quot;);
              |   +-+---+ 
  3785        |   |  }  | 
              |   +-----+ 
  3786        |    
              |  +--------------------------------+ 
  3787        +--+ if(VisualF){ // Visualize = ON | 
              |  +--+-----------------------------+ 
  3788        |     +--- //
  3789        |     |    // ビジュアル化のための結果出力                
  3790        |     |    // Sampledでとびとびの場合は、空白行を入れる。 
  3791        |     |    //                                             
              |     |  +------------------------------------------------+ 
  3792        |     +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |     |  +--+---------------------------------------------+ 
  3793        |     |     +--- fprintf(fp,&quot;          if (oat_myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  3794        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  3794        |     |   |  else{  | 
              |     |   +-+-------+ 
  3795        |     |     +--- fprintf(fp,&quot;          if (myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  3796        |     |   |  }  | 
              |     |   +-----+ 
  3797        |     +--- fprintf(fp,&quot;            if (iloop .eq. 1) then\n&quot;);
  3798        |     +--- fprintf(fp,&quot;              do iloop_vi = 1, F1(iloop_%s)-1\n&quot;,LowerCase(TuneGroupName).c_str());
  3799        |     +--- fprintf(fp,&quot;                write (13, *)\n&quot;);
  3800        |     +--- fprintf(fp,&quot;              enddo\n&quot;);
  3801        |     +--- fprintf(fp,&quot;            endif\n&quot;);
  3802        |     +--- fprintf(fp,&quot;            write (13, *) t_all\n&quot;);
  3803        |     +--- fprintf(fp,&quot;            if (iloop .lt. %d) then\n&quot;,CaseArrayCount);
  3804        |     +--- fprintf(fp,&quot;              do iloop_vi = F1(iloop_%s)+1, F1(iloop_%s+1)-1\n&quot;,
  3805        |     |                                    LowerCase(TuneGroupName).c_str(),LowerCase(TuneGroupName).c_str());  
  3806        |     +--- fprintf(fp,&quot;                write (13, *)\n&quot;);
  3807        |     +--- fprintf(fp,&quot;              enddo\n&quot;);
  3808        |     +--- fprintf(fp,&quot;            else\n&quot;);
  3809        |     +--- fprintf(fp,&quot;              do iloop_vi = F1(iloop_%s)+1,%d\n&quot;,
  3810        |     |                                    LowerCase(TuneGroupName).c_str(),CaseCount); 
  3811        |     +--- fprintf(fp,&quot;                write (13, *)\n&quot;);
  3812        |     +--- fprintf(fp,&quot;              enddo\n&quot;);
  3813        |     +--- fprintf(fp,&quot;            endif\n&quot;);
  3814        |     +--- fprintf(fp,&quot;          endif\n&quot;);
              |   +-+---+ 
  3815        |   |  }  | 
              |   +-----+ 
              |  +--------------------+ 
  3816        +--+ if(MainF-&gt;DebugF){ | 
              |  +--+-----------------+ 
  3817        |     +--- //      fprintf(fp,&quot;          if (OAT_DEBUG .ge. 2)then\n&quot;);
  3818        |     +--- fprintf(fp,&quot;          if (OAT_DEBUG .ge. 1)then\n&quot;);
              |     |  +------------------------------------------------+ 
  3819        |     +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |     |  +--+---------------------------------------------+ 
  3820        |     |     +--- fprintf(fp,&quot;            if (oat_myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  3821        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  3821        |     |   |  else{  | 
              |     |   +-+-------+ 
  3822        |     |     +--- fprintf(fp,&quot;            if (myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  3823        |     |   |  }  | 
              |     |   +-----+ 
  3824        |     +--- fprintf(fp,&quot;              print *, \&quot;N=\&quot;,iloop_n, \&quot;iusw1=\&quot;, iusw1, t_all\n&quot;);
  3825        |     +--- fprintf(fp,&quot;            endif\n&quot;);
  3826        |     +--- fprintf(fp,&quot;          endif\n&quot;);
              |   +-+---+ 
  3827        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3827        |   |  else{  | 
              |   +-+-------+ 
  3828        |     +--- //      fprintf(fp,&quot;%c          if (OAT_DEBUG .ge. 2)then\n&quot;,Comment);
  3829        |     +--- fprintf(fp,&quot;%c          if (OAT_DEBUG .ge. 1)then\n&quot;,Comment);
              |     |  +------------------------------------------------+ 
  3830        |     +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |     |  +--+---------------------------------------------+ 
  3831        |     |     +--- fprintf(fp,&quot;%c            if (oat_myid .eq. 0) then\n&quot;,Comment);
              |     |   +-+---+ 
  3832        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  3832        |     |   |  else{  | 
              |     |   +-+-------+ 
  3833        |     |     +--- fprintf(fp,&quot;%c            if (myid .eq. 0) then\n&quot;,Comment);
              |     |   +-+---+ 
  3834        |     |   |  }  | 
              |     |   +-----+ 
  3835        |     +--- fprintf(fp,&quot;%c              print *, \&quot;N=\&quot;,iloop_n, \&quot;iusw1=\&quot;, iusw1, t_all\n&quot;,Comment);
  3836        |     +--- fprintf(fp,&quot;%c            endif\n&quot;,Comment);
  3837        |     +--- fprintf(fp,&quot;%c          endif\n&quot;,Comment);
              |   +-+---+ 
  3838        |   |  }  | 
              |   +-----+ 
  3839        +--- fprintf(fp,&quot;\n&quot;);
              |  +------------------------------------------------+ 
  3840        +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |  +--+---------------------------------------------+ 
  3841        |     +--- fprintf(fp,&quot;          if (oat_myid .eq. 0) then\n&quot;);
  3842        |     +--- fprintf(fp,&quot;            write(12, \&quot;(A,I6,A,I6,A,F9.4,A)\&quot;) \&quot;N=\&quot;,iloop_n, \&quot; / iusw1=\&quot;, iusw1, \&quot; : \&quot;,t_all, \&quot; [sec.]\&quot;\n&quot;);
  3843        |     +--- fprintf(fp,&quot;          endif\n&quot;);
  3844        |     +--- fprintf(fp,&quot;\n&quot;);
              |   +-+---+ 
  3845        |   |  }  | 
              |   +-----+ 
  3846        |    
  3847        |     
  3848        +--- fprintf(fp,&quot;\n&quot;);
              |  +--------------------------------------------------------------------------------------+ 
  3849        +--+ if(!MainF-&gt;EECntlF){        // -eectrlのフラグ(ON時は、コントロール部分を置き換え）  | 
              |  +--+-----------------------------------------------------------------------------------+ 
  3850        |     +--- fprintf(fp,&quot;          if (iloop_%s .eq. 1) then\n&quot;,LowerCase(TuneGroupName).c_str());
              |   +-+---+ 
  3851        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3851        |   |  else{  | 
              |   +-+-------+ 
  3852        |     +--- fprintf(fp,&quot;          if (iBestSw1 == 0) then\n&quot;);
              |   +-+---+ 
  3853        |   |  }  | 
              |   +-----+ 
  3854        +--- fprintf(fp,&quot;            dBestTime1 = t_all\n&quot;);
              |  +--------------------------------------------------------------------------------------+ 
  3855        +--+ if(!MainF-&gt;EECntlF){        // -eectrlのフラグ(ON時は、コントロール部分を置き換え）  | 
              |  +--+-----------------------------------------------------------------------------------+ 
  3856        |     +--- fprintf(fp,&quot;            iBestSw1 = F1(1)\n&quot;);
              |   +-+---+ 
  3857        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3857        |   |  else{  | 
              |   +-+-------+ 
  3858        |     +--- fprintf(fp,&quot;            iBestSw1 = iusw1\n&quot;);
              |   +-+---+ 
  3859        |   |  }  | 
              |   +-----+ 
  3860        +--- fprintf(fp,&quot;          else\n&quot;);
  3861        +--- fprintf(fp,&quot;            if (t_all .lt. dBestTime1) then\n&quot;);
  3862        +--- fprintf(fp,&quot;              dBestTime1 = t_all\n&quot;);
              |  +--------------------------------------------------------------------------------------+ 
  3863        +--+ if(!MainF-&gt;EECntlF){        // -eectrlのフラグ(ON時は、コントロール部分を置き換え）  | 
              |  +--+-----------------------------------------------------------------------------------+ 
  3864        |     +--- fprintf(fp,&quot;              iBestSw1 = F1(iloop_%s)\n&quot;,LowerCase(TuneGroupName).c_str());
              |   +-+---+ 
  3865        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3865        |   |  else{  | 
              |   +-+-------+ 
  3866        |     +--- fprintf(fp,&quot;              iBestSw1 = iusw1\n&quot;);
  3867        |     |    
              |   +-+---+ 
  3868        |   |  }  | 
              |   +-----+ 
  3869        +--- fprintf(fp,&quot;            endif\n&quot;);
  3870        +--- fprintf(fp,&quot;          endif\n&quot;);
  3871        +--- fprintf(fp,&quot;\n&quot;);
              |  +------------------------+ 
  3872        +--+ if(FittingType != 0){  | 
              |  +--+---------------------+ 
  3873        |     |    
  3874        |     +--- fprintf(fp,&quot;%c         !!!!!! fitting用変数設定\n&quot;,Comment);
  3875        |     +--- fprintf(fp,&quot;          x(iloop_install-1) = dble(F1(iloop_install))\n&quot;);
  3876        |     +--- fprintf(fp,&quot;          y(iloop_install-1) = t_all\n&quot;);
  3877        |     +--- fprintf(fp,&quot;\n&quot;);
  3878        |     +--- fprintf(fp,&quot;%c          print *, iloop_install-1,x(iloop_install-1),y(iloop_install-1)\n&quot;,Comment);
  3879        |     +--- fprintf(fp,&quot;\n&quot;);
              |   +-+---+ 
  3880        |   |  }  | 
              |   +-----+ 
  3881        +--- fprintf(fp,&quot;        enddo\n&quot;);
              |  +----------------------------------------------------------------------------------+ 
  3882        +--+ if(MainF-&gt;EECntlF){     // -eectrlのフラグ(ON時は、コントロール部分を置き換え）  | 
              |  +--+-------------------------------------------------------------------------------+ 
  3883        |     +--- fprintf(fp,&quot;        call OAT_Eecntl_Fin\n&quot;);
              |   +-+---+ 
  3884        |   |  }  | 
              |   +-----+ 
  3885        +--- fprintf(fp,&quot;\n&quot;);
  3886        |    
              |  +--------------------+ 
  3887        +--+ if(MainF-&gt;DebugF){ | 
              |  +--+-----------------+ 
  3888        |     +--- fprintf(fp,&quot;        if (OAT_DEBUG .ge. 1)then\n&quot;);
              |     |  +------------------------------------------------+ 
  3889        |     +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |     |  +--+---------------------------------------------+ 
  3890        |     |     +--- fprintf(fp,&quot;          if (oat_myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  3891        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  3891        |     |   |  else{  | 
              |     |   +-+-------+ 
  3892        |     |     +--- fprintf(fp,&quot;          if (myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  3893        |     |   |  }  | 
              |     |   +-----+ 
  3894        |     +--- fprintf(fp,&quot;             print *, \&quot;N=\&quot;,iloop_n, \&quot;BestSw=\&quot;,iBestSw1\n&quot;);
  3895        |     +--- fprintf(fp,&quot;          endif\n&quot;);
  3896        |     +--- fprintf(fp,&quot;        endif\n&quot;);
              |   +-+---+ 
  3897        |   |  }  | 
              |   +-----+ 
              |  +------------------------+ 
  3898        +--+ if(FittingType != 0){  | 
              |  +--+---------------------+ 
  3899        |     +--- fprintf(fp,&quot;%c       ------ fitting処理\n&quot;,Comment);
  3900        |     +--- fprintf(fp,&quot;\n&quot;);
  3901        |     +--- fprintf(fp,&quot;%c       !!!! 以下のF1(%d) と %d は、sampledの個数と、variedの個数から判断\n&quot;,Comment
  3902        |     |                    ,CaseArrayCount,CaseCount);                                                        
  3903        |     +--- fprintf(fp,&quot;%c           -&gt; sampledの点がvariedの全領域を調べているか判断し、\n&quot;,Comment);
  3904        |     +--- fprintf(fp,&quot;%c              全数判断していれば、最適値を選択\n&quot;,Comment);
  3905        |     +--- fprintf(fp,&quot;        if (F1(%d) .eq. %d) then\n&quot;,CaseArrayCount,CaseCount);
  3906        |     +--- fprintf(fp,&quot;%c         !!! sampled 指定子なし\n&quot;,Comment);
  3907        |     +--- fprintf(fp,&quot;%c         === if all parameters are mesured or communication optimization\n&quot;,Comment);
  3908        |     +--- fprintf(fp,&quot;%c                then this selects the mesured parameter.\n&quot;,Comment);
              |     |  +------------------------------------------------+ 
  3909        |     +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |     |  +--+---------------------------------------------+ 
  3910        |     |     +--- fprintf(fp,&quot;           if (oat_myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  3911        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  3911        |     |   |  else{  | 
              |     |   +-+-------+ 
  3912        |     |     +--- fprintf(fp,&quot;           if (myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  3913        |     |   |  }  | 
              |     |   +-----+ 
  3914        |     +--- fprintf(fp,&quot;              print *, \&quot;All parameters are mesured. \&quot;\n&quot;);
  3915        |     +--- fprintf(fp,&quot;              print *, \&quot;So, I will select the measured pararameter.\&quot;\n&quot;);
  3916        |     +--- fprintf(fp,&quot;           endif\n&quot;);
  3917        |     +--- fprintf(fp,&quot;\n&quot;);
  3918        |     +--- fprintf(fp,&quot;%c         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n&quot;,Comment);
  3919        |     +--- fprintf(fp,&quot;%c         ! 変更点                         !\n&quot;,Comment);
  3920        |     +--- fprintf(fp,&quot;%c         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n&quot;,Comment);
  3921        |     +--- fprintf(fp,&quot;%c         === using LSM\n&quot;,Comment);
  3922        |     +--- fprintf(fp,&quot;%c         === Parameter Estimated routine for fixing dimansion\n&quot;,Comment);
  3923        |     +--- fprintf(fp,&quot;%c                 and add estimated costs for all range of the parameter\n&quot;,Comment);
  3924        |     +--- fprintf(fp,&quot;          call OATLSM_Est_ParamFxDim(x(0), y(0), n_lsm, m_lsm,%s\n&quot;,F90Char);
  3925        |     +--- fprintf(fp,&quot;     &amp;           a_lsm(0),  iloop_n, nparm, isamp_indx,%s\n&quot;,F90Char);
  3926        |     +--- fprintf(fp,&quot;     &amp;           xDim(0,0), yEst(0,0), idummy)\n&quot;);
  3927        |     +--- fprintf(fp,&quot;          isamp_indx = isamp_indx + 1\n&quot;);
              |     |  +------------------------------------------------+ 
  3928        |     +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |     |  +--+---------------------------------------------+ 
  3929        |     |     +--- fprintf(fp,&quot;          if (oat_myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  3930        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  3930        |     |   |  else{  | 
              |     |   +-+-------+ 
  3931        |     |     +--- fprintf(fp,&quot;          if (myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  3932        |     |   |  }  | 
              |     |   +-----+ 
  3933        |     +--- fprintf(fp,&quot;             print *, \&quot;Best Parameter: \&quot;, iBestSW1\n&quot;);
  3934        |     +--- fprintf(fp,&quot;          endif\n&quot;);
  3935        |     +--- fprintf(fp,&quot;%c         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n&quot;,Comment);
  3936        |     +--- fprintf(fp,&quot;%c         ! 変更点の終り                   !\n&quot;,Comment);
  3937        |     +--- fprintf(fp,&quot;%c         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n&quot;,Comment);
  3938        |     +--- fprintf(fp,&quot;\n&quot;);
  3939        |     +--- fprintf(fp,&quot;        else\n&quot;);
  3940        |     +--- fprintf(fp,&quot;\n&quot;);
  3941        |     +--- fprintf(fp,&quot;%c         !!! sampled 指定子あり\n&quot;,Comment);
  3942        |     +--- fprintf(fp,&quot;%c         === using LSM\n&quot;,Comment);
  3943        |     +--- fprintf(fp,&quot;%c         === Parameter Estimated routine for fixing dimansion\n&quot;,Comment);
  3944        |     +--- fprintf(fp,&quot;%c                 and add estimated costs for all range of the parameter\n&quot;,Comment);
  3945        |     +--- fprintf(fp,&quot;          call OATLSM_Est_ParamFxDim(x(0), y(0), n_lsm, m_lsm,%s\n&quot;,F90Char);
  3946        |     +--- fprintf(fp,&quot;     &amp;           a_lsm(0),  iloop_n, nparm, isamp_indx,%s\n&quot;,F90Char);
  3947        |     +--- fprintf(fp,&quot;     &amp;           xDim(0,0), yEst(0,0), iBestSW1)\n&quot;);
  3948        |     +--- fprintf(fp,&quot;          isamp_indx = isamp_indx + 1\n&quot;);
              |     |  +------------------------------------------------+ 
  3949        |     +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |     |  +--+---------------------------------------------+ 
  3950        |     |     +--- fprintf(fp,&quot;          if (oat_myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  3951        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  3951        |     |   |  else{  | 
              |     |   +-+-------+ 
  3952        |     |     +--- fprintf(fp,&quot;          if (myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  3953        |     |   |  }  | 
              |     |   +-----+ 
  3954        |     +--- fprintf(fp,&quot;             print *, \&quot;Estimated Best Parameter: \&quot;, iBestSW1\n&quot;);
  3955        |     +--- fprintf(fp,&quot;          endif\n&quot;);
  3956        |     +--- fprintf(fp,&quot;        endif\n&quot;);
  3957        |     +--- fprintf(fp,&quot;%c       -----------------------------------------\n&quot;,Comment);
  3958        |     +--- fprintf(fp,&quot;\n&quot;);
              |   +-+---+ 
  3959        |   |  }  | 
              |   +-----+ 
  3960        |    
              |  +------------------------------------------------+ 
  3961        +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |  +--+---------------------------------------------+ 
  3962        |     +--- fprintf(fp,&quot;          if (oat_myid .eq. 0) then\n&quot;);
  3963        |     +--- fprintf(fp,&quot;          write(12, \&quot;(A,I6,A,I6)\&quot;) \&quot;N=\&quot;,iloop_n, \&quot; BestSw=\&quot;,iBestSW1\n&quot;);
  3964        |     +--- fprintf(fp,&quot;          endif\n&quot;);
  3965        |     +--- fprintf(fp,&quot;\n&quot;);
  3966        |     +--- fprintf(fp,&quot;\n&quot;);
              |   +-+---+ 
  3967        |   |  }  | 
              |   +-----+ 
  3968        |    
  3969        +--- fprintf(fp,&quot;%c       --- file write\n&quot;,Comment);
              |  +------------------------------------------------+ 
  3970        +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |  +--+---------------------------------------------+ 
  3971        |     +--- fprintf(fp,&quot;        if (oat_myid .eq. 0) then\n&quot;);
              |   +-+---+ 
  3972        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3972        |   |  else{  | 
              |   +-+-------+ 
  3973        |     +--- fprintf(fp,&quot;        if (myid .eq. 0) then\n&quot;);
              |   +-+---+ 
  3974        |   |  }  | 
              |   +-----+ 
  3975        +--- fprintf(fp,&quot;          write (11, *) \&quot;  (OAT_PROBSIZE \&quot;, iloop_n, \&quot; \&quot;\n&quot;);
  3976        +--- fprintf(fp,&quot;          write (11, *) \&quot;     (%s_I \&quot;, iBestSw1,\&quot;)\&quot;\n&quot;,Name.c_str());
  3977        +--- fprintf(fp,&quot;          write (11, *) \&quot;  )\&quot;\n&quot;);
  3978        +--- fprintf(fp,&quot;        endif\n&quot;);
  3979        +--- fprintf(fp,&quot;%c       -----------------------------------------\n&quot;,Comment);
              |  +------------------------------+ 
  3980        +--+ if(TuneGroup != tgDynamic){  | 
              |  +--+---------------------------+ 
  3981        |     +--- fprintf(fp,&quot;      enddo\n&quot;);
              |   +-+---+ 
  3982        |   |  }  | 
              |   +-----+ 
  3983        +--- fprintf(fp,&quot;\n&quot;);
  3984        +--- fprintf(fp,&quot;%c     --- file close\n&quot;,Comment);
              |  +------------------------------------------------+ 
  3985        +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |  +--+---------------------------------------------+ 
  3986        |     +--- fprintf(fp,&quot;      if (oat_myid .eq. 0) then\n&quot;);
              |   +-+---+ 
  3987        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  3987        |   |  else{  | 
              |   +-+-------+ 
  3988        |     +--- fprintf(fp,&quot;      if (myid .eq. 0) then\n&quot;);
              |   +-+---+ 
  3989        |   |  }  | 
              |   +-----+ 
  3990        +--- fprintf(fp,&quot;        write (11, *) \&quot;)\&quot;\n&quot;);
  3991        +--- fprintf(fp,&quot;        close(11, status = 'keep')\n&quot;);
  3992        |    
              |  +--------------------------------+ 
  3993        +--+ if(VisualF){ // Visualize = ON | 
              |  +--+-----------------------------+ 
  3994        |     +--- // 0から100(%)までの進行状態の値をセットする。
  3995        |     +--- fprintf(fp,&quot;              ExecState(%d) = 100\n&quot;,
  3996        |     |            MainF-&gt;TuneRegionList-&gt;IndexOf(this)+1);   
  3997        |     +--- // 格納用の ExecState() の現在の値を書き込む。
  3998        |     +--- fprintf(fp,&quot;              open(12, status = 'replace',%s\n&quot;,F90Char);
  3999        |     +--- fprintf(fp,&quot;     &amp;           file = 'OATATLog.dat',%s\n&quot;,F90Char);
  4000        |     +--- fprintf(fp,&quot;     &amp;           action = 'write', pad= 'yes')\n&quot;);
  4001        |     +--- fprintf(fp,&quot;\n&quot;);
  4002        |     +--- fprintf(fp,&quot;              do iloop_v = 1, %d\n&quot;,MainF-&gt;TuneRegionList-&gt;Count);
  4003        |     +--- fprintf(fp,&quot;                write (12, *) ExecState(iloop_v)\n&quot;);
  4004        |     +--- fprintf(fp,&quot;              enddo\n&quot;);
  4005        |     +--- fprintf(fp,&quot;              close(12, status = 'keep')\n&quot;);
  4006        |     |    
  4007        |     +--- //
  4008        |     |    // 結果をClose 
  4009        |     |    //             
  4010        |     +--- fprintf(fp,&quot;              close(13, status = 'keep')\n&quot;);
              |   +-+---+ 
  4011        |   |  }  | 
              |   +-----+ 
  4012        |    
  4013        +--- fprintf(fp,&quot;      endif\n&quot;);
  4014        +--- fprintf(fp,&quot;\n&quot;);
              |  +------------------------------------------------+ 
  4015        +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |  +--+---------------------------------------------+ 
  4016        |     +--- fprintf(fp,&quot;      if (oat_myid .eq. 0) then\n&quot;);
  4017        |     +--- fprintf(fp,&quot;          close(12, status = 'keep')\n&quot;);
  4018        |     +--- fprintf(fp,&quot;      endif\n&quot;);
              |   +-+---+ 
  4019        |   |  }  | 
              |   +-----+ 
  4020        +--- fprintf(fp,&quot;%c     ---------------------------------------------\n&quot;,Comment);
  4021        +--- fprintf(fp,&quot;\n&quot;);
  4022        |    
  4023        |     
              |  +------------------------+ 
  4024        +--+ if(FittingType != 0){  | 
              |  +--+---------------------+ 
  4025        |     |    
  4026        |     +--- fprintf(fp,&quot;%c     !!!!!!!! fitting処理\n&quot;,Comment);
  4027        |     +--- fprintf(fp,&quot;%c     === for LSM to estimate variable dimension\n&quot;,Comment);
  4028        |     +--- fprintf(fp,&quot;%c       === Input xDim, yEst\n&quot;,Comment);
  4029        |     +--- fprintf(fp,&quot;\n&quot;);
              |     |  +------------------------------------------------+ 
  4030        |     +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |     |  +--+---------------------------------------------+ 
  4031        |     |     +--- fprintf(fp,&quot;%c      if (oat_myid. eq. 0) then\n&quot;,Comment);
              |     |   +-+---+ 
  4032        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  4032        |     |   |  else{  | 
              |     |   +-+-------+ 
  4033        |     |     +--- fprintf(fp,&quot;%c      if (myid. eq. 0) then\n&quot;,Comment);
              |     |   +-+---+ 
  4034        |     |   |  }  | 
              |     |   +-----+ 
  4035        |     +--- fprintf(fp,&quot;%c        print *, \&quot;nsamp=\&quot;,nsamp, \&quot;/ nparm=\&quot;,nparm\n&quot;,Comment);
  4036        |     +--- fprintf(fp,&quot;%c        do i=0, nsamp-1\n&quot;,Comment);
  4037        |     +--- fprintf(fp,&quot;%c          write(6, 1919) (xDim(i,isw),isw=0, nparm-1)\n&quot;,Comment);
  4038        |     +--- fprintf(fp,&quot;%c        enddo\n&quot;,Comment);
  4039        |     +--- fprintf(fp,&quot;%c        print *, &quot;&quot;\n&quot;,Comment);
  4040        |     +--- fprintf(fp,&quot;%c        do i=0, nsamp-1\n&quot;,Comment);
  4041        |     +--- fprintf(fp,&quot;%c          write(6, 1919) (yEst(i,isw),isw=0, nparm-1)\n&quot;,Comment);
  4042        |     +--- fprintf(fp,&quot;%c        enddo\n&quot;,Comment);
  4043        |     +--- fprintf(fp,&quot;%c 1919   format(' ', 20F10.5)\n&quot;,Comment);
  4044        |     +--- fprintf(fp,&quot;%c      endif\n&quot;,Comment);
  4045        |     +--- fprintf(fp,&quot;\n&quot;);
  4046        |     +--- fprintf(fp,&quot;\n&quot;);
  4047        |     +--- fprintf(fp,&quot;%c       === 全組合せ数がデータの総数となる。\n&quot;,Comment);
  4048        |     +--- fprintf(fp,&quot;        n_lsm = nparm\n&quot;);
  4049        |     +--- fprintf(fp,&quot;\n&quot;);
  4050        |     +--- fprintf(fp,&quot;        call OATLSM_lsm_DimEst(xDim(0,0), yEst(0,0),%s\n&quot;,F90Char);
  4051        |     +--- fprintf(fp,&quot;     &amp;               n_lsm, m_lsm, aa_lsm(0,0), nparm, nsamp)\n&quot;);
  4052        |     +--- fprintf(fp,&quot;\n&quot;);
  4053        |     +--- fprintf(fp,&quot;\n&quot;);
  4054        |     +--- fprintf(fp,&quot;      do isw=1, nparm\n&quot;);
  4055        |     +--- fprintf(fp,&quot;        do iii=0, nsamp-1\n&quot;);
  4056        |     +--- fprintf(fp,&quot;           xDim(iii, isw-1)=0.0d0\n&quot;);
  4057        |     +--- fprintf(fp,&quot;        enddo\n&quot;);
  4058        |     +--- fprintf(fp,&quot;      enddo\n&quot;);
  4059        |     +--- fprintf(fp,&quot;\n&quot;);
  4060        |     +--- fprintf(fp,&quot;      do isw=1, nparm\n&quot;);
  4061        |     +--- fprintf(fp,&quot;        do iii=0, nsamp-1\n&quot;);
  4062        |     +--- fprintf(fp,&quot;          yEst(iii, isw-1)=0.0d0\n&quot;);
  4063        |     +--- fprintf(fp,&quot;        enddo\n&quot;);
  4064        |     +--- fprintf(fp,&quot;      enddo\n&quot;);
  4065        |     +--- fprintf(fp,&quot;\n&quot;);
  4066        |     +--- fprintf(fp,&quot;%c     === Output is aa_lsm.\n&quot;,Comment);
  4067        |     +--- fprintf(fp,&quot;%c       ===  Output\n&quot;,Comment);
              |     |  +------------------------------------------------+ 
  4068        |     +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |     |  +--+---------------------------------------------+ 
  4069        |     |     +--- fprintf(fp,&quot;      if (oat_myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  4070        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  4070        |     |   |  else{  | 
              |     |   +-+-------+ 
  4071        |     |     +--- fprintf(fp,&quot;      if (myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  4072        |     |   |  }  | 
              |     |   +-----+ 
  4073        |     |    
  4074        |     +--- //      fprintf(fp,&quot;         open(10, status = 'replace', file = 'MyMM_I_LSM.dat',\n&quot;);
  4075        |     +--- fprintf(fp,&quot;         open(10, status = 'replace', file = '%s_%c_LSM.dat',%s\n&quot;,Name.c_str(),TuneGroupName[0],F90Char);
  4076        |     +--- fprintf(fp,&quot;     &amp;       action = 'write', pad= 'yes')\n&quot;);
  4077        |     +--- fprintf(fp,&quot;      endif\n&quot;);
  4078        |     +--- fprintf(fp,&quot;      do isw=1, nparm\n&quot;);
  4079        |     +--- fprintf(fp,&quot;         write (10, 1001) dble(isw),%s\n&quot;,F90Char);
  4080        |     +--- fprintf(fp,&quot;     &amp;       (aa_lsm(iii, isw-1), iii=0, m_lsm)\n&quot;);
  4081        |     +--- fprintf(fp,&quot; 1001    format(D20.10, 20D20.10)\n&quot;);
  4082        |     +--- fprintf(fp,&quot;      enddo\n&quot;);
  4083        |     +--- fprintf(fp,&quot;      close(10, status = 'keep')\n&quot;);
  4084        |     +--- fprintf(fp,&quot;\n&quot;);
              |     |  +------------------------------------------------+ 
  4085        |     +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |     |  +--+---------------------------------------------+ 
  4086        |     |     +--- fprintf(fp,&quot;      if (oat_myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  4087        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  4087        |     |   |  else{  | 
              |     |   +-+-------+ 
  4088        |     |     +--- fprintf(fp,&quot;      if (myid .eq. 0) then\n&quot;);
              |     |   +-+---+ 
  4089        |     |   |  }  | 
              |     |   +-----+ 
  4090        |     +--- fprintf(fp,&quot;        print *, \&quot;Output Parameters ==============================\&quot;\n&quot;);
  4091        |     +--- fprintf(fp,&quot;        do isw=1, nparm\n&quot;);
  4092        |     +--- fprintf(fp,&quot;          print *, \&quot;Parameter No.: \&quot;, isw\n&quot;);
  4093        |     +--- fprintf(fp,&quot;          print *, \&quot;Sample Points: \&quot;, n_lsm, \&quot; / Formula Order: \&quot;, m_lsm\n&quot;);
  4094        |     +--- fprintf(fp,&quot;          print *, \&quot;Calculated Coefficients: \&quot;\n&quot;);
  4095        |     +--- fprintf(fp,&quot;          do iii=0, m_lsm\n&quot;);
  4096        |     +--- fprintf(fp,&quot;            print *, aa_lsm(iii, isw-1), \&quot; * x^\&quot;, m_lsm-iii\n&quot;);
  4097        |     +--- fprintf(fp,&quot;          enddo\n&quot;);
  4098        |     +--- fprintf(fp,&quot;        enddo\n&quot;);
  4099        |     +--- fprintf(fp,&quot;%c       === End of Output\n&quot;,Comment);
  4100        |     +--- fprintf(fp,&quot;      endif\n&quot;);
  4101        |     +--- fprintf(fp,&quot;%c     !!!!!!!! fitting処理の終り\n&quot;,Comment);
  4102        |     +--- fprintf(fp,&quot;%c     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n&quot;,Comment);
  4103        |     +--- fprintf(fp,&quot;\n&quot;);
  4104        |     |    
              |   +-+---+ 
  4105        |   |  }  | 
              |   +-----+ 
  4106        |    
  4107        +--- fprintf(fp,&quot;      return\n&quot;);
              |  +------------------------------------------------+ 
  4108        +--+ if(MainF-&gt;SrcCodeType == MainF-&gt;sctFortran90){ | 
              |  +--+---------------------------------------------+ 
  4109        |     +--- s = &quot;OAT_ATexec&quot;+TuneGroupName+Name;
  4110        |     +--- fprintf(fp,&quot;      end subroutine %s\n&quot;,s.c_str());
              |   +-+---+ 
  4111        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  4111        |   |  else{  | 
              |   +-+-------+ 
  4112        |     +--- fprintf(fp,&quot;      end\n&quot;);  // Change 2013/06/20
              |   +-+---+ 
  4113        |   |  }  | 
              |   +-----+ 
  4114        |    
  4115        +--- fprintf(fp,&quot;%c     ==== End of %s Optimization Routines\n&quot;,Comment,TuneGroupName.c_str());
  4116        +--- fprintf(fp,&quot;%c     ==============================================================\n&quot;,Comment);
  4117        +--- fprintf(fp,&quot;\n&quot;);
  4118        +--- fprintf(fp,&quot;\n&quot;);
  4119        +--- /*******************************************************************************************************/
  4120        |    //                                                                                                         
  4121        |    //Kogakuin Irie                                                                                            
  4122        |    //Fortran90対応のd-Spline用追加部分---------------------------------------------------------------------   
  4123        |    //                                                                                                         
  4124        +--- //1次元用d-Spline
              |  +--------------------------+ 
  4125        +--+ if(FittingDspline == 1){ | 
              |  +--+-----------------------+ 
  4126        |     +--- //1次元用d-Spline（インストール時自動チューニング用）
              |     |  +------------------------------+ 
  4127        |     +--+ if(TuneGroup == tgInstall){  | 
              |     |  +--+---------------------------+ 
  4128        |     |     +--- int CaseNums = (int)( (variedToValue[0] - variedFromValue[0]) / variedStepValue[0] + 1 );
  4129        |     |     |    
  4130        |     |     +--- //関数名部分
  4131        |     |     +--- fprintf(fp,&quot;function dspgiv%s%s( npN&quot;, TuneGroupName.c_str(), Name.c_str());
  4132        |     |     |    
  4133        |     |     +--- //ここから流用　変数名出力のため------
  4134        |     |     |                                           
              |     |     |  +----------------------------------------+ 
  4135        |     |     +--+ if(MainF-&gt;Call_ATExec_Script == NULL){ | 
              |     |     |  +--+-------------------------------------+ 
  4136        |     |     |     +--- TScript *Script = new TScript(MainF-&gt;TokenList,0,NULL,ValDataList);
  4137        |     |     |     +--- ArgStr = Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);
  4138        |     |     |     +--- fprintf(fp,&quot;%s&quot;,ArgStr.c_str());
  4139        |     |     |     +--- delete Script;
              |     |     |   +-+---+ 
  4140        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  4140        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  4141        |     |     |     +--- ArgStr = MainF-&gt;Call_ATExec_Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);
  4142        |     |     |     +--- fprintf(fp,&quot;%s&quot;,ArgStr.c_str());
              |     |     |   +-+---+ 
  4143        |     |     |   |  }  | 
              |     |     |   +-----+ 
  4144        |     |     |    
  4145        |     |     +--- //ここまで流用　変数名出力用------
  4146        |     |     +--- fprintf(fp,&quot;)\n&quot;);
  4147        |     |     |    
  4148        |     |     +--- //use文の宣言
  4149        |     |     +--- fprintf(fp,&quot;      use omp_lib\n&quot;);
  4150        |     |     |    
  4151        |     |     +--- //implicit noneの宣言
  4152        |     |     +--- fprintf(fp,&quot;      implicit none\n&quot;);
  4153        |     |     |    
  4154        |     |     +--- //仮引数宣言部分
  4155        |     |     +--- fprintf(fp,&quot;      integer npN\n&quot;);
  4156        |     |     |    
  4157        |     |     +--- //ここから流用　変数名出力のため------
  4158        |     |     |                                           
              |     |     |  +----------------------------------------+ 
  4159        |     |     +--+ if(MainF-&gt;Call_ATExec_Script == NULL){ | 
              |     |     |  +--+-------------------------------------+ 
  4160        |     |     |     +--- TScript *Script = new TScript(MainF-&gt;TokenList,0,NULL,ValDataList);
  4161        |     |     |     +--- ArgStr = Script-&gt;GetATExecArgStr(true,&quot;&quot;,&quot;&quot;);
  4162        |     |     |     +--- fprintf(fp,&quot;%s&quot;,ArgStr.c_str());
  4163        |     |     |     +--- delete Script;
              |     |     |   +-+---+ 
  4164        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  4164        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  4165        |     |     |     +--- ArgStr = MainF-&gt;Call_ATExec_Script-&gt;GetATExecArgStr(true,&quot;&quot;,&quot;&quot;);
  4166        |     |     |     +--- fprintf(fp,&quot;%s&quot;,ArgStr.c_str());
              |     |     |   +-+---+ 
  4167        |     |     |   |  }  | 
              |     |     |   +-----+ 
  4168        |     |     |    
  4169        |     |     +--- //ここまで流用　変数名出力用------
  4170        |     |     |                                       
  4171        |     |     +--- fprintf(fp,&quot;      integer :: dspgiv%s%s\n&quot;, TuneGroupName.c_str(), Name.c_str());
  4172        |     |     +--- fprintf(fp,&quot;      integer :: DEBUG = 1\n&quot;);
  4173        |     |     +--- fprintf(fp,&quot;      integer nn\n&quot;);
  4174        |     |     +--- fprintf(fp,&quot;      double precision DE(%d+1,%d+1)\n&quot;, CaseNums * 3, CaseNums * 3);
  4175        |     |     +--- fprintf(fp,&quot;      double precision R(%d+1,%d+1)\n&quot;, CaseNums * 3, CaseNums * 3);
  4176        |     |     +--- fprintf(fp,&quot;      double precision G(%d+1,%d+1)\n&quot;, CaseNums * 3, CaseNums * 3);
  4177        |     |     +--- fprintf(fp,&quot;      double precision radius, cosine, sine\n&quot;);
  4178        |     |     +--- fprintf(fp,&quot;      integer p, q, q2\n&quot;);
  4179        |     |     +--- fprintf(fp,&quot;      double precision time\n&quot;);
  4180        |     |     +--- fprintf(fp,&quot;      integer count\n&quot;);
  4181        |     |     +--- fprintf(fp,&quot;      double precision, allocatable, dimension(:) :: x\n&quot;);
  4182        |     |     +--- fprintf(fp,&quot;      double precision temp\n&quot;);
  4183        |     |     +--- fprintf(fp,&quot;      integer temp2, bestP, nextP, prebestP\n&quot;);
  4184        |     |     +--- fprintf(fp,&quot;      double precision select2(npN,2)\n&quot;);
  4185        |     |     +--- fprintf(fp,&quot;      integer h(npN)\n&quot;);
  4186        |     |     +--- fprintf(fp,&quot;      integer dspline_isw(npN)\n&quot;);
  4187        |     |     +--- fprintf(fp,&quot;      integer kk\n&quot;);
  4188        |     |     +--- fprintf(fp,&quot;      double precision, parameter :: alfa = 0.1\n&quot;);
  4189        |     |     +--- fprintf(fp,&quot;      double precision t1, t2\n&quot;);
  4190        |     |     +--- fprintf(fp,&quot;      integer F2(4)\n&quot;);
  4191        |     |     +--- fprintf(fp,&quot;      integer i, j, k, l, i4\n\n&quot;);
  4192        |     |     |    
  4193        |     |     +--- fprintf(fp,&quot;      nn = npN * 3\n&quot;);
  4194        |     |     +--- fprintf(fp,&quot;      count = 1\n&quot;);
  4195        |     |     +--- fprintf(fp,&quot;      bestP = 0\n&quot;);
  4196        |     |     +--- fprintf(fp,&quot;      kk = 1\n\n&quot;);
  4197        |     |     |    
  4198        |     |     +--- fprintf(fp,&quot;      allocate(x(nn))\n\n&quot;);
  4199        |     |     |    
  4200        |     |     +--- //エクセル書き込み用部分
  4201        |     |     +--- fprintf(fp,&quot;      open( 11, file = 'd-SplineData.csv' )\n\n&quot;);
  4202        |     |     |    
  4203        |     |     +--- //DE初期化部分
  4204        |     |     +--- fprintf(fp,&quot;      do i = 1, nn + 1\n         do j = 1, nn + 1\n            DE(i,j) = 0\n            R(i,j) = 0\n         end do\n      end do\n\n&quot;);
  4205        |     |     |    
  4206        |     |     +--- //DE1,-2,1セット部分
  4207        |     |     +--- fprintf(fp,&quot;      do i = 1, nn - 2\n         DE(i,i) = 1 * alfa\n         DE(i,i+1) = -2 * alfa\n         DE(i,i+2) = 1 * alfa\n      end do\n\n&quot;);
  4208        |     |     |    
  4209        |     |     +--- //h初期化部分
  4210        |     |     +--- fprintf(fp,&quot;      do i = 1, npN\n         h(i) = npN + 1\n      end do\n\n&quot;);
  4211        |     |     |    
  4212        |     |     +--- //初期4点決定部分
  4213        |     |     +--- fprintf(fp,&quot;      F2(1) = 1\n      F2(2) = ( 2 + npN ) / 3\n      F2(3) = ( 1 + 2 * npN ) / 3\n      F2(4) = npN\n\n      p = nn + 1\n\n&quot;);
  4214        |     |     |    
  4215        |     |     +--- //パラメータの取りうる値が,d-Spline関数中ではどの点に対応するかを設定
  4216        |     |     +--- fprintf(fp,&quot;      do i = 1, npN\n         dspline_isw(i) = 3 * i - 2\n      end do\n\n&quot;);
  4217        |     |     |    
  4218        |     |     +--- //初期4点の計算用部分-------------------------------------------------------
  4219        |     |     +--- fprintf(fp,&quot;      do i4 = 1, 4\n         q = F2(i4)\n         q2 = dspline_isw(F2(i4))\n\n         t1 = omp_get_wtime()\n&quot;);
  4220        |     |     |    
  4221        |     |     +--- //計算する関数に飛ぶ部分    基本的に既存部分の流用
              |     |     |  +----------------------------------------------------------------------------------+ 
  4222        |     |     +--+ if(MainF-&gt;EECntlF){     // -eectrlのフラグ(ON時は、コントロール部分を置き換え）  | 
              |     |     |  +--+-------------------------------------------------------------------------------+ 
  4223        |     |     |     +--- fprintf(fp,&quot;         iloop_inner = 0;\n&quot;);
  4224        |     |     |     +--- fprintf(fp,&quot;         while(OAT_Eecntl_Continue()){\n&quot;);
  4225        |     |     |     +--- s = &quot;            call &quot;+FuncName + &quot;(&quot;;
              |     |     |   +-+---+ 
  4226        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  4226        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  4227        |     |     |     +--- s = &quot;         call &quot;+FuncName + &quot;(&quot;;
              |     |     |   +-+---+ 
  4228        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------------------------------------------+ 
  4229        |     |     +--+ for(i = 0 ; i &lt; ArgValList-&gt;Count ; i++){  | 
              |     |     |  +--+-----------------------------------------+ 
              |     |     |     |  +------------------------------------+ 
  4230        |     |     |     +--+ if(ArgValList-&gt;Strings[i] == &quot;&quot;){  | 
              |     |     |     |  +--+---------------------------------+ 
              |     |     |     |     |  +------------+ 
  4231        |     |     |     |     +--+ continue;  | 
              |     |     |     |     |  +------------+ 
              |     |     |     |   +-+---+ 
  4232        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
  4233        |     |     |     +--- ValData = (TValData *)ArgValList-&gt;Objects[i];
  4234        |     |     |     +--- s += ValData-&gt;Str + &quot;, &quot;;
              |     |     |   +-+---+ 
  4235        |     |     |   |  }  | 
              |     |     |   +-----+ 
  4236        |     |     +--- s += &quot;q)&quot;;
  4237        |     |     +--- fprintf(fp,&quot;%s\n&quot;,s.c_str());
  4238        |     |     |    
  4239        |     |     +--- fprintf(fp,&quot;         t2 = omp_get_wtime()\n\n         time = t2 - t1\n\n&quot;);
  4240        |     |     +--- fprintf(fp,&quot;         print '( /, \&quot;---para is \&quot;, I0, \&quot;, time is \&quot;, G14.7, \&quot;---\&quot;, / )', q, time\n\n&quot;);
  4241        |     |     +--- fprintf(fp,&quot;         h(kk) = q\n\n         DE(p,q2) = 1\n         DE(p,nn+1) = time\n\n&quot;);
  4242        |     |     |    
  4243        |     |     +--- //------初期4点ギブンス変換do文部分ここから------
  4244        |     |     +--- fprintf(fp,&quot;         do q2 = q2, nn\n\n            do i = 1, nn + 1\n               G(i,i) = 0\n            end do\n\n&quot;);
  4245        |     |     +--- fprintf(fp,&quot;            G(nn+1,nn+1) = 1\n&quot;);
  4246        |     |     |    
  4247        |     |     +--- //G用計算部分
  4248        |     |     +--- fprintf(fp,&quot;            radius = dsqrt( ( DE(q2,q2) ) * ( DE(q2,q2) ) + ( DE(p,q2) ) * ( DE(p,q2) ) )\n\n&quot;);
  4249        |     |     +--- fprintf(fp,&quot;            if ( radius .eq. 0 ) then\n               exit\n            endif\n\n&quot;);
  4250        |     |     +--- fprintf(fp,&quot;            cosine = DE(q2,q2) / radius\n            sine = DE(p,q2) / radius\n\n            G(p,p) = cosine\n            G(q2,q2) = cosine\n\n            G(q2,p) = sine\n            G(p,q2) = -1 * sine\n\n\n&quot;);
  4251        |     |     |    
  4252        |     |     +--- //R=G*DEギブンス変換部分
  4253        |     |     +--- fprintf(fp,&quot;            R(q2,q2) = R(q2,q2) + G(q2,q2) * DE(q2,q2)\n            R(q2,q2) = R(q2,q2) + G(q2,nn+1) * DE(nn+1,q2)\n\n&quot;);
  4254        |     |     +--- fprintf(fp,&quot;            if ( ( ( q2 + 1 ) .ne. nn + 1 ) .and. ( ( q2 + 1 ) .le. nn + 1 ) ) then\n               R(q2,q2+1) = R(q2,q2+1) + G(q2,q2) * DE(q2,q2+1)\n               R(q2,q2+1) = R(q2,q2+1) + G(q2,nn+1) * DE(nn+1,q2+1)\n            endif\n\n&quot;);
  4255        |     |     +--- fprintf(fp,&quot;            if ( ( ( q2 + 2 ) .ne. nn + 1 ) .and. ( ( q2 + 2 ) .le. nn + 1 ) ) then\n               R(q2,q2+2) = R(q2,q2+2) + G(q2,q2) * DE(q2,q2+2)\n               R(q2,q2+2) = R(q2,q2+2) + G(q2,nn+1) * DE(nn+1,q2+2)\n            endif\n\n&quot;);
  4256        |     |     +--- fprintf(fp,&quot;            R(q2,nn+1) = R(q2,nn+1) + G(q2,q2) * DE(q2,nn+1)\n            R(q2,nn+1) = R(q2,nn+1) + G(q2,nn+1) * DE(nn+1,nn+1)\n\n\n&quot;);
  4257        |     |     |    
  4258        |     |     +--- fprintf(fp,&quot;            R(nn+1,q2) = R(nn+1,q2) + G(nn+1,q2) * DE(q2,q2)\n            R(nn+1,q2) = R(nn+1,q2) + G(nn+1,nn+1) * DE(nn+1,q2)\n\n&quot;);
  4259        |     |     +--- fprintf(fp,&quot;            if ( ( ( q2 + 1 ) .ne. nn + 1 ) .and. ( ( q2 + 1 ) .le. nn + 1 ) ) then\n               R(nn+1,q2+1) = R(nn+1,q2+1) + G(nn+1,q2) * DE(q2,q2+1)\n               R(nn+1,q2+1) = R(nn+1,q2+1) + G(nn+1,nn+1) * DE(nn+1,q2+1)\n            endif\n\n&quot;);
  4260        |     |     +--- fprintf(fp,&quot;            if ( ( ( q2 + 2 ) .ne. nn + 1 ) .and. ( ( q2 + 2 ) .le. nn + 1 ) ) then\n               R(nn+1,q2+2) = R(nn+1,q2+2) + G(nn+1,q2) * DE(q2,q2+2)\n               R(nn+1,q2+2) = R(nn+1,q2+2) + G(nn+1,nn+1) * DE(nn+1,q2+2)\n            endif\n\n&quot;);
  4261        |     |     +--- fprintf(fp,&quot;            R(nn+1,nn+1) = R(nn+1,nn+1) + G(nn+1,q2) * DE(q2,nn+1)\n            R(nn+1,nn+1) = R(nn+1,nn+1) + G(nn+1,nn+1) * DE(nn+1,nn+1)\n\n\n&quot;);
  4262        |     |     |    
  4263        |     |     +--- fprintf(fp,&quot;            DE(q2,q2) = R(q2,q2)\n\n            if ( ( ( q2 + 1 ) .ne. nn + 1 ) .and. ( ( q2 + 1 ) .le. nn + 1 ) ) then\n               DE(q2,q2+1) = R(q2,q2+1)\n            endif\n\n            if ( ( ( q2 + 2 ) .ne. nn + 1 ) .and. ( ( q2 + 2 ) .le. nn + 1 ) ) then\n               DE(q2,q2+2) = R(q2,q2+2)\n            endif\n\n            DE(q2,nn+1) = R(q2,nn+1)\n\n\n&quot;);
  4264        |     |     +--- fprintf(fp,&quot;            DE(nn+1,q2) = R(nn+1,q2)\n\n            if ( ( ( q2 + 1 ) .ne. nn + 1 ) .and. ( ( q2 + 1 ) .le. nn + 1 ) ) then\n               DE(nn+1,q2+1) = R(nn+1,q2+1)\n            endif\n\n            if ( ( ( q2 + 2 ) .ne. nn + 1 ) .and. ( ( q2 + 2 ) .le. nn + 1 ) ) then\n               DE(nn+1,q2+2) = R(nn+1,q2+2)\n            endif\n\n            DE(nn+1,nn+1) = R(nn+1,nn+1)\n\n\n&quot;);
  4265        |     |     +--- fprintf(fp,&quot;            R(q2,q2) = 0\n\n            if ( ( ( q2 + 1 ) .ne. nn + 1 ) .and. ( ( q2 + 1 ) .le. nn + 1 ) ) then\n               R(q2,q2+1) = 0\n            endif\n\n            if ( ( ( q2 + 2 ) .ne. nn + 1 ) .and. ( ( q2 + 2 ) .le. nn + 1 ) ) then\n               R(q2,q2+2) = 0\n            endif\n\n            R(q2,nn+1) = 0\n\n\n&quot;);
  4266        |     |     +--- fprintf(fp,&quot;            R(nn+1,q2) = 0\n\n            if ( ( ( q2 + 1 ) .ne. nn + 1 ) .and. ( ( q2 + 1 ) .le. nn + 1 ) ) then\n               R(nn+1,q2+1) = 0\n            endif\n\n            if ( ( ( q2 + 2 ) .ne. nn + 1 ) .and. ( ( q2 + 2 ) .le. nn + 1 ) ) then\n               R(nn+1,q2+2) = 0\n            endif\n\n            R(nn+1,nn+1) = 0\n\n&quot;);
  4267        |     |     |    
  4268        |     |     +--- fprintf(fp,&quot;         end do\n\n         kk = kk + 1\n      end do\n\n&quot;);
  4269        |     |     +--- //------初期4点ギブンス変換do文部分ここまで------
  4270        |     |     |                                                                           
  4271        |     |     |    //------初期4点計算後，ベストパラメタと次のパラメタ決定ここから------  
  4272        |     |     |                                                                           
  4273        |     |     |    //推定値代入初期化部分                                                 
  4274        |     |     +--- fprintf(fp,&quot;      do i = 1, nn\n         x(i) = DE(i,nn+1)\n      end do\n\n&quot;);
  4275        |     |     |    
  4276        |     |     +--- //後退代入で推定値計算部分
  4277        |     |     +--- fprintf(fp,&quot;      do i = nn, 1, -1\n         do j = i + 1, nn\n            x(i) = x(i) - DE(i,j) * x(j)\n         end do\n\n         x(i) = x(i) / DE(i,i)\n      end do\n\n&quot;);
  4278        |     |     |    
  4279        |     |     +--- //デバッグ用，推定値表示部分
  4280        |     |     +--- fprintf(fp,&quot;      if ( DEBUG .gt. 0 ) then\n         print '( /, \&quot;estimation\&quot; )'\n\n         do i = 1, nn\n            print *, '[', i, ']', x(i)\n         end do\n\n         print *, ''\n      endif\n\n&quot;);
  4281        |     |     |    
  4282        |     |     +--- //推定値が最小となる番号をベストパラメタに設定する部分
  4283        |     |     +--- fprintf(fp,&quot;      temp = x(1)\n      bestP = 1\n\n      do i = 1, npN\n         if ( x(dspline_isw(i)) .lt. temp ) then\n            temp = x(dspline_isw(i))\n            bestP = i\n         endif\n      end do\n\n&quot;);
  4284        |     |     +--- fprintf(fp,&quot;      print *, 'best para = ', bestP, ' time = ', x(dspline_isw(bestP))\n\n&quot;);
  4285        |     |     |    
  4286        |     |     +--- //選択基準2用配列初期化部分
  4287        |     |     +--- fprintf(fp,&quot;      do i = 1, npN\n         select2(i,2) = i\n         select2(i,1) = 0\n      end do\n\n&quot;);
  4288        |     |     |    
  4289        |     |     +--- //変化率計算部分
  4290        |     |     +--- fprintf(fp,&quot;      do i = 2, npN - 1\n         select2(i,1) = dabs( x(dspline_isw(i-1)) - 2 * x(dspline_isw(i)) + x(dspline_isw(i+1)) )\n      end do\n\n&quot;);
  4291        |     |     |    
  4292        |     |     +--- //select2ソート部分
  4293        |     |     +--- fprintf(fp,&quot;      do i = 1, npN - 1\n         do j = npN, i + 1, -1\n            if ( select2(j-1,1) .lt. select2(j,1) ) then\n               temp = select2(j,1)\n               temp2 = select2(j,2)\n               select2(j,1) = select2(j-1,1)\n               select2(j,2) = select2(j-1,2)\n               select2(j-1,1) = temp\n               select2(j-1,2) = temp2\n            endif\n         end do\n      end do\n\n&quot;);
  4294        |     |     |    
  4295        |     |     +--- //推定したベストPがすでに標本点にあるなら選択基準2,ないなら選択基準1　選択する部分
  4296        |     |     +--- fprintf(fp,&quot;      do i = 1, npN\n         if ( bestP .eq. h(i) ) then\n            do j = 1, npN\n               do k = 1, npN\n                  if ( select2(j,2) .eq. h(k) ) then\n                     exit\n                  endif\n                  if ( k + 1 .eq. npN + 1 ) then\n                     nextP = select2(j,2)\n                     goto 111\n                  endif\n               end do\n            end do\n\n            exit\n         else\n            nextP = bestP\n         endif\n      end do\n\n111   print '( \&quot; nextP =\&quot;, I0, \&quot; bestP = \&quot;, I0, / )', nextP, bestP\n\n&quot;);
  4297        |     |     |    
  4298        |     |     +--- //prebestPに4点計算終了時のベストパラメタを代入する部分
  4299        |     |     +--- fprintf(fp,&quot;      prebestP = bestP\n\n&quot;);
  4300        |     |     |    
  4301        |     |     +--- //推定値をエクセルに書き込みする部分
  4302        |     |     +--- fprintf(fp,&quot;      do i = 1, nn\n         write( 11, * ) x(i)\n      end do\n      write( 11, '(A3,/)') 'end'\n\n&quot;);
  4303        |     |     |    
  4304        |     |     +--- fprintf(fp,&quot;      print '( /, \&quot;----------end 4 point----------\&quot;, / )'\n\n&quot;);
  4305        |     |     |    
  4306        |     |     +--- //--------4点後のdo文ここから--------
  4307        |     |     +--- fprintf(fp,&quot;      do l = kk, npN\n&quot;);
  4308        |     |     +--- fprintf(fp,&quot;         q = nextP\n&quot;);
  4309        |     |     +--- fprintf(fp,&quot;         q2 = dspline_isw(nextP)\n\n&quot;);
  4310        |     |     +--- fprintf(fp,&quot;         t1 = omp_get_wtime()\n&quot;);
  4311        |     |     |    
  4312        |     |     +--- //計算する関数に飛ぶ部分    基本的に既存部分の流用
              |     |     |  +----------------------------------------------------------------------------------+ 
  4313        |     |     +--+ if(MainF-&gt;EECntlF){     // -eectrlのフラグ(ON時は、コントロール部分を置き換え）  | 
              |     |     |  +--+-------------------------------------------------------------------------------+ 
  4314        |     |     |     +--- fprintf(fp,&quot;         iloop_inner = 0;\n&quot;);
  4315        |     |     |     +--- fprintf(fp,&quot;         while(OAT_Eecntl_Continue()){\n&quot;);
  4316        |     |     |     +--- s = &quot;            call &quot;+FuncName + &quot;(&quot;;
              |     |     |   +-+---+ 
  4317        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  4317        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  4318        |     |     |     +--- s = &quot;         call &quot;+FuncName + &quot;(&quot;;
              |     |     |   +-+---+ 
  4319        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------------------------------------------+ 
  4320        |     |     +--+ for(i = 0 ; i &lt; ArgValList-&gt;Count ; i++){  | 
              |     |     |  +--+-----------------------------------------+ 
              |     |     |     |  +------------------------------------+ 
  4321        |     |     |     +--+ if(ArgValList-&gt;Strings[i] == &quot;&quot;){  | 
              |     |     |     |  +--+---------------------------------+ 
              |     |     |     |     |  +------------+ 
  4322        |     |     |     |     +--+ continue;  | 
              |     |     |     |     |  +------------+ 
              |     |     |     |   +-+---+ 
  4323        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
  4324        |     |     |     +--- ValData = (TValData *)ArgValList-&gt;Objects[i];
  4325        |     |     |     +--- s += ValData-&gt;Str + &quot;, &quot;;
              |     |     |   +-+---+ 
  4326        |     |     |   |  }  | 
              |     |     |   +-----+ 
  4327        |     |     +--- s += &quot;q)&quot;;
  4328        |     |     +--- fprintf(fp,&quot;%s\n&quot;,s.c_str());
  4329        |     |     |    
  4330        |     |     +--- fprintf(fp,&quot;         t2 = omp_get_wtime()\n\n&quot;);
  4331        |     |     +--- fprintf(fp,&quot;         time = t2 - t1\n\n&quot;);
  4332        |     |     +--- fprintf(fp,&quot;         print '( /, \&quot;---para is \&quot;, I0, \&quot;, time is \&quot;, G14.7, \&quot;---\&quot;, / )', q, time\n\n&quot;);
  4333        |     |     +--- fprintf(fp,&quot;         h(kk) = q\n         DE(p,q2) = 1\n         DE(p,nn+1) = time\n\n&quot;);
  4334        |     |     |    
  4335        |     |     +--- //--------ギブンス変換do文ここから--------
  4336        |     |     +--- fprintf(fp,&quot;         do q2 = q2, nn\n\n            do i = 1, nn + 1\n               G(i,i) = 0\n            end do\n\n&quot;);
  4337        |     |     +--- fprintf(fp,&quot;            G(nn+1,nn+1) = 1\n&quot;);
  4338        |     |     |    
  4339        |     |     +--- //G用計算部分
  4340        |     |     +--- fprintf(fp,&quot;            radius = dsqrt( ( DE(q2,q2) ) * ( DE(q2,q2) ) + ( DE(p,q2) ) * ( DE(p,q2) ) )\n\n&quot;);
  4341        |     |     +--- fprintf(fp,&quot;            if ( radius .eq. 0 ) then\n               exit\n            endif\n\n&quot;);
  4342        |     |     +--- fprintf(fp,&quot;            cosine = DE(q2,q2) / radius\n            sine = DE(p,q2) / radius\n\n            G(p,p) = cosine\n            G(q2,q2) = cosine\n\n            G(q2,p) = sine\n            G(p,q2) = -1 * sine\n\n\n&quot;);
  4343        |     |     |    
  4344        |     |     +--- //R=G*DEギブンス変換部分
  4345        |     |     +--- fprintf(fp,&quot;            R(q2,q2) = R(q2,q2) + G(q2,q2) * DE(q2,q2)\n            R(q2,q2) = R(q2,q2) + G(q2,nn+1) * DE(nn+1,q2)\n\n&quot;);
  4346        |     |     +--- fprintf(fp,&quot;            if ( ( ( q2 + 1 ) .ne. nn + 1 ) .and. ( ( q2 + 1 ) .le. nn + 1 ) ) then\n               R(q2,q2+1) = R(q2,q2+1) + G(q2,q2) * DE(q2,q2+1)\n               R(q2,q2+1) = R(q2,q2+1) + G(q2,nn+1) * DE(nn+1,q2+1)\n            endif\n\n&quot;);
  4347        |     |     +--- fprintf(fp,&quot;            if ( ( ( q2 + 2 ) .ne. nn + 1 ) .and. ( ( q2 + 2 ) .le. nn + 1 ) ) then\n               R(q2,q2+2) = R(q2,q2+2) + G(q2,q2) * DE(q2,q2+2)\n               R(q2,q2+2) = R(q2,q2+2) + G(q2,nn+1) * DE(nn+1,q2+2)\n            endif\n\n&quot;);
  4348        |     |     +--- fprintf(fp,&quot;            R(q2,nn+1) = R(q2,nn+1) + G(q2,q2) * DE(q2,nn+1)\n            R(q2,nn+1) = R(q2,nn+1) + G(q2,nn+1) * DE(nn+1,nn+1)\n\n\n&quot;);
  4349        |     |     |    
  4350        |     |     +--- fprintf(fp,&quot;            R(nn+1,q2) = R(nn+1,q2) + G(nn+1,q2) * DE(q2,q2)\n            R(nn+1,q2) = R(nn+1,q2) + G(nn+1,nn+1) * DE(nn+1,q2)\n\n&quot;);
  4351        |     |     +--- fprintf(fp,&quot;            if ( ( ( q2 + 1 ) .ne. nn + 1 ) .and. ( ( q2 + 1 ) .le. nn + 1 ) ) then\n               R(nn+1,q2+1) = R(nn+1,q2+1) + G(nn+1,q2) * DE(q2,q2+1)\n               R(nn+1,q2+1) = R(nn+1,q2+1) + G(nn+1,nn+1) * DE(nn+1,q2+1)\n            endif\n\n&quot;);
  4352        |     |     +--- fprintf(fp,&quot;            if ( ( ( q2 + 2 ) .ne. nn + 1 ) .and. ( ( q2 + 2 ) .le. nn + 1 ) ) then\n               R(nn+1,q2+2) = R(nn+1,q2+2) + G(nn+1,q2) * DE(q2,q2+2)\n               R(nn+1,q2+2) = R(nn+1,q2+2) + G(nn+1,nn+1) * DE(nn+1,q2+2)\n            endif\n\n&quot;);
  4353        |     |     +--- fprintf(fp,&quot;            R(nn+1,nn+1) = R(nn+1,nn+1) + G(nn+1,q2) * DE(q2,nn+1)\n            R(nn+1,nn+1) = R(nn+1,nn+1) + G(nn+1,nn+1) * DE(nn+1,nn+1)\n\n\n&quot;);
  4354        |     |     |    
  4355        |     |     +--- fprintf(fp,&quot;            DE(q2,q2) = R(q2,q2)\n\n            if ( ( ( q2 + 1 ) .ne. nn + 1 ) .and. ( ( q2 + 1 ) .le. nn + 1 ) ) then\n               DE(q2,q2+1) = R(q2,q2+1)\n            endif\n\n            if ( ( ( q2 + 2 ) .ne. nn + 1 ) .and. ( ( q2 + 2 ) .le. nn + 1 ) ) then\n               DE(q2,q2+2) = R(q2,q2+2)\n            endif\n\n            DE(q2,nn+1) = R(q2,nn+1)\n\n\n&quot;);
  4356        |     |     +--- fprintf(fp,&quot;            DE(nn+1,q2) = R(nn+1,q2)\n\n            if ( ( ( q2 + 1 ) .ne. nn + 1 ) .and. ( ( q2 + 1 ) .le. nn + 1 ) ) then\n               DE(nn+1,q2+1) = R(nn+1,q2+1)\n            endif\n\n            if ( ( ( q2 + 2 ) .ne. nn + 1 ) .and. ( ( q2 + 2 ) .le. nn + 1 ) ) then\n               DE(nn+1,q2+2) = R(nn+1,q2+2)\n            endif\n\n            DE(nn+1,nn+1) = R(nn+1,nn+1)\n\n\n&quot;);
  4357        |     |     +--- fprintf(fp,&quot;            R(q2,q2) = 0\n\n            if ( ( ( q2 + 1 ) .ne. nn + 1 ) .and. ( ( q2 + 1 ) .le. nn + 1 ) ) then\n               R(q2,q2+1) = 0\n            endif\n\n            if ( ( ( q2 + 2 ) .ne. nn + 1 ) .and. ( ( q2 + 2 ) .le. nn + 1 ) ) then\n               R(q2,q2+2) = 0\n            endif\n\n            R(q2,nn+1) = 0\n\n\n&quot;);
  4358        |     |     +--- fprintf(fp,&quot;            R(nn+1,q2) = 0\n\n            if ( ( ( q2 + 1 ) .ne. nn + 1 ) .and. ( ( q2 + 1 ) .le. nn + 1 ) ) then\n               R(nn+1,q2+1) = 0\n            endif\n\n            if ( ( ( q2 + 2 ) .ne. nn + 1 ) .and. ( ( q2 + 2 ) .le. nn + 1 ) ) then\n               R(nn+1,q2+2) = 0\n            endif\n\n            R(nn+1,nn+1) = 0\n\n&quot;);
  4359        |     |     |    
  4360        |     |     +--- fprintf(fp,&quot;         end do\n\n&quot;);
  4361        |     |     +--- //------ギブンス変換do文部分ここまで------
  4362        |     |     |                                                   
  4363        |     |     |    //ギブンス変換後,推定値計算,次の標本点決定部分 
  4364        |     |     |    //推定値代入初期化部分                         
  4365        |     |     +--- fprintf(fp,&quot;         do i = 1, nn\n            x(i) = DE(i,nn+1)\n         end do\n\n&quot;);
  4366        |     |     |    
  4367        |     |     +--- //後退代入で推定値計算部分
  4368        |     |     +--- fprintf(fp,&quot;         do i = nn, 1, -1\n            do j = i + 1, nn\n               x(i) = x(i) - DE(i,j) * x(j)\n            end do\n\n            x(i) = x(i) / DE(i,i)\n         end do\n\n&quot;);
  4369        |     |     |    
  4370        |     |     +--- //デバッグ用，推定値表示部分
  4371        |     |     +--- fprintf(fp,&quot;         if ( DEBUG .gt. 0 ) then\n            print '( /, \&quot;estimation\&quot; )'\n\n            do i = 1, nn\n               print *, '[', i, ']', x(i)\n            end do\n\n            print *, ''\n         endif\n\n&quot;);
  4372        |     |     |    
  4373        |     |     +--- //推定値が最小となる番号をベストパラメタに設定する部分
  4374        |     |     +--- fprintf(fp,&quot;         temp = x(1)\n         bestP = 1\n\n         do i = 1, npN\n            if ( x(dspline_isw(i)) .lt. temp ) then\n               temp = x(dspline_isw(i))\n               bestP = i\n            endif\n         end do\n\n&quot;);
  4375        |     |     +--- fprintf(fp,&quot;         print *, 'best para = ', bestP, ' time = ', x(dspline_isw(bestP))\n\n&quot;);
  4376        |     |     |    
  4377        |     |     +--- //選択基準2用配列初期化部分
  4378        |     |     +--- fprintf(fp,&quot;         do i = 1, npN\n            select2(i,2) = i\n            select2(i,1) = 0\n         end do\n\n&quot;);
  4379        |     |     |    
  4380        |     |     +--- //変化率計算部分
  4381        |     |     +--- fprintf(fp,&quot;         do i = 2, npN - 1\n            select2(i,1) = dabs( x(dspline_isw(i-1)) - 2 * x(dspline_isw(i)) + x(dspline_isw(i+1)) )\n         end do\n\n&quot;);
  4382        |     |     |    
  4383        |     |     +--- //select2ソート部分
  4384        |     |     +--- fprintf(fp,&quot;         do i = 1, npN - 1\n            do j = npN, i + 1, -1\n               if ( select2(j-1,1) .lt. select2(j,1) ) then\n                  temp = select2(j,1)\n                  temp2 = select2(j,2)\n                  select2(j,1) = select2(j-1,1)\n                  select2(j,2) = select2(j-1,2)\n                  select2(j-1,1) = temp\n                  select2(j-1,2) = temp2\n               endif\n            end do\n         end do\n\n&quot;);
  4385        |     |     |    
  4386        |     |     +--- //推定したベストPがすでに標本点にあるなら選択基準2,ないなら選択基準1　選択する部分
  4387        |     |     +--- fprintf(fp,&quot;         do i = 1, npN\n            if ( bestP .eq. h(i) ) then\n               do j = 1, npN\n                  do k = 1, npN\n                     if ( select2(j,2) .eq. h(k) ) then\n                        exit\n                     endif\n                     if ( k + 1 .eq. npN + 1 ) then\n                        nextP = select2(j,2)\n                        goto 222\n                     endif\n                  end do\n               end do\n\n               exit\n            else\n               nextP = bestP\n            endif\n         end do\n\n222      print '( \&quot; nextP = \&quot;, I0, \&quot; bestP = \&quot;, I0, / )', nextP, bestP\n\n&quot;);
  4388        |     |     |    
  4389        |     |     +--- //前回推定したパラメタと同じならカウント+1,違うならカウントを1に初期化する部分
  4390        |     |     +--- fprintf(fp,&quot;         if ( prebestP .eq. bestP ) then\n            count = count + 1\n         else\n            count = 1\n         endif\n\n&quot;);
  4391        |     |     |    
  4392        |     |     +--- //今回推定したベストパラメタをprebestPに設定
  4393        |     |     +--- fprintf(fp,&quot;         prebestP = bestP\n\n&quot;);
  4394        |     |     |    
  4395        |     |     +--- //推定値をエクセルに書き込みする部分
  4396        |     |     +--- fprintf(fp,&quot;      do i = 1, nn\n         write( 11, * ) x(i)\n      end do\n      write( 11, '(A3,/)') 'end'\n\n&quot;);
  4397        |     |     |    
  4398        |     |     +--- fprintf(fp,&quot;         kk = kk + 1\n\n&quot;);
  4399        |     |     |    
  4400        |     |     +--- fprintf(fp,&quot;         print *, 'count = ', count\n&quot;);
  4401        |     |     |    
  4402        |     |     +--- fprintf(fp,&quot;         if ( count .eq. 3 ) then\n            print *, 'count end'\n            print *, 'usedParaNums = ', kk - 1\n            exit\n         endif\n\n&quot;);
  4403        |     |     |    
  4404        |     |     +--- fprintf(fp,&quot;      end do\n\n&quot;);
  4405        |     |     +--- //--------4点後のdo文ここまで--------
  4406        |     |     |                                           
  4407        |     |     |    //戻り値の設定                         
  4408        |     |     +--- fprintf(fp,&quot;      dspgiv%s%s = bestP\n\n&quot;, TuneGroupName.c_str(), Name.c_str());
  4409        |     |     |    
  4410        |     |     +--- fprintf(fp,&quot;end function dspgiv%s%s\n\n\n&quot;, TuneGroupName.c_str(), Name.c_str());
              |     |   +-+---+ 
  4411        |     |   |  }  | 
              |     |   +-----+ 
  4412        |     +--- //1次元用d-Spline（インストール時自動チューニング用）ここまで
  4413        |     |                                                                   
  4414        |     |                                                                   
  4415        |     |    //1次元用d-Spline（実行時自動チューニング用）                  
              |     |  +------------------------------+ 
  4416        |     +--+ if(TuneGroup == tgDynamic){  | 
              |     |  +--+---------------------------+ 
  4417        |     |     +--- int CaseNums = (int)( (variedToValue[0] - variedFromValue[0]) / variedStepValue[0] + 1 );
  4418        |     |     |    
  4419        |     |     +--- //関数名部分
  4420        |     |     +--- fprintf(fp,&quot;subroutine dynamicDspline%s%s( npN, isw, Dswitch, time )\n&quot;,TuneGroupName.c_str(), Name.c_str());
  4421        |     |     |    
  4422        |     |     +--- //仮引数宣言部分
  4423        |     |     +--- fprintf(fp,&quot;      integer npN, isw, Dswitch\n&quot;);
  4424        |     |     +--- fprintf(fp,&quot;      double precision time\n\n&quot;);
  4425        |     |     |    
  4426        |     |     +--- //変数宣言部分
  4427        |     |     +--- fprintf(fp,&quot;      integer :: DEBUG = 1\n&quot;);
  4428        |     |     +--- fprintf(fp,&quot;      integer nn\n&quot;);
  4429        |     |     +--- fprintf(fp,&quot;      double precision, save :: DE(%d+1,%d+1)\n&quot;, CaseNums * 3 - 2, CaseNums * 3 - 2 );
  4430        |     |     +--- fprintf(fp,&quot;      double precision, save :: R(%d+1,%d+1)\n&quot;, CaseNums * 3 - 2, CaseNums * 3 - 2);
  4431        |     |     +--- fprintf(fp,&quot;      double precision, save :: G(%d+1,%d+1)\n&quot;, CaseNums * 3 - 2, CaseNums * 3 - 2);
  4432        |     |     +--- fprintf(fp,&quot;      double precision radius, cosine, sine\n&quot;);
  4433        |     |     +--- fprintf(fp,&quot;      integer p, q, q2\n&quot;);
  4434        |     |     +--- fprintf(fp,&quot;      integer, save :: count1 = 1\n&quot;);
  4435        |     |     +--- fprintf(fp,&quot;      integer, save :: count2 = 0\n&quot;);
  4436        |     |     +--- fprintf(fp,&quot;      double precision, allocatable, dimension(:) :: x\n&quot;);
  4437        |     |     +--- fprintf(fp,&quot;      double precision temp\n&quot;);
  4438        |     |     +--- fprintf(fp,&quot;      integer temp2\n&quot;);
  4439        |     |     +--- fprintf(fp,&quot;      integer bestP\n&quot;);
  4440        |     |     +--- fprintf(fp,&quot;      integer nextP\n&quot;);
  4441        |     |     +--- fprintf(fp,&quot;      integer, save :: prebestP = 0\n&quot;);
  4442        |     |     +--- fprintf(fp,&quot;      double precision select2(npN,2)\n&quot;);
  4443        |     |     +--- fprintf(fp,&quot;      integer, save :: h(%d+1)\n&quot;, CaseNums);
  4444        |     |     +--- fprintf(fp,&quot;      integer, save :: kk = 1\n&quot;);
  4445        |     |     +--- fprintf(fp,&quot;      double precision, parameter :: alfa = 0.1\n&quot;);
  4446        |     |     +--- fprintf(fp,&quot;      integer, save :: Fcount = 0\n&quot;);
  4447        |     |     +--- fprintf(fp,&quot;      integer i, j, k\n\n&quot;);
  4448        |     |     |    
  4449        |     |     +--- fprintf(fp,&quot;      nn = npN * 3 - 2\n&quot;);
  4450        |     |     +--- fprintf(fp,&quot;      allocate(x(nn))\n&quot;);
  4451        |     |     +--- fprintf(fp,&quot;      bestP = 0\n\n&quot;);
  4452        |     |     |    
  4453        |     |     +--- //エクセル書き込み用部分
  4454        |     |     +--- fprintf(fp,&quot;      open( 11, file = 'd-SplineData.csv' )\n\n&quot;);
  4455        |     |     |    
  4456        |     |     +--- //パラメタ探索後の終了部分
  4457        |     |     +--- fprintf(fp,&quot;      if ( count2 .eq. 1 ) then\n         return\n      endif\n\n&quot;);
  4458        |     |     +--- fprintf(fp,&quot;      if ( count1 .eq. 3 ) then\n         print *, 'count1=3 end'\n         print *, 'usedParaNums = ', Fcount-1\n         isw = prebestP\n         count2 = 1\n         return\n      endif\n\n&quot;);
  4459        |     |     |    
  4460        |     |     +--- //h初期化部分
  4461        |     |     +--- fprintf(fp,&quot;      if ( Fcount .eq. 0 ) then\n         do i = 1, npN + 1\n               h(i) = npN + 1\n         end do\n      endif\n\n&quot;);
  4462        |     |     +--- fprintf(fp,&quot;      p = nn + 1\n\n&quot;);
  4463        |     |     |    
  4464        |     |     +--- //Dswitch1部分ここから--------------------
  4465        |     |     +--- fprintf(fp,&quot;      if ( Dswitch .eq. 1 ) then\n\n&quot;);
  4466        |     |     |    
  4467        |     |     +--- //switch部分ここから
  4468        |     |     +--- fprintf(fp,&quot;         select case (Fcount)\n&quot;);
  4469        |     |     +--- fprintf(fp,&quot;            case (0)\n               isw = 1\n            case (1)\n               isw = npN\n            case (2)\n               isw = ( 2 + npN ) / 3\n            case (3)\n               isw = ( 1 + 2 * npN ) / 3\n&quot;);
  4470        |     |     |    
  4471        |     |     +--- //default部分
  4472        |     |     +--- fprintf(fp,&quot;            case default\n\n&quot;);
  4473        |     |     |    
  4474        |     |     +--- //推定値初期化部分
  4475        |     |     +--- fprintf(fp,&quot;               do i = 1, nn\n                  x(i) = DE(i,nn+1)\n               end do\n\n&quot;);
  4476        |     |     |    
  4477        |     |     +--- //後退代入計算部分
  4478        |     |     +--- fprintf(fp,&quot;               do i = nn, 1, -1\n                  do j = i + 1, nn\n                     x(i) = x(i) - DE(i,j) * x(j)\n                  end do\n\n                  x(i) = x(i) / DE(i,i)\n               end do\n\n&quot;);
  4479        |     |     |    
  4480        |     |     +--- //デバッグ用推定値表示部分
  4481        |     |     +--- fprintf(fp,&quot;               if ( DEBUG .gt. 0 ) then\n                  print '( /, \&quot;estimation\&quot; )'\n\n                  do i = 1, npN\n                     j = 3 * i - 2\n                     print *, '[', i, ']', x(j)\n                  end do\n\n                  print *, ''\n               endif\n\n&quot;);
  4482        |     |     |    
  4483        |     |     +--- //最小推定値探索部分
  4484        |     |     +--- fprintf(fp,&quot;               temp = x(1)\n               bestP = 1\n\n               do i = 1, npN\n                  j = 3 * i - 2\n\n                  if ( x(j) .lt. temp ) then\n                     temp = x(j)\n                     bestP = i\n                  endif\n               end do\n\n&quot;);
  4485        |     |     |    
  4486        |     |     +--- //ベストパラメタ表示部分
  4487        |     |     |                             
  4488        |     |     +--- fprintf(fp,&quot;               print *, 'best para = ', bestP, ' time = ', x(bestP*3)\n\n&quot;);
  4489        |     |     |    
  4490        |     |     +--- //選択基準2初期化部分
  4491        |     |     +--- fprintf(fp,&quot;               do i = 1, npN\n                  select2(i,2) = i\n                  select2(i,1) = 0\n               end do\n\n&quot;);
  4492        |     |     |    
  4493        |     |     +--- //変化率計算部分
  4494        |     |     +--- fprintf(fp,&quot;               do i = 2, npN - 1\n                  j = 3 * i - 2\n\n                  select2(i,1) = dabs( x(j-3) - 2 * x(j) + x(j+3) )\n               end do\n\n&quot;);
  4495        |     |     |    
  4496        |     |     +--- //select2ソート部分
  4497        |     |     +--- fprintf(fp,&quot;               do i = 1, npN - 1\n                  do j = npN, i + 1, -1\n                     if ( select2(j-1,1) .lt. select2(j,1) ) then\n                        temp = select2(j,1)\n                        temp2 = select2(j,2)\n                        select2(j,1) = select2(j-1,1)\n                        select2(j,2) = select2(j-1,2)\n                        select2(j-1,1) = temp\n                        select2(j-1,2) = temp2\n                     endif\n                  end do\n               end do\n\n&quot;);
  4498        |     |     |    
  4499        |     |     +--- //選択基準1or2選択部分
  4500        |     |     +--- fprintf(fp,&quot;               do i = 1, npN\n                  if ( bestP .eq. h(i) ) then\n                     do j = 1, npN\n                        do k = 1, npN\n                           if ( select2(j,2) .eq. h(k) ) then\n                              exit\n                           endif\n                           if ( k + 1 .eq. npN + 1 ) then\n                              nextP = select2(j,2)\n                              goto 111\n                           endif\n                        end do\n                     end do\n\n                     exit\n                  else\n                     nextP = bestP\n                  endif\n               end do\n\n&quot;);
  4501        |     |     |    
  4502        |     |     +--- //ベストパラメタと次のパラメタを表示
  4503        |     |     +--- fprintf(fp,&quot;111               print '( \&quot; nextP = \&quot;, I0, \&quot; bestP = \&quot;, I0, / )', nextP, bestP\n\n&quot;);
  4504        |     |     |    
  4505        |     |     +--- //iswに次に使うパラメタをセットする部分
  4506        |     |     +--- fprintf(fp,&quot;               isw = nextP\n\n&quot;);
  4507        |     |     |    
  4508        |     |     +--- //3回カウント用部分
  4509        |     |     +--- fprintf(fp,&quot;               if ( prebestP .eq. bestP ) then\n                  count1 = count1 + 1\n               else\n                  count1 = 1\n               endif\n\n&quot;);
  4510        |     |     |    
  4511        |     |     +--- //default部分ここまで
  4512        |     |     +--- fprintf(fp,&quot;               prebestP = bestP\n\n&quot;);
  4513        |     |     |    
  4514        |     |     +--- //推定値をエクセルに書き込みする部分
  4515        |     |     +--- fprintf(fp,&quot;               do i = 1, nn\n                  write( 11, * ) x(i)\n               end do\n&quot;);
  4516        |     |     +--- fprintf(fp,&quot;               write( 11, '(A3,/)' ) 'end'\n\n&quot;);
  4517        |     |     |    
  4518        |     |     +--- //switchここまで
  4519        |     |     +--- fprintf(fp,&quot;         end select\n\n         Fcount = Fcount + 1\n\n&quot;);
  4520        |     |     |    
  4521        |     |     +--- //Dswitch1ここまで------------
  4522        |     |     +--- fprintf(fp,&quot;      endif\n\n&quot;);
  4523        |     |     |    
  4524        |     |     +--- //Dswitch1ここから----------------
  4525        |     |     +--- fprintf(fp,&quot;      if ( Dswitch .eq. 2 ) then\n\n&quot;);
  4526        |     |     |    
  4527        |     |     +--- //DE初期化部分
  4528        |     |     +--- fprintf(fp,&quot;         if ( Fcount .eq. 1 ) then\n&quot;);
  4529        |     |     +--- fprintf(fp,&quot;            do i = 1, nn + 1\n               do j = 1, nn + 1\n                  DE(i,j) = 0\n                  R(i,j) = 0\n               end do\n            end do\n\n&quot;);
  4530        |     |     +--- fprintf(fp,&quot;            do i = 1, nn - 2\n               DE(i,i) = 1 * alfa\n               DE(i,i+1) = -2 * alfa\n               DE(i,i+2) = 1*alfa\n            end do\n         endif\n\n&quot;);
  4531        |     |     |    
  4532        |     |     +--- //標本点とその実測値のセット部分
  4533        |     |     +--- fprintf(fp,&quot;         q = isw\n         q2 = 3 * q - 2\n         h(kk) = q\n\n&quot;);
  4534        |     |     +--- fprintf(fp,&quot;         DE(p,q2) = 1\n         DE(p,nn+1) = time\n\n&quot;);
  4535        |     |     |    
  4536        |     |     +--- //ギブンス変換ループ部分--------------------
  4537        |     |     +--- fprintf(fp,&quot;         do q2 = q2, nn\n\n&quot;);
  4538        |     |     |    
  4539        |     |     +--- //G初期化
  4540        |     |     +--- fprintf(fp,&quot;            do i = 1, nn + 1\n               G(i,i) = 0\n            end do\n\n&quot;);
  4541        |     |     +--- fprintf(fp,&quot;            G(nn+1,nn+1) = 1\n&quot;);
  4542        |     |     |    
  4543        |     |     +--- //G用計算部分
  4544        |     |     +--- fprintf(fp,&quot;            radius = dsqrt( ( DE(q2,q2) ) * ( DE(q2,q2) ) + ( DE(p,q2) ) * ( DE(p,q2) ) )\n\n&quot;);
  4545        |     |     +--- fprintf(fp,&quot;            if ( radius .eq. 0 ) then\n               exit\n            endif\n\n&quot;);
  4546        |     |     +--- fprintf(fp,&quot;            cosine = DE(q2,q2) / radius\n            sine = DE(p,q2) / radius\n\n&quot;);
  4547        |     |     +--- fprintf(fp,&quot;            G(p,p) = cosine\n            G(q2,q2) = cosine\n\n            G(q2,p) = sine\n            G(p,q2) = -1*sine\n\n&quot;);
  4548        |     |     |    
  4549        |     |     +--- //R=G*DEギブンス変換部分
  4550        |     |     +--- fprintf(fp,&quot;            R(q2,q2) = R(q2,q2) + G(q2,q2) * DE(q2,q2)\n            R(q2,q2) = R(q2,q2) + G(q2,nn+1) * DE(nn+1,q2)\n\n&quot;);
  4551        |     |     +--- fprintf(fp,&quot;            if ( ( ( q2 + 1 ) .ne. nn+1 ) .and. ( ( q2 + 1 ) .le. nn+1 ) ) then\n               R(q2,q2+1) = R(q2,q2+1) + G(q2,q2) * DE(q2,q2+1)\n               R(q2,q2+1) = R(q2,q2+1) + G(q2,nn+1) * DE(nn+1,q2+1)\n            endif\n\n&quot;);
  4552        |     |     +--- fprintf(fp,&quot;            if ( ( ( q2 + 2 ) .ne. nn+1 ) .and. ( ( q2 + 2 ) .le. nn+1 ) ) then\n               R(q2,q2+2) = R(q2,q2+2) + G(q2,q2) * DE(q2,q2+2)\n               R(q2,q2+2) = R(q2,q2+2) + G(q2,nn+1) * DE(nn+1,q2+2)\n            endif\n\n&quot;);
  4553        |     |     +--- fprintf(fp,&quot;            R(q2,nn+1) = R(q2,nn+1) + G(q2,q2) * DE(q2,nn+1)\n            R(q2,nn+1) = R(q2,nn+1) + G(q2,nn+1) * DE(nn+1,nn+1)\n\n&quot;);
  4554        |     |     +--- fprintf(fp,&quot;            R(nn+1,q2) = R(nn+1,q2) + G(nn+1,q2) * DE(q2,q2)\n            R(nn+1,q2) = R(nn+1,q2) + G(nn+1,nn+1) * DE(nn+1,q2)\n\n&quot;);
  4555        |     |     +--- fprintf(fp,&quot;            if ( ( ( q2 + 1 ) .ne. nn+1 ) .and. ( ( q2 + 1 ) .le. nn+1 ) ) then\n               R(nn+1,q2+1) = R(nn+1,q2+1) + G(nn+1,q2) * DE(q2,q2+1)\n               R(nn+1,q2+1) = R(nn+1,q2+1) + G(nn+1,nn+1) * DE(nn+1,q2+1)\n            endif\n\n&quot;);
  4556        |     |     +--- fprintf(fp,&quot;            if ( ( ( q2 + 2 ) .ne. nn+1 ) .and. ( ( q2 + 2 ) .le. nn+1 ) ) then\n               R(nn+1,q2+2) = R(nn+1,q2+2) + G(nn+1,q2) * DE(q2,q2+2)\n               R(nn+1,q2+2) = R(nn+1,q2+2) + G(nn+1,nn+1) * DE(nn+1,q2+2)\n            endif\n\n&quot;);
  4557        |     |     +--- fprintf(fp,&quot;            R(nn+1,nn+1) = R(nn+1,nn+1) + G(nn+1,q2) * DE(q2,nn+1)\n            R(nn+1,nn+1) = R(nn+1,nn+1) + G(nn+1,nn+1) * DE(nn+1,nn+1)\n\n&quot;);
  4558        |     |     +--- fprintf(fp,&quot;            DE(q2,q2) = R(q2,q2)\n\n            if ( ( ( q2 + 1 ) .ne. nn+1 ) .and. ( ( q2 + 1 ) .le. nn+1 ) ) then\n               DE(q2,q2+1) = R(q2,q2+1)\n            endif\n\n            if ( ( ( q2 + 2 ) .ne. nn+1 ) .and. ( ( q2 + 2 ) .le. nn+1 ) ) then\n               DE(q2,q2+2) = R(q2,q2+2)\n            endif\n\n            DE(q2,nn+1) = R(q2,nn+1)\n\n&quot;);
  4559        |     |     +--- fprintf(fp,&quot;            DE(nn+1,q2) = R(nn+1,q2)\n\n            if ( ( ( q2 + 1 ) .ne. nn+1 ) .and. ( ( q2 + 2 ) .le. nn+1 ) ) then\n               DE(nn+1,q2+1) = R(nn+1,q2+1)\n            endif\n\n            if ( ( ( q2 + 2 ) .ne. nn+1 ) .and. ( ( q2 + 2 ) .le. nn+1 ) ) then\n               DE(nn+1,q2+2) = R(nn+1,q2+2)\n            endif\n\n            DE(nn+1,nn+1) = R(nn+1,nn+1)\n\n&quot;);
  4560        |     |     +--- fprintf(fp,&quot;            R(q2,q2) = 0\n\n            if ( ( ( q2 + 1 ) .ne. nn+1 ) .and. ( ( q2 + 1 ) .le. nn+1 ) ) then\n               R(q2,q2+1) = 0\n            endif\n\n            if ( ( ( q2 + 2 ) .ne. nn+1 ) .and. ( ( q2 + 2 ) .le. nn+1 ) ) then\n               R(q2,q2+2) = 0\n            endif\n\n            R(q2,nn+1) = 0\n\n            R(nn+1,q2) = 0\n\n            if ( ( ( q2 + 1 ) .ne. nn+1 ) .and. ( ( q2 + 1 ) .le. nn+1 ) ) then\n               R(nn+1,q2+1) = 0\n            endif\n\n            if ( ( ( q2 + 2 ) .ne. nn+1 ) .and. ( ( q2 + 2 ) .le. nn+1 ) ) then\n               R(nn+1,q2+2) = 0\n            endif\n\n            R(nn+1,nn+1) = 0\n         end do\n\n&quot;);
  4561        |     |     |    
  4562        |     |     +--- //ギブンス変換ループここまで------------------
  4563        |     |     |                                                   
  4564        |     |     |    //Dswitch2ここまで                             
  4565        |     |     +--- fprintf(fp,&quot;         kk=kk+1\n\n      endif\n\n&quot;);
  4566        |     |     |    
  4567        |     |     +--- //関数ここまで
  4568        |     |     +--- fprintf(fp,&quot;      return\n\nend subroutine dynamicDspline%s%s\n\n&quot;, TuneGroupName.c_str(), Name.c_str() );
              |     |   +-+---+ 
  4569        |     |   |  }  | 
              |     |   +-----+ 
  4570        |     +--- //1次元用d-Spline（実行時自動チューニング用）ここまで
              |   +-+---+ 
  4571        |   |  }  | 
              |   +-----+ 
  4572        +--- //1次元用d-Spline　ここまで
  4573        |                                 
  4574        |                                 
  4575        |    //2次元用d-Spline            
              |  +--------------------------+ 
  4576        +--+ if(FittingDspline == 2){ | 
              |  +--+-----------------------+ 
  4577        |     +--- //2次元用d-Spline（インストール時自動チューニング用）
              |     |  +------------------------------+ 
  4578        |     +--+ if(TuneGroup == tgInstall){  | 
              |     |  +--+---------------------------+ 
  4579        |     |     +--- int CaseNums[2];
  4580        |     |     +--- CaseNums[0] = (int)( (variedToValue[0] - variedFromValue[0]) / variedStepValue[0] + 1 );
  4581        |     |     +--- CaseNums[1] = (int)( (variedToValue[1] - variedFromValue[1]) / variedStepValue[1] + 1 );
  4582        |     |     +--- int nnn = (3*CaseNums[0]-2)*(3*CaseNums[1]-2);
  4583        |     |     |    
  4584        |     |     +--- //関数名部分
  4585        |     |     +--- fprintf(fp,&quot;function dsp2giv%s%s( npN, para1st, para2nd&quot;, TuneGroupName.c_str(), Name.c_str());
  4586        |     |     |    
  4587        |     |     +--- //ここから流用　変数名出力のため------
  4588        |     |     |                                           
              |     |     |  +----------------------------------------+ 
  4589        |     |     +--+ if(MainF-&gt;Call_ATExec_Script == NULL){ | 
              |     |     |  +--+-------------------------------------+ 
  4590        |     |     |     +--- TScript *Script = new TScript(MainF-&gt;TokenList,0,NULL,ValDataList);
  4591        |     |     |     +--- ArgStr = Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);
  4592        |     |     |     +--- fprintf(fp,&quot;%s&quot;,ArgStr.c_str());
  4593        |     |     |     +--- delete Script;
              |     |     |   +-+---+ 
  4594        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  4594        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  4595        |     |     |     +--- ArgStr = MainF-&gt;Call_ATExec_Script-&gt;GetATExecArgStr(false,&quot;&quot;,&quot;&quot;);
  4596        |     |     |     +--- fprintf(fp,&quot;%s&quot;,ArgStr.c_str());
              |     |     |   +-+---+ 
  4597        |     |     |   |  }  | 
              |     |     |   +-----+ 
  4598        |     |     |    
  4599        |     |     +--- //ここまで流用　変数名出力用------
  4600        |     |     +--- fprintf(fp,&quot;)\n&quot;);
  4601        |     |     |    
  4602        |     |     +--- //use文の宣言
  4603        |     |     +--- fprintf(fp,&quot;      use omp_lib\n&quot;);
  4604        |     |     |    
  4605        |     |     +--- //implicit noneの宣言
  4606        |     |     +--- fprintf(fp,&quot;      implicit none\n&quot;);
  4607        |     |     |    
  4608        |     |     +--- //仮引数宣言部分
  4609        |     |     +--- fprintf(fp,&quot;      integer npN\n&quot;);
  4610        |     |     +--- fprintf(fp,&quot;      integer para1st, para2nd\n&quot;);
  4611        |     |     |    
  4612        |     |     +--- //ここから流用　変数名出力のため------
  4613        |     |     |                                           
              |     |     |  +----------------------------------------+ 
  4614        |     |     +--+ if(MainF-&gt;Call_ATExec_Script == NULL){ | 
              |     |     |  +--+-------------------------------------+ 
  4615        |     |     |     +--- TScript *Script = new TScript(MainF-&gt;TokenList,0,NULL,ValDataList);
  4616        |     |     |     +--- ArgStr = Script-&gt;GetATExecArgStr(true,&quot;&quot;,&quot;&quot;);
  4617        |     |     |     +--- fprintf(fp,&quot;%s&quot;,ArgStr.c_str());
  4618        |     |     |     +--- delete Script;
              |     |     |   +-+---+ 
  4619        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  4619        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  4620        |     |     |     +--- ArgStr = MainF-&gt;Call_ATExec_Script-&gt;GetATExecArgStr(true,&quot;&quot;,&quot;&quot;);
  4621        |     |     |     +--- fprintf(fp,&quot;%s&quot;,ArgStr.c_str());
              |     |     |   +-+---+ 
  4622        |     |     |   |  }  | 
              |     |     |   +-----+ 
  4623        |     |     |    
  4624        |     |     +--- //ここまで流用　変数名出力用------
  4625        |     |     |                                       
  4626        |     |     +--- fprintf(fp,&quot;      integer :: dsp2giv%s%s\n&quot;, TuneGroupName.c_str(), Name.c_str());
  4627        |     |     +--- fprintf(fp,&quot;      integer :: DEBUG = 1\n&quot;);
  4628        |     |     +--- fprintf(fp,&quot;      integer p3_1st, p3_2nd, p3_2nd_2\n&quot;);
  4629        |     |     +--- fprintf(fp,&quot;      integer nn\n&quot;);
  4630        |     |     +--- fprintf(fp,&quot;      double precision DE(%d+1,%d+1)\n&quot;, nnn, nnn);
  4631        |     |     +--- fprintf(fp,&quot;      double precision R(%d+1,%d+1)\n&quot;, nnn, nnn);
  4632        |     |     +--- fprintf(fp,&quot;      double precision radius, cosine, sine\n&quot;);
  4633        |     |     +--- fprintf(fp,&quot;      integer p, q, q2\n&quot;);
  4634        |     |     +--- fprintf(fp,&quot;      double precision time\n&quot;);
  4635        |     |     +--- fprintf(fp,&quot;      integer count\n&quot;);
  4636        |     |     +--- fprintf(fp,&quot;      double precision, allocatable, dimension(:) :: x\n&quot;);
  4637        |     |     +--- fprintf(fp,&quot;      double precision temp\n&quot;);
  4638        |     |     +--- fprintf(fp,&quot;      integer temp2, bestP, nextP, prebestP\n&quot;);
  4639        |     |     +--- fprintf(fp,&quot;      double precision select2(npN,2)\n&quot;);
  4640        |     |     +--- fprintf(fp,&quot;      integer h(npN)\n&quot;);
  4641        |     |     +--- fprintf(fp,&quot;      integer dspline_isw(npN)\n&quot;);
  4642        |     |     +--- fprintf(fp,&quot;      integer kk\n&quot;);
  4643        |     |     +--- fprintf(fp,&quot;      double precision, parameter :: alfa = 0.1\n&quot;);
  4644        |     |     +--- fprintf(fp,&quot;      double precision t1, t2\n&quot;);
  4645        |     |     +--- fprintf(fp,&quot;      integer F2(16)\n&quot;);
  4646        |     |     +--- fprintf(fp,&quot;      integer i, j, k, l, i4\n\n&quot;);
  4647        |     |     |    
  4648        |     |     +--- fprintf(fp,&quot;      p3_1st = para1st * 3\n&quot;);
  4649        |     |     +--- fprintf(fp,&quot;      p3_2nd = para2nd * 3\n&quot;);
  4650        |     |     +--- fprintf(fp,&quot;      p3_2nd_2 = p3_2nd - 2\n&quot;);
  4651        |     |     +--- fprintf(fp,&quot;      nn = ( p3_1st - 2 ) * p3_2nd_2\n&quot;);
  4652        |     |     +--- fprintf(fp,&quot;      count = 1\n&quot;);
  4653        |     |     +--- fprintf(fp,&quot;      bestP = 0\n&quot;);
  4654        |     |     +--- fprintf(fp,&quot;      kk = 1\n\n&quot;);
  4655        |     |     |    
  4656        |     |     +--- fprintf(fp,&quot;      allocate(x(nn))\n\n&quot;);
  4657        |     |     |    
  4658        |     |     +--- //エクセル書き込み用部分
  4659        |     |     +--- fprintf(fp,&quot;      open( 11, file = 'd-SplineData.csv' )\n\n&quot;);
  4660        |     |     |    
  4661        |     |     +--- //DE初期化部分
  4662        |     |     +--- fprintf(fp,&quot;      do i = 1, nn + 1\n         do j = 1, nn + 1\n            DE(i,j) = 0\n            R(i,j) = 0\n         end do\n      end do\n\n&quot;);
  4663        |     |     |    
  4664        |     |     +--- //DE 1,-2,1   1,1,-4,1,1 セット部分
  4665        |     |     +--- fprintf(fp,&quot;      j = 1\n\n&quot;);
  4666        |     |     +--- fprintf(fp,&quot;      do i = 1, nn - 4\n         if ( i .le. p3_2nd_2 - 2 ) then\n            DE(i,i) = 1 * alfa\n            DE(i,i+1) = -2 * alfa\n            DE(i,i+2) = 1 * alfa\n&quot;);
  4667        |     |     +--- fprintf(fp,&quot;         else if ( ( nn - p3_2nd ) .lt. i ) then\n            DE(i,i+2) = 1 * alfa\n            DE(i,i+3) = -2 * alfa\n            DE(i,i+4) = 1 * alfa\n&quot;);
  4668        |     |     +--- fprintf(fp,&quot;         else\n            if ( ( MOD(i+1,p3_2nd_2) .eq. 0 ) .or. ( MOD(i+2,p3_2nd_2) .eq. 0 ) ) then\n               DE(i,j) = 1 * alfa\n               DE(i,j+p3_2nd_2) = -2 * alfa\n               DE(i,j+2*p3_2nd_2) = 1 * alfa\n&quot;);
  4669        |     |     +--- fprintf(fp,&quot;            else\n               DE(i,j) = 1 * alfa\n               DE(i,j+p3_2nd_2-1) = 1 * alfa\n               DE(i,j+p3_2nd_2) = -4 * alfa\n               DE(i,j+p3_2nd_2+1) = 1 * alfa\n               DE(i,j+2*p3_2nd_2) = 1 * alfa\n            endif\n\n&quot;);
  4670        |     |     +--- fprintf(fp,&quot;            j = j + 1\n         endif\n      end do\n\n&quot;);
  4671        |     |     |    
  4672        |     |     +--- /*DEをあらかじめ上三角行列に整形*/
  4673        |     |     +--- fprintf(fp,&quot;      q = 0\n\n      do i = ( p3_2nd_2 - 2 ) + 1, nn - p3_2nd\n         do j = 1, p3_2nd_2 - 2\n&quot;);
  4674        |     |     |    
  4675        |     |     +--- //G用計算部分
  4676        |     |     +--- fprintf(fp,&quot;            radius = dsqrt( ( DE(q+j,q+j) ) * ( DE(q+j,q+j) ) + ( DE(i,q+j) ) * ( DE(i,q+j) ) )\n\n            if ( radius .eq. 0 ) then\n               cycle\n            end if\n\n            cosine = DE(q+j,q+j) / radius\n            sine = DE(i,q+j) / radius\n\n&quot;);
  4677        |     |     |    
  4678        |     |     +--- //R=回転行列*DEギブンス変換部分
  4679        |     |     +--- fprintf(fp,&quot;            do k = j, 2 * p3_2nd_2 + 1\n               if ( k .eq. nn ) then\n                  exit\n               end if\n\n               R(q+j,q+k) = R(q+j,q+k) + cosine * DE(q+j,q+k)\n               R(q+j,q+k) = R(q+j,q+k) + sine * DE(i,q+k)\n\n               R(i,q+k) = R(i,q+k) + (-1) * sine * DE(q+j,q+k)\n               R(i,q+k) = R(i,q+k) + cosine * DE(i,q+k)\n\n               DE(q+j,q+k) = R(q+j,q+k)\n               DE(i,q+k) = R(i,q+k)\n\n               R(q+j,q+k) = 0\n               R(i,q+k) = 0\n&quot;);
  4680        |     |     |    
  4681        |     |     +--- fprintf(fp,&quot;            end do\n         end do\n\n         q = q + 1\n      end do\n\n&quot;);
  4682        |     |     +--- /*整形終了*/
  4683        |     |     |                   
  4684        |     |     |    //h初期化部分  
  4685        |     |     +--- fprintf(fp,&quot;      do i = 1, npN\n         h(i) = npN + 1\n      end do\n\n&quot;);
  4686        |     |     |    
  4687        |     |     +--- //初期16点決定部分
  4688        |     |     +--- fprintf(fp,&quot;      F2(1) = 1\n      F2(2) = ( 2 + para2nd ) / 3\n      F2(3) = ( 1 + 2 * para2nd ) / 3\n      F2(4) = para2nd\n&quot;);
  4689        |     |     +--- fprintf(fp,&quot;      F2(5) = ( ( 2 + para1st ) / 3 - 1 ) * para2nd + 1\n&quot;);
  4690        |     |     +--- fprintf(fp,&quot;      F2(6) = ( ( 2 + para1st ) / 3 - 1 ) * para2nd + ( 2 + para2nd ) / 3\n&quot;);
  4691        |     |     +--- fprintf(fp,&quot;      F2(7) = ( ( 2 + para1st ) / 3 - 1 ) * para2nd + ( 1 + 2 * para2nd ) / 3\n&quot;);
  4692        |     |     +--- fprintf(fp,&quot;      F2(8) = ( ( 2 + para1st ) / 3 - 1 ) * para2nd + para2nd\n&quot;);
  4693        |     |     +--- fprintf(fp,&quot;      F2(9) = ( ( 1 + 2 * para1st ) / 3 - 1 ) * para2nd + 1\n&quot;);
  4694        |     |     +--- fprintf(fp,&quot;      F2(10) = ( ( 1 + 2 * para1st ) / 3 - 1 ) * para2nd + ( 2 + para2nd ) / 3\n&quot;);
  4695        |     |     +--- fprintf(fp,&quot;      F2(11) = ( ( 1 + 2 * para1st ) / 3 - 1 ) * para2nd + ( 1 + 2 * para2nd ) / 3\n&quot;);
  4696        |     |     +--- fprintf(fp,&quot;      F2(12) = ( ( 1 + 2 * para1st ) / 3 - 1 ) * para2nd + para2nd\n&quot;);
  4697        |     |     +--- fprintf(fp,&quot;      F2(13) = ( para1st - 1 ) * para2nd + 1\n&quot;);
  4698        |     |     +--- fprintf(fp,&quot;      F2(14) = ( para1st - 1 ) * para2nd + ( 2 + para2nd ) / 3\n&quot;);
  4699        |     |     +--- fprintf(fp,&quot;      F2(15) = ( para1st - 1 ) * para2nd + ( 1 + 2 * para2nd ) / 3\n&quot;);
  4700        |     |     +--- fprintf(fp,&quot;      F2(16) = ( para1st - 1 ) * para2nd + para2nd\n\n&quot;);
  4701        |     |     +--- fprintf(fp,&quot;      p = nn + 1\n\n&quot;);
  4702        |     |     |    
  4703        |     |     +--- //パラメータの取りうる値が,d-Spline関数中ではどの点に対応するかを設定
  4704        |     |     +--- fprintf(fp,&quot;      do i = 1, npN\n         dspline_isw(i) = ( 3 * i - 2 ) + int( ( i - 1 ) / para2nd ) * 2 * ( p3_2nd - 3 )\n      end do\n\n&quot;);
  4705        |     |     |    
  4706        |     |     +--- //初期16点の計算用部分-------------------------------------------------------
  4707        |     |     +--- fprintf(fp,&quot;      do i4 = 1, 16\n         q = F2(i4)\n         q2 = dspline_isw(F2(i4))\n\n         t1 = omp_get_wtime()\n&quot;);
  4708        |     |     |    
  4709        |     |     +--- //計算する関数に飛ぶ部分    基本的に既存部分の流用
              |     |     |  +----------------------------------------------------------------------------------+ 
  4710        |     |     +--+ if(MainF-&gt;EECntlF){     // -eectrlのフラグ(ON時は、コントロール部分を置き換え）  | 
              |     |     |  +--+-------------------------------------------------------------------------------+ 
  4711        |     |     |     +--- fprintf(fp,&quot;         iloop_inner = 0;\n&quot;);
  4712        |     |     |     +--- fprintf(fp,&quot;         while(OAT_Eecntl_Continue()){\n&quot;);
  4713        |     |     |     +--- s = &quot;            call &quot;+FuncName + &quot;(&quot;;
              |     |     |   +-+---+ 
  4714        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  4714        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  4715        |     |     |     +--- s = &quot;         call &quot;+FuncName + &quot;(&quot;;
              |     |     |   +-+---+ 
  4716        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------------------------------------------+ 
  4717        |     |     +--+ for(i = 0 ; i &lt; ArgValList-&gt;Count ; i++){  | 
              |     |     |  +--+-----------------------------------------+ 
              |     |     |     |  +------------------------------------+ 
  4718        |     |     |     +--+ if(ArgValList-&gt;Strings[i] == &quot;&quot;){  | 
              |     |     |     |  +--+---------------------------------+ 
              |     |     |     |     |  +------------+ 
  4719        |     |     |     |     +--+ continue;  | 
              |     |     |     |     |  +------------+ 
              |     |     |     |   +-+---+ 
  4720        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
  4721        |     |     |     +--- ValData = (TValData *)ArgValList-&gt;Objects[i];
  4722        |     |     |     +--- s += ValData-&gt;Str + &quot;, &quot;;
              |     |     |   +-+---+ 
  4723        |     |     |   |  }  | 
              |     |     |   +-----+ 
  4724        |     |     +--- s += &quot;q)&quot;;
  4725        |     |     +--- fprintf(fp,&quot;%s\n&quot;,s.c_str());
  4726        |     |     |    
  4727        |     |     +--- fprintf(fp,&quot;         t2 = omp_get_wtime()\n\n         time = t2 - t1\n\n&quot;);
  4728        |     |     +--- fprintf(fp,&quot;         print '( /, \&quot;---para is \&quot;, I0, \&quot;, time is \&quot;, G14.7, \&quot;---\&quot;, / )', q, time\n\n&quot;);
  4729        |     |     +--- fprintf(fp,&quot;         h(kk) = q\n\n         DE(p,q2) = 1\n         DE(p,nn+1) = time\n\n&quot;);
  4730        |     |     |    
  4731        |     |     +--- //------初期16点ギブンス変換do文部分ここから------
  4732        |     |     +--- fprintf(fp,&quot;         do q2 = q2, nn\n\n&quot;);
  4733        |     |     |    
  4734        |     |     +--- //G用計算部分
  4735        |     |     +--- fprintf(fp,&quot;            radius = dsqrt( ( DE(q2,q2) ) * ( DE(q2,q2) ) + ( DE(p,q2) ) * ( DE(p,q2) ) )\n\n&quot;);
  4736        |     |     +--- fprintf(fp,&quot;            if ( radius .eq. 0 ) then\n               cycle\n            endif\n\n&quot;);
  4737        |     |     +--- fprintf(fp,&quot;            cosine = DE(q2,q2) / radius\n            sine = DE(p,q2) / radius\n\n&quot;);
  4738        |     |     |    
  4739        |     |     +--- //R=回転行列*DEギブンス変換部分
  4740        |     |     +--- fprintf(fp,&quot;            do j = q2, q2 + 2 * p3_2nd_2 + 1\n               if ( j .eq. p + 1 ) then\n                  exit\n               endif\n\n&quot;);
  4741        |     |     +--- fprintf(fp,&quot;               R(q2,j) = R(q2,j) + cosine * DE(q2,j)\n               R(q2,j) = R(q2,j) + sine * DE(p,j)\n\n               R(p,j) = R(p,j) + (-1) * sine * DE(q2,j)\n               R(p,j) = R(p,j) + cosine * DE(p,j)\n\n&quot;);
  4742        |     |     +--- fprintf(fp,&quot;               DE(q2,j) = R(q2,j)\n               DE(p,j) = R(p,j)\n\n               R(q2,j) = 0\n               R(p,j) = 0\n\n&quot;);
  4743        |     |     |    
  4744        |     |     +--- fprintf(fp,&quot;               if ( j .eq. q2 + 2 * p3_2nd_2 + 1 ) then\n                  R(q2,p) = R(q2,p) + cosine * DE(q2,p)\n                  R(q2,p) = R(q2,p) + sine * DE(p,p)\n\n                   R(p,p) = R(p,p) + (-1) * sine * DE(q2,p)\n                  R(p,p) = R(p,p) + cosine * DE(p,p)\n\n&quot;);
  4745        |     |     +--- fprintf(fp,&quot;                  DE(q2,p) = R(q2,p)\n                  DE(p,p) = R(p,p)\n                  R(q2,p) = 0\n                  R(p,p) = 0\n&quot;);
  4746        |     |     |    
  4747        |     |     +--- fprintf(fp,&quot;               endif\n            end do\n         end do\n\n         kk = kk + 1\n      end do\n\n&quot;);
  4748        |     |     +--- //------初期16点ギブンス変換do文部分ここまで------
  4749        |     |     |                                                                           
  4750        |     |     |    //------初期16点計算後，ベストパラメタと次のパラメタ決定ここから------ 
  4751        |     |     |                                                                           
  4752        |     |     |    //推定値代入初期化部分                                                 
  4753        |     |     +--- fprintf(fp,&quot;      do i = 1, nn\n         x(i) = DE(i,nn+1)\n      end do\n\n&quot;);
  4754        |     |     |    
  4755        |     |     +--- //後退代入で推定値計算部分
  4756        |     |     +--- fprintf(fp,&quot;      do i = nn, 1, -1\n         do j = i + 1, nn\n            x(i) = x(i) - DE(i,j) * x(j)\n         end do\n\n         x(i) = x(i) / DE(i,i)\n      end do\n\n&quot;);
  4757        |     |     |    
  4758        |     |     +--- //デバッグ用，推定値表示部分
  4759        |     |     +--- fprintf(fp,&quot;      if ( DEBUG .gt. 0 ) then\n         print '( /, \&quot;estimation\&quot; )'\n\n         do i = 1, npN\n            print *, '[', i, ']', x(dspline_isw(i))\n         end do\n\n         print *, ''\n      endif\n\n&quot;);
  4760        |     |     |    
  4761        |     |     +--- //推定値が最小となる番号をベストパラメタに設定する部分
  4762        |     |     +--- fprintf(fp,&quot;      temp = x(1)\n      bestP = 1\n\n      do i = 1, npN\n         if ( x(dspline_isw(i)) .lt. temp ) then\n            temp = x(dspline_isw(i))\n            bestP = i\n         endif\n      end do\n\n&quot;);
  4763        |     |     +--- fprintf(fp,&quot;      print *, 'best para = ', bestP, ' time = ', x(dspline_isw(bestP))\n\n&quot;);
  4764        |     |     |    
  4765        |     |     +--- //選択基準2用配列初期化部分
  4766        |     |     +--- fprintf(fp,&quot;      do i = 1, npN\n         select2(i,2) = i\n         select2(i,1) = 0\n      end do\n\n&quot;);
  4767        |     |     |    
  4768        |     |     +--- //変化率計算部分
  4769        |     |     +--- fprintf(fp,&quot;      k = p3_2nd_2 * 3\n\n&quot;);
  4770        |     |     +--- fprintf(fp,&quot;      do i = 2, npN - 1\n         j = dspline_isw(i)\n\n         if ( ( i .lt. para2nd ) .or. ( ( para1st - 1 ) * para2nd + 1 .lt. i ) ) then\n            select2(i,1) = dabs( x(j-3) - 2 * x(j) + x(j+3) )\n&quot;);
  4771        |     |     +--- fprintf(fp,&quot;         else if ( ( ( MOD(i,para2nd) .eq. 0 ) .and. ( para2nd .lt. i ) ) .or. &amp;\n          ( ( MOD(i-1,para2nd) .eq. 0 ) .and. ( i .lt. ( para1st - 1 ) * para2nd ) ) ) then\n            select2(i,1) = dabs( x(j-k) - 2 * x(j) + x(j+k) )\n&quot;);
  4772        |     |     +--- fprintf(fp,&quot;         else if ( ( i .ne. para2nd ) .and. ( i .ne. ( para1st - 1 ) * para2nd + 1 ) ) then\n            select2(i,1) = dabs( x(j-3) + x(j-k) - 4 * x(j) + x(j+k) + x(j+3) )\n         endif\n      end do\n\n&quot;);
  4773        |     |     |    
  4774        |     |     +--- //select2ソート部分
  4775        |     |     +--- fprintf(fp,&quot;      do i = 1, npN - 1\n         do j = npN, i + 1, -1\n            if ( select2(j-1,1) .lt. select2(j,1) ) then\n               temp = select2(j,1)\n               temp2 = select2(j,2)\n               select2(j,1) = select2(j-1,1)\n               select2(j,2) = select2(j-1,2)\n               select2(j-1,1) = temp\n               select2(j-1,2) = temp2\n            endif\n         end do\n      end do\n\n&quot;);
  4776        |     |     |    
  4777        |     |     +--- //推定したベストPがすでに標本点にあるなら選択基準2,ないなら選択基準1　選択する部分
  4778        |     |     +--- fprintf(fp,&quot;      do i = 1, npN\n         if ( bestP .eq. h(i) ) then\n            do j = 1, npN\n               do k = 1, npN\n                  if ( select2(j,2) .eq. h(k) ) then\n                     exit\n                  endif\n                  if ( k + 1 .eq. npN + 1 ) then\n                     nextP = select2(j,2)\n                     goto 111\n                  endif\n               end do\n            end do\n\n            exit\n         else\n            nextP = bestP\n         endif\n      end do\n\n111   print '( \&quot; nextP = \&quot;, I0, \&quot; bestP = \&quot;, I0, / )', nextP, bestP\n\n&quot;);
  4779        |     |     |    
  4780        |     |     +--- //prebestPに16点計算終了時のベストパラメタを代入する部分
  4781        |     |     +--- fprintf(fp,&quot;      prebestP = bestP\n\n&quot;);
  4782        |     |     |    
  4783        |     |     +--- //推定値をエクセルに書き込みする部分
  4784        |     |     +--- fprintf(fp,&quot;      do i = 1, nn\n         write( 11, * ) x(i)\n      end do\n      write( 11, '(A3,/)') 'end'\n\n&quot;);
  4785        |     |     |    
  4786        |     |     +--- fprintf(fp,&quot;      print '( /, \&quot;----------end 16 point----------\&quot;, / )'\n\n&quot;);
  4787        |     |     |    
  4788        |     |     +--- //--------16点後のdo文ここから--------
  4789        |     |     +--- fprintf(fp,&quot;      do l = kk, npN\n&quot;);
  4790        |     |     +--- fprintf(fp,&quot;         q = nextP\n&quot;);
  4791        |     |     +--- fprintf(fp,&quot;         q2 = dspline_isw(nextP)\n\n&quot;);
  4792        |     |     +--- fprintf(fp,&quot;         t1 = omp_get_wtime()\n&quot;);
  4793        |     |     |    
  4794        |     |     +--- //計算する関数に飛ぶ部分    基本的に既存部分の流用
              |     |     |  +----------------------------------------------------------------------------------+ 
  4795        |     |     +--+ if(MainF-&gt;EECntlF){     // -eectrlのフラグ(ON時は、コントロール部分を置き換え）  | 
              |     |     |  +--+-------------------------------------------------------------------------------+ 
  4796        |     |     |     +--- fprintf(fp,&quot;         iloop_inner = 0;\n&quot;);
  4797        |     |     |     +--- fprintf(fp,&quot;         while(OAT_Eecntl_Continue()){\n&quot;);
  4798        |     |     |     +--- s = &quot;            call &quot;+FuncName + &quot;(&quot;;
              |     |     |   +-+---+ 
  4799        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  4799        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  4800        |     |     |     +--- s = &quot;         call &quot;+FuncName + &quot;(&quot;;
              |     |     |   +-+---+ 
  4801        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------------------------------------------+ 
  4802        |     |     +--+ for(i = 0 ; i &lt; ArgValList-&gt;Count ; i++){  | 
              |     |     |  +--+-----------------------------------------+ 
              |     |     |     |  +------------------------------------+ 
  4803        |     |     |     +--+ if(ArgValList-&gt;Strings[i] == &quot;&quot;){  | 
              |     |     |     |  +--+---------------------------------+ 
              |     |     |     |     |  +------------+ 
  4804        |     |     |     |     +--+ continue;  | 
              |     |     |     |     |  +------------+ 
              |     |     |     |   +-+---+ 
  4805        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
  4806        |     |     |     +--- ValData = (TValData *)ArgValList-&gt;Objects[i];
  4807        |     |     |     +--- s += ValData-&gt;Str + &quot;, &quot;;
              |     |     |   +-+---+ 
  4808        |     |     |   |  }  | 
              |     |     |   +-----+ 
  4809        |     |     +--- s += &quot;q)&quot;;
  4810        |     |     +--- fprintf(fp,&quot;%s\n&quot;,s.c_str());
  4811        |     |     |    
  4812        |     |     +--- fprintf(fp,&quot;         t2 = omp_get_wtime()\n\n&quot;);
  4813        |     |     +--- fprintf(fp,&quot;         time = t2 - t1\n\n&quot;);
  4814        |     |     +--- fprintf(fp,&quot;         print '( /, \&quot;---para is \&quot;, I0, \&quot;, time is \&quot;, G14.7, \&quot;---\&quot;, / )', q, time\n\n&quot;);
  4815        |     |     +--- fprintf(fp,&quot;         h(kk) = q\n         DE(p,q2) = 1\n         DE(p,nn+1) = time\n\n&quot;);
  4816        |     |     |    
  4817        |     |     +--- //--------ギブンス変換do文ここから--------
  4818        |     |     |    //G用計算部分                              
  4819        |     |     +--- fprintf(fp,&quot;      do q2 = q2, nn\n&quot;);
  4820        |     |     +--- fprintf(fp,&quot;            radius = dsqrt( ( DE(q2,q2) ) * ( DE(q2,q2) ) + ( DE(p,q2) ) * ( DE(p,q2) ) )\n\n&quot;);
  4821        |     |     +--- fprintf(fp,&quot;            if ( radius .eq. 0 ) then\n               exit\n            endif\n\n&quot;);
  4822        |     |     +--- fprintf(fp,&quot;            cosine = DE(q2,q2) / radius\n            sine = DE(p,q2) / radius\n\n&quot;);
  4823        |     |     |    
  4824        |     |     +--- //R=回転行列*DEギブンス変換部分
  4825        |     |     +--- fprintf(fp,&quot;            do j = q2, q2 + 2 * p3_2nd_2 + 1\n               if ( j .eq. p + 1 ) then\n                  exit\n               endif\n\n&quot;);
  4826        |     |     +--- fprintf(fp,&quot;               R(q2,j) = R(q2,j) + cosine * DE(q2,j)\n               R(q2,j) = R(q2,j) + sine * DE(p,j)\n\n               R(p,j) = R(p,j) + (-1) * sine * DE(q2,j)\n               R(p,j) = R(p,j) + cosine * DE(p,j)\n\n&quot;);
  4827        |     |     +--- fprintf(fp,&quot;               DE(q2,j) = R(q2,j)\n               DE(p,j) = R(p,j)\n\n               R(q2,j) = 0\n               R(p,j) = 0\n\n&quot;);
  4828        |     |     |    
  4829        |     |     +--- fprintf(fp,&quot;               if ( j .eq. q2 + 2 * p3_2nd_2 + 1 ) then\n                  R(q2,p) = R(q2,p) + cosine * DE(q2,p)\n                  R(q2,p) = R(q2,p) + sine * DE(p,p)\n\n                  R(p,p) = R(p,p) + (-1) * sine * DE(q2,p)\n                  R(p,p) = R(p,p) + cosine * DE(p,p)\n\n&quot;);
  4830        |     |     +--- fprintf(fp,&quot;                  DE(q2,p) = R(q2,p)\n                  DE(p,p) = R(p,p)\n                  R(q2,p) = 0\n                  R(p,p) = 0\n&quot;);
  4831        |     |     |    
  4832        |     |     +--- fprintf(fp,&quot;               endif\n            end do\n         end do\n\n&quot;);
  4833        |     |     +--- //------ギブンス変換do文部分ここまで------
  4834        |     |     |                                                   
  4835        |     |     |    //ギブンス変換後,推定値計算,次の標本点決定部分 
  4836        |     |     |    //推定値代入初期化部分                         
  4837        |     |     +--- fprintf(fp,&quot;         do i = 1, nn\n            x(i) = DE(i,nn+1)\n         end do\n\n&quot;);
  4838        |     |     |    
  4839        |     |     +--- //後退代入で推定値計算部分
  4840        |     |     +--- fprintf(fp,&quot;         do i = nn, 1, -1\n            do j = i + 1, nn\n               x(i) = x(i) - DE(i,j) * x(j)\n            end do\n\n            x(i) = x(i) / DE(i,i)\n         end do\n\n&quot;);
  4841        |     |     |    
  4842        |     |     +--- //デバッグ用，推定値表示部分
  4843        |     |     +--- fprintf(fp,&quot;         if ( DEBUG .gt. 0 ) then\n            print '( /, \&quot;estimation\&quot; )'\n\n            do i = 1, npN\n               print *, '[', i, ']', x(dspline_isw(i))\n            end do\n\n            print *, ''\n         endif\n\n&quot;);
  4844        |     |     |    
  4845        |     |     +--- //推定値が最小となる番号をベストパラメタに設定する部分
  4846        |     |     +--- fprintf(fp,&quot;         temp = x(1)\n         bestP = 1\n\n         do i = 1, npN\n            if ( x(dspline_isw(i)) .lt. temp ) then\n               temp = x(dspline_isw(i))\n               bestP = i\n            endif\n         end do\n\n&quot;);
  4847        |     |     +--- fprintf(fp,&quot;         print *, 'best para = ', bestP, ' time = ', x(dspline_isw(bestP))\n\n&quot;);
  4848        |     |     |    
  4849        |     |     +--- //選択基準2用配列初期化部分
  4850        |     |     +--- fprintf(fp,&quot;         do i = 1, npN\n            select2(i,2) = i\n            select2(i,1) = 0\n         end do\n\n&quot;);
  4851        |     |     |    
  4852        |     |     +--- //変化率計算部分
  4853        |     |     +--- fprintf(fp,&quot;      k = p3_2nd_2 * 3\n\n&quot;);
  4854        |     |     +--- fprintf(fp,&quot;      do i = 2, npN - 1\n         j = dspline_isw(i)\n\n         if ( ( i .lt. para2nd ) .or. ( ( para1st - 1 ) * para2nd + 1 .lt. i ) ) then\n            select2(i,1) = dabs( x(j-3) - 2 * x(j) + x(j+3) )\n&quot;);
  4855        |     |     +--- fprintf(fp,&quot;         else if ( ( ( MOD(i,para2nd) .eq. 0 ) .and. ( para2nd .lt. i ) ) .or. &amp;\n          ( ( MOD(i-1,para2nd) .eq. 0 ) .and. ( i .lt. ( para1st - 1 ) * para2nd ) ) ) then\n            select2(i,1) = dabs( x(j-k) - 2 * x(j) + x(j+k) )\n&quot;);
  4856        |     |     +--- fprintf(fp,&quot;         else if ( ( i .ne. para2nd ) .and. ( i .ne. ( para1st - 1 ) * para2nd + 1 ) ) then\n            select2(i,1) = dabs( x(j-3) + x(j-k) - 4 * x(j) + x(j+k) + x(j+3) )\n         endif\n      end do\n\n&quot;);
  4857        |     |     |    
  4858        |     |     +--- //select2ソート部分
  4859        |     |     +--- fprintf(fp,&quot;         do i = 1, npN - 1\n            do j = npN, i + 1, -1\n               if ( select2(j-1,1) .lt. select2(j,1) ) then\n                  temp = select2(j,1)\n                  temp2 = select2(j,2)\n                  select2(j,1) = select2(j-1,1)\n                  select2(j,2) = select2(j-1,2)\n                  select2(j-1,1) = temp\n                  select2(j-1,2) = temp2\n               endif\n            end do\n         end do\n\n&quot;);
  4860        |     |     |    
  4861        |     |     +--- //推定したベストPがすでに標本点にあるなら選択基準2,ないなら選択基準1　選択する部分
  4862        |     |     +--- fprintf(fp,&quot;         do i = 1, npN\n            if ( bestP .eq. h(i) ) then\n               do j = 1, npN\n                  do k = 1, npN\n                     if ( select2(j,2) .eq. h(k) ) then\n                        exit\n                     endif\n                     if ( k + 1 .eq. npN + 1 ) then\n                        nextP = select2(j,2)\n                        goto 222\n                     endif\n                  end do\n               end do\n\n               exit\n            else\n               nextP = bestP\n            endif\n         end do\n\n222      print '( \&quot; nextP = \&quot;, I0, \&quot; bestP = \&quot;, I0, / )', nextP, bestP\n\n&quot;);
  4863        |     |     |    
  4864        |     |     +--- //前回推定したパラメタと同じならカウント+1,違うならカウントを1に初期化する部分
  4865        |     |     +--- fprintf(fp,&quot;         if ( prebestP .eq. bestP ) then\n            count = count + 1\n         else\n            count = 1\n         endif\n\n&quot;);
  4866        |     |     |    
  4867        |     |     +--- //今回推定したベストパラメタをprebestPに設定
  4868        |     |     +--- fprintf(fp,&quot;         prebestP = bestP\n\n&quot;);
  4869        |     |     |    
  4870        |     |     +--- //推定値をエクセルに書き込みする部分
  4871        |     |     +--- fprintf(fp,&quot;      do i = 1, nn\n         write( 11, * ) x(i)\n      end do\n      write( 11, '(A3,/)') 'end'\n\n&quot;);
  4872        |     |     |    
  4873        |     |     +--- fprintf(fp,&quot;         kk = kk + 1\n\n&quot;);
  4874        |     |     |    
  4875        |     |     +--- fprintf(fp,&quot;         print *, 'count = ', count\n&quot;);
  4876        |     |     |    
  4877        |     |     +--- fprintf(fp,&quot;         if ( count .eq. 3 ) then\n            print *, 'count end'\n            print *, 'usedParaNums = ', kk - 1\n            exit\n         endif\n\n&quot;);
  4878        |     |     |    
  4879        |     |     +--- fprintf(fp,&quot;      end do\n\n&quot;);
  4880        |     |     +--- //--------4点後のdo文ここまで--------
  4881        |     |     |                                           
  4882        |     |     |    //戻り値の設定                         
  4883        |     |     +--- fprintf(fp,&quot;      dsp2giv%s%s = bestP\n\n&quot;, TuneGroupName.c_str(), Name.c_str());
  4884        |     |     |    
  4885        |     |     +--- fprintf(fp,&quot;end function dsp2giv%s%s\n\n\n&quot;, TuneGroupName.c_str(), Name.c_str());
              |     |   +-+---+ 
  4886        |     |   |  }  | 
              |     |   +-----+ 
  4887        |     +--- //2次元用d-Spline（インストール時自動チューニング用）ここまで
  4888        |     |                                                                   
  4889        |     |    //2次元用d-spline（実行時自動チューニング用）                  
              |     |  +------------------------------+ 
  4890        |     +--+ if(TuneGroup == tgDynamic){  | 
              |     |  +--+---------------------------+ 
  4891        |     |     +--- int CaseNums[2];
  4892        |     |     +--- CaseNums[0] = (int)( (variedToValue[0] - variedFromValue[0]) / variedStepValue[0] + 1 );
  4893        |     |     +--- CaseNums[1] = (int)( (variedToValue[1] - variedFromValue[1]) / variedStepValue[1] + 1 );
  4894        |     |     +--- int nnn = (3*CaseNums[0]-2)*(3*CaseNums[1]-2);
  4895        |     |     |    
  4896        |     |     +--- //関数名部分
  4897        |     |     +--- fprintf(fp,&quot;subroutine dynamicDspline2%s%s( npN, para1st, para2nd, isw, Dswitch, time )\n&quot;, TuneGroupName.c_str(), Name.c_str() );
  4898        |     |     |    
  4899        |     |     +--- //仮引数宣言部分
  4900        |     |     +--- fprintf(fp,&quot;      integer npN, para1st, para2nd, isw, Dswitch\n&quot; );
  4901        |     |     +--- fprintf(fp,&quot;      double precision time\n\n&quot;);
  4902        |     |     |    
  4903        |     |     +--- //変数宣言部分
  4904        |     |     +--- fprintf(fp,&quot;      integer :: DEBUG = 1\n&quot;);
  4905        |     |     +--- fprintf(fp,&quot;      integer p3_1st, p3_2nd, p3_2nd_2\n&quot;);
  4906        |     |     +--- fprintf(fp,&quot;      integer nn\n&quot;);
  4907        |     |     +--- fprintf(fp,&quot;      double precision, save :: DE(%d+1,%d+1)\n&quot;, nnn, nnn);
  4908        |     |     +--- fprintf(fp,&quot;      double precision, save :: R(%d+1,%d+1)\n&quot;, nnn, nnn);
  4909        |     |     +--- fprintf(fp,&quot;      double precision radius, cosine, sine\n&quot;);
  4910        |     |     +--- fprintf(fp,&quot;      integer p, q, q2\n&quot;);
  4911        |     |     +--- fprintf(fp,&quot;      integer, save :: count1 = 1\n&quot;);
  4912        |     |     +--- fprintf(fp,&quot;      integer, save :: count2 = 0\n&quot;);
  4913        |     |     +--- fprintf(fp,&quot;      double precision, allocatable, dimension(:) :: x\n&quot;);
  4914        |     |     +--- fprintf(fp,&quot;      double precision temp\n&quot;);
  4915        |     |     +--- fprintf(fp,&quot;      integer temp2\n&quot;);
  4916        |     |     +--- fprintf(fp,&quot;      integer bestP\n&quot;);
  4917        |     |     +--- fprintf(fp,&quot;      integer nextP\n&quot;);
  4918        |     |     +--- fprintf(fp,&quot;      integer, save :: prebestP = 0\n&quot;);
  4919        |     |     +--- fprintf(fp,&quot;      double precision select2(npN,2)\n&quot;);
  4920        |     |     +--- fprintf(fp,&quot;      integer, save :: h(%d+1)\n&quot;, CaseNums[0] * CaseNums[1]);
  4921        |     |     +--- fprintf(fp,&quot;      integer, save :: dspline_isw(%d)\n&quot;, CaseNums[0] * CaseNums[1]);
  4922        |     |     +--- fprintf(fp,&quot;      integer, save :: kk = 1\n&quot;);
  4923        |     |     +--- fprintf(fp,&quot;      double precision, parameter :: alfa = 0.1\n&quot;);
  4924        |     |     +--- fprintf(fp,&quot;      integer, save :: Fcount = 0\n&quot;);
  4925        |     |     +--- fprintf(fp,&quot;      integer i, j, k\n\n&quot;);
  4926        |     |     |    
  4927        |     |     +--- fprintf(fp,&quot;      p3_1st = para1st * 3\n&quot;);
  4928        |     |     +--- fprintf(fp,&quot;      p3_2nd = para2nd * 3\n&quot;);
  4929        |     |     +--- fprintf(fp,&quot;      p3_2nd_2 = p3_2nd - 2\n&quot;);
  4930        |     |     +--- fprintf(fp,&quot;      nn = ( p3_1st - 2 ) * ( p3_2nd - 2 )\n&quot;);
  4931        |     |     +--- fprintf(fp,&quot;      allocate(x(nn))\n&quot;);
  4932        |     |     +--- fprintf(fp,&quot;      bestP = 0\n&quot;);
  4933        |     |     |    
  4934        |     |     +--- //エクセル書き込み用部分
  4935        |     |     +--- fprintf(fp,&quot;      open( 11, file = 'd-SplineData.csv' )\n&quot;);
  4936        |     |     |    
  4937        |     |     +--- //パラメタ探索後の終了部分
  4938        |     |     +--- fprintf(fp,&quot;      if ( count2 .eq. 1 ) then\n         return\n      endif\n\n&quot;);
  4939        |     |     +--- fprintf(fp,&quot;      if ( count1 .eq. 3 ) then\n         print *, 'count1=3 end'\n         print *, 'used paraNums=', Fcount-1\n         isw = prebestP\n         count2 = 1\n         return\n      endif\n\n&quot;);
  4940        |     |     |    
  4941        |     |     +--- //h初期化部分
  4942        |     |     +--- fprintf(fp,&quot;      if ( Fcount .eq. 0 ) then\n         do i = 1, npN + 1\n            h(i) = npN + 1\n         end do\n      endif\n\n&quot;);
  4943        |     |     +--- fprintf(fp,&quot;      p = nn + 1\n\n&quot;);
  4944        |     |     |    
  4945        |     |     +--- //Dswitch1部分ここから
  4946        |     |     +--- fprintf(fp,&quot;      if ( Dswitch .eq. 1 ) then\n\n&quot;);
  4947        |     |     |    
  4948        |     |     +--- //switch部分ここから
  4949        |     |     +--- fprintf(fp,&quot;         select case (Fcount)\n&quot;);
  4950        |     |     +--- fprintf(fp,&quot;            case (0)\n               isw = 1\n            case (1)\n               isw = ( 2 + para2nd ) / 3\n            case (2)\n               isw = ( 1 + 2 * para2nd ) / 3\n            case (3)\n               isw = para2nd\n            case (4)\n               isw = ( ( 2 + para1st ) / 3 - 1 ) * para2nd + 1\n            case (5)\n               isw = ( ( 2 + para1st ) / 3 - 1 ) * para2nd + ( 2 + para2nd ) / 3\n            case (6)\n               isw = ( ( 2 + para1st ) / 3 - 1 ) * para2nd + ( 1 + 2 * para2nd ) / 3\n            case (7)\n               isw = ( ( 2 + para1st ) / 3 - 1 ) * para2nd + para2nd\n            case (8)\n               isw = ( ( 1 + 2 * para1st ) / 3 - 1 ) * para2nd + 1\n            case (9)\n               isw = ( ( 1 + 2 * para1st ) / 3 - 1 ) * para2nd + ( 2 + para2nd ) / 3\n            case (10)\n               isw = ( ( 1 + 2 * para1st ) / 3 - 1 ) * para2nd + ( 1 + 2 * para2nd ) / 3\n            case (11)\n               isw = ( ( 1 + 2 * para1st ) / 3 - 1 ) * para2nd + para2nd\n            case (12)\n               isw = ( para1st - 1 ) * para2nd + 1\n            case (13)\n               isw = ( para1st - 1 ) * para2nd + ( 2 + para2nd ) / 3\n            case (14)\n               isw = ( para1st - 1 ) * para2nd + ( 1 + 2 * para2nd ) / 3\n            case (15)\n               isw = ( para1st - 1 ) * para2nd + para2nd\n&quot;);
  4951        |     |     |    
  4952        |     |     +--- //default部分
  4953        |     |     +--- fprintf(fp,&quot;            case default\n\n&quot;);
  4954        |     |     |    
  4955        |     |     +--- //推定値初期化部分
  4956        |     |     +--- fprintf(fp,&quot;               do i = 1, nn\n                  x(i) = DE(i,nn+1)\n               end do\n\n&quot;);
  4957        |     |     |    
  4958        |     |     +--- //後退代入計算部分
  4959        |     |     +--- fprintf(fp,&quot;               do i = nn, 1, -1\n                  do j = i + 1, nn\n                     x(i) = x(i) - DE(i,j) * x(j)\n                  end do\n\n                  x(i) = x(i) / DE(i,i)\n               end do\n\n&quot;);
  4960        |     |     |    
  4961        |     |     +--- //デバッグ推定値表示部分
  4962        |     |     +--- fprintf(fp,&quot;               if ( DEBUG .gt. 0 ) then\n                  print '( /, \&quot;estimation\&quot; )'\n\n                  do i = 1, npN\n                     print *, '[', i, '] ', x(dspline_isw(i))\n                  end do\n\n                  print *, ''\n               endif\n\n&quot;);
  4963        |     |     |    
  4964        |     |     +--- //最小推定値探索部分
  4965        |     |     +--- fprintf(fp,&quot;               temp = x(dspline_isw(1))\n               bestP = 1\n\n               do i = 1, npN\n                  j = dspline_isw(i)\n\n                  if ( x(j) .lt. temp ) then\n                     temp = x(j)\n                     bestP = i\n                  endif\n               end do\n\n&quot;);
  4966        |     |     |    
  4967        |     |     +--- //ベストパラメタ部分
  4968        |     |     +--- fprintf(fp,&quot;               print *, 'best para = ', bestP, ' time = ', x(dspline_isw(bestP))\n\n&quot;);
  4969        |     |     |    
  4970        |     |     +--- //選択基準2初期化部分
  4971        |     |     +--- fprintf(fp,&quot;               do i = 1, npN\n                  select2(i,2) = i\n                  select2(i,1) = 0\n               end do\n\n&quot;);
  4972        |     |     |    
  4973        |     |     +--- //変化率計算部分
  4974        |     |     +--- fprintf(fp,&quot;               k = p3_2nd_2 * 3\n\n&quot;);
  4975        |     |     +--- fprintf(fp,&quot;               do i = 2, npN - 1\n                  j = dspline_isw(i)\n\n                  if ( ( i .lt. para2nd ) .or. ( ( para1st - 1 ) * para2nd + 1 .lt. i ) ) then\n                     select2(i,1) = dabs( x(j-3) - 2 * x(j) + x(j+3) )\n                  else if ( ( ( MOD(i,para2nd) .eq. 0 ) .and. ( para2nd .lt. i ) ) .or. &amp;\n                   ( ( MOD(i-1,para2nd) .eq. 0 ) .and. ( i .lt. ( para1st - 1 ) * para2nd ) ) ) then\n                     select2(i,1) = dabs( x(j-k) - 2 * x(j) + x(j+k) )\n                  else if ( ( i .ne. para2nd ) .and. ( i .ne. ( para1st - 1 ) * para2nd + 1 ) ) then\n                     select2(i,1) = dabs( x(j-3) + x(j-k) - 4 * x(j) + x(j+k) + x(j+3) )\n                  endif\n               end do\n\n&quot;);
  4976        |     |     |    
  4977        |     |     +--- //select2ソート部分
  4978        |     |     +--- fprintf(fp,&quot;               do i = 1, npN - 1\n                  do j = npN, i + 1, -1\n                     if ( select2(j-1,1) .lt. select2(j,1) ) then\n                        temp = select2(j,1)\n                        temp2 = select2(j,2)\n                        select2(j,1) = select2(j-1,1)\n                        select2(j,2) = select2(j-1,2)\n                        select2(j-1,1) = temp\n                        select2(j-1,2) = temp2\n                     endif\n                  end do\n               end do\n\n&quot;);
  4979        |     |     |    
  4980        |     |     +--- //選択基準1or2選択部分
  4981        |     |     +--- fprintf(fp,&quot;               do i = 1, npN\n                  if ( bestP .eq. h(i) ) then\n                     do j = 1, npN\n                        do k = 1, npN\n                           if ( select2(j,2) .eq. h(k) ) then\n                              exit\n                           endif\n                           if ( k + 1 .eq. npN + 1 ) then\n                              nextP = select2(j,2)\n                              goto 111\n                           endif\n                        end do\n                     end do\n\n                     exit\n                  else\n                     nextP = bestP\n                  endif\n               end do\n\n&quot;);
  4982        |     |     |    
  4983        |     |     +--- //ベストパラメタと次のパラメタをセットする部分
  4984        |     |     +--- fprintf(fp,&quot;111               print '( \&quot; nextP = \&quot;, I0, \&quot; bestP = \&quot;, I0, / )', nextP, bestP\n\n               isw = nextP\n\n&quot;);
  4985        |     |     |    
  4986        |     |     +--- //3回カウント用部分
  4987        |     |     +--- fprintf(fp,&quot;               if ( prebestP .eq. bestP ) then\n                  count1 = count1 + 1\n               else\n                  count1 = 1\n               endif\n\n&quot;);
  4988        |     |     |    
  4989        |     |     +--- //default部分ここまで
  4990        |     |     +--- fprintf(fp,&quot;               prebestP = bestP\n\n&quot;);
  4991        |     |     |    
  4992        |     |     +--- //推定値をエクセルに書き込みする部分
  4993        |     |     +--- fprintf(fp,&quot;               do i = 1, nn\n                  write( 11, * ) x(i)\n               end do\n&quot;);
  4994        |     |     +--- fprintf(fp,&quot;               write( 11, '(A3,/)' ) 'end'\n\n&quot;);
  4995        |     |     |    
  4996        |     |     +--- //switchここまで
  4997        |     |     +--- fprintf(fp,&quot;         end select\n\n         Fcount = Fcount + 1\n\n&quot;);
  4998        |     |     |    
  4999        |     |     +--- //Dswitch1ここまで------------
  5000        |     |     +--- fprintf(fp,&quot;      endif\n\n&quot;);
  5001        |     |     |    
  5002        |     |     +--- //Dswitch2ここから-----------------
  5003        |     |     +--- fprintf(fp,&quot;      if ( Dswitch .eq. 2 ) then\n\n&quot;);
  5004        |     |     |    
  5005        |     |     +--- //DE初期化部分
  5006        |     |     +--- fprintf(fp,&quot;         if ( Fcount .eq. 1 ) then\n&quot;);
  5007        |     |     +--- fprintf(fp,&quot;            do i = 1, nn + 1\n               do j = 1, nn + 1\n                  DE(i,j) = 0\n                  R(i,j) = 0\n               end do\n            end do\n\n&quot;);
  5008        |     |     +--- fprintf(fp,&quot;            j=1\n\n            do i = 1, nn - 4\n               if ( i .le. p3_2nd_2 - 2 ) then\n                  DE(i,i) = 1 * alfa\n                  DE(i,i+1) = -2 * alfa\n                  DE(i,i+2) = 1 * alfa\n               else if ( ( nn - p3_2nd ) .lt. i ) then\n                  DE(i,i+2) = 1 * alfa\n                  DE(i,i+3) = -2 * alfa\n                  DE(i,i+4) = 1 * alfa\n               else\n                  if ( ( MOD(i+1,p3_2nd_2) .eq. 0 ) .or. ( MOD(i+2,p3_2nd_2) .eq. 0 ) ) then\n                     DE(i,j) = 1 * alfa\n                     DE(i,j+p3_2nd_2) = -2 * alfa\n                     DE(i,j+2*p3_2nd_2) = 1 * alfa\n                  else\n                     DE(i,j) = 1 * alfa\n                     DE(i,j+p3_2nd_2-1) = 1 * alfa\n                     DE(i,j+p3_2nd_2) = -4 * alfa\n                     DE(i,j+p3_2nd_2+1) = 1 * alfa\n                     DE(i,j+2*p3_2nd_2) = 1 * alfa\n                  endif\n\n                  j = j + 1\n               endif\n            end do\n\n&quot;);
  5009        |     |     |    
  5010        |     |     +--- //パラメタの取りうる値が，d-Spline関数中ではどの点に対応するかを設定
  5011        |     |     +--- fprintf(fp,&quot;            do i = 1, npN\n               dspline_isw(i) = ( 3 * i - 2 ) + int( ( i - 1 ) / para2nd ) * 2 * ( p3_2nd - 3 )\n            end do\n\n&quot;);
  5012        |     |     |    
  5013        |     |     +--- /*DEをあらかじめ上三角行列に整形*/
  5014        |     |     +--- fprintf(fp,&quot;            q = 0\n\n            do i = ( p3_2nd_2 - 2 ) + 1, nn - p3_2nd\n               do j = 1, p3_2nd_2 - 2\n&quot;);
  5015        |     |     |    
  5016        |     |     +--- //G用計算部分
  5017        |     |     +--- fprintf(fp,&quot;                  radius = dsqrt( ( DE(q+j,q+j) ) * ( DE(q+j,q+j) ) + ( DE(i,q+j) ) * ( DE(i,q+j) ) )\n\n                  if ( radius .eq. 0 ) then\n                     cycle\n                  end if\n\n                  cosine = DE(q+j,q+j) / radius\n                  sine = DE(i,q+j) / radius\n\n&quot;);
  5018        |     |     |    
  5019        |     |     +--- //R=回転行列*DEギブンス変換部分
  5020        |     |     +--- fprintf(fp,&quot;                  do k = j, 2 * p3_2nd_2 + 1\n                     if ( k .eq. nn ) then\n                        exit\n                     end if\n\n                     R(q+j,q+k) = R(q+j,q+k) + cosine * DE(q+j,q+k)\n                     R(q+j,q+k) = R(q+j,q+k) + sine * DE(i,q+k)\n\n                     R(i,q+k) = R(i,q+k) + (-1) * sine * DE(q+j,q+k)\n                     R(i,q+k) = R(i,q+k) + cosine * DE(i,q+k)\n\n                     DE(q+j,q+k) = R(q+j,q+k)\n                     DE(i,q+k) = R(i,q+k)\n\n                     R(q+j,q+k) = 0\n                     R(i,q+k) = 0\n&quot;);
  5021        |     |     |    
  5022        |     |     +--- fprintf(fp,&quot;                  end do\n               end do\n               q = q + 1\n            end do\n         end if\n\n&quot;);
  5023        |     |     +--- /*整形終了*/
  5024        |     |     |                                     
  5025        |     |     |    //標本点とその実測値のセット部分 
  5026        |     |     +--- fprintf(fp,&quot;         q = isw\n         q2 = dspline_isw(q)\n         h(kk) = q\n\n&quot;);
  5027        |     |     +--- fprintf(fp,&quot;         DE(p,q2) = 1\n         DE(p,nn+1) = time\n\n&quot;);
  5028        |     |     |    
  5029        |     |     +--- //ギブンス変換ループ部分------------------
  5030        |     |     |                                               
  5031        |     |     +--- fprintf(fp,&quot;         do q2 = q2, nn\n\n&quot;);
  5032        |     |     |    
  5033        |     |     +--- //G用計算部分
  5034        |     |     +--- fprintf(fp,&quot;            radius = dsqrt( ( DE(q2,q2) ) * ( DE(q2,q2) ) + ( DE(p,q2) ) * ( DE(p,q2) ) )\n\n&quot;);
  5035        |     |     +--- fprintf(fp,&quot;            if ( radius .eq. 0 ) then\n               cycle\n            endif\n\n&quot;);
  5036        |     |     +--- fprintf(fp,&quot;            cosine = DE(q2,q2) / radius\n            sine = DE(p,q2) / radius\n\n&quot;);
  5037        |     |     |    
  5038        |     |     +--- //R=回転行列*DEギブンス変換部分
  5039        |     |     +--- fprintf(fp,&quot;            do i = q2, q2 + 2 * p3_2nd_2 + 1\n               if ( i .eq. p + 1 ) then\n                  exit\n               end if\n\n&quot;);
  5040        |     |     +--- fprintf(fp,&quot;               R(q2,i) = R(q2,i) + cosine * DE(q2,i)\n               R(q2,i) = R(q2,i) + sine * DE(p,i)\n\n               R(p,i) = R(p,i) + (-1) * sine * DE(q2,i)\n               R(p,i) = R(p,i) + cosine * DE(p,i)\n\n               DE(q2,i) = R(q2,i)\n               DE(p,i) = R(p,i)\n\n               R(q2,i) = 0\n               R(p,i) = 0\n\n&quot;);
  5041        |     |     +--- fprintf(fp,&quot;               if ( i .eq. q2 + 2 * p3_2nd_2 + 1 ) then\n                  R(q2,p) = R(q2,p) + cosine * DE(q2,p)\n                  R(q2,p) = R(q2,p) + sine * DE(p,p)\n\n                  R(p,p) = R(p,p) + (-1) * sine * DE(q2,p)\n                  R(p,p) = R(p,p) + cosine * DE(p,p)\n\n                  DE(q2,p) = R(q2,p)\n                  DE(p,p) = R(p,p)\n\n                  R(q2,p) = 0\n                  R(p,p) = 0\n               end if\n&quot;);
  5042        |     |     |    
  5043        |     |     +--- fprintf(fp,&quot;            end do\n&quot;);
  5044        |     |     |    
  5045        |     |     +--- //ギブンス変換ループここまで
  5046        |     |     |                                 
  5047        |     |     +--- fprintf(fp,&quot;         end do\n\n         kk = kk + 1\n&quot;);
  5048        |     |     |    
  5049        |     |     +--- //Dswitch2ここまで
  5050        |     |     +--- fprintf(fp,&quot;      end if\n\n&quot;);
  5051        |     |     |    
  5052        |     |     +--- //関数ここまで
  5053        |     |     +--- fprintf(fp,&quot;      return\n\nend subroutine dynamicDspline2%s%s\n\n&quot;, TuneGroupName.c_str(), Name.c_str() );
              |     |   +-+---+ 
  5054        |     |   |  }  | 
              |     |   +-----+ 
  5055        |     +--- //2次元用d-Spline（実行時自動チューニング用）ここまで
              |   +-+---+ 
  5056        |   |  }  | 
              |   +-----+ 
  5057        +--- //2次元用d-Spline　ここまで
  5058        +--- //      
  5059        |    //Fortran90対応のd-spline用追加部分---------------------------------------------------------------------   
  5060        |    //ここまで                                                                                                 
  5061        |    //                                                                                                         
  5062        |    /*******************************************************************************************************/  
  5063        |                                                                                                               
            +-+---+ 
  5064      |  }  | 
            +-----+ 
</pre>


</body>
</html>
