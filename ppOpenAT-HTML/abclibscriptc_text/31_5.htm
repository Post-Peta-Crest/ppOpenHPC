
<html>
<head>
<title>Eval 関数説明</title><base target="main">
<link rel ="stylesheet" type="text/css" href="stylesheet.css" title="stylesheet">
<meta http-equiv="Content-Type" content="text/html;charset=Shift_JIS">
</head>

<body bgcolor="#ffffff">

<div align="right"><font size="2">ABCLibScriptC プロジェクト</font></div>

<table width=100% bgcolor="#e6e6fa" class="titlebgcolor" border="1" cellpadding="7" cellspacing="0">
<tr>
    <td><font class="titlefont">21.5. Eval 関数説明</font></td>
</tr>
</table>

<p></p>
<table border="1">
<tr><th align="left" nowrap>関数名</th>        <td nowrap>Eval</td></tr>
<tr><th align="left" nowrap>定義ファイル名</th><td nowrap>pass2.cpp</td></tr>
<tr><th align="left" nowrap>定義行</th>        <td nowrap>2170</td></tr>
<tr><th align="left" nowrap>宣言形式</th>      <td nowrap>int Eval ( TList * TokenList , int sPos , int ePos , TList * ValDataList , double * dData )</td></tr>
<tr><th align="left" nowrap>概要</th>          <td nowrap>sPosからePosの式の解析と評価を実行する。<br>使用したトークンの数を返す。<br>定数として評価出来た場合（Parameter,Const）は、EvalConstF=trueを設定 。<br>Paramater文の定数の計算に使用される。<br><br>対象トークンは、 tid_Oprと数値（整数、実数）、数値、一部の関数。<br>関数の引数部分の解析も行われる。<br> = を含む代入文に関しての処理は、呼び出し側で行う。（右辺のみが対象）</td></tr>
<tr><th align="left" nowrap>戻り値</th>        <td nowrap>使用したトークンの数を返す。</td></tr>
<tr><th align="left" nowrap>パラメタ説明</th>  <td nowrap>TokenList   トークンリスト<br>sPos    開始位置<br>ePos    終了位置<br>ValDataList 変数データリスト<br>dData   結果データ格納先</td></tr>
<tr><th align="left" nowrap>機能説明</th>      <td nowrap></td></tr>
<tr><th align="left" nowrap>備考</th>          <td nowrap>現在はFortranのParamater文用</td></tr>
</table>

<p></p>
呼出し元関数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap><a href="31_2.htm">AddDataDef_Fortran</a></td>
<td nowrap><a href="5_3.htm">pass2.cpp</a></td>
<td nowrap><a href="31_2.htm">1469</a></td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap><a href="31_18.htm">Pass2_Fortran</a></td>
<td nowrap><a href="5_3.htm">pass2.cpp</a></td>
<td nowrap><a href="31_18.htm">292</a></td>
</tr>
</table>

<p></p>
呼出し先関数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap>TList::Add</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap>64</td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap>TList::Delete</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap>65</td>
</tr>
<tr>
<td nowrap>3</td>
<td nowrap><a href="16_2_6.htm">TMainF::ErrMessage</a></td>
<td nowrap><a href="5_1.htm">main.cpp</a></td>
<td nowrap><a href="16_2_6.htm">767</a></td>
</tr>
<tr>
<td nowrap>4</td>
<td nowrap>LowerCase</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap>109</td>
</tr>
<tr>
<td nowrap>5</td>
<td nowrap>pow</td>
<td nowrap><br></td>
<td nowrap><br></td>
</tr>
</table>

<p></p>
参照外部変数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap>EvalConstF</td>
<td nowrap><a href="5_3.htm">pass2.cpp</a></td>
<td nowrap>60</td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap>ImplType</td>
<td nowrap><a href="5_3.htm">pass2.cpp</a></td>
<td nowrap>59</td>
</tr>
<tr>
<td nowrap>3</td>
<td nowrap>MainF</td>
<td nowrap><a href="5_1.htm">main.cpp</a></td>
<td nowrap>53</td>
</tr>
</table>

<p></p>
参照先一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>種別</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap><a href="27_1.htm">Enum_DataType</a></td>
<td nowrap>列挙型</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap><a href="27_1.htm">75</a></td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap><a href="16_1_1.htm">TList</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap><a href="16_1_1.htm">57</a></td>
</tr>
<tr>
<td nowrap>3</td>
<td nowrap><a href="16_9_1.htm">TToken</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_10.htm">pass1.h</a></td>
<td nowrap><a href="16_9_1.htm">294</a></td>
</tr>
<tr>
<td nowrap>4</td>
<td nowrap><a href="16_11_1.htm">TValData</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap><a href="16_11_1.htm">106</a></td>
</tr>
</table>

<p></p>
<pre>
関数論理チャート

        |  +--------------------------------------------------------------------------------+ 
  2170  +--+ int Eval(TList *TokenList,int sPos,int ePos,TList *ValDataList,double *dData)  | 
  2171     | {                                                                              | 
           +--+-----------------------------------------------------------------------------+ 
  2172        +--- int i;
  2173        +--- TToken *Token,*LastTokData;
  2174        +--- int TokId,LastTokId;
  2175        +--- string TokStr,LastTokStr;
  2176        +--- int UseToken = 0;
  2177        +--- TList *DestList = new TList;
  2178        +--- TList *OpcList = new TList;
  2179        +--- int brLevel = 0;
  2180        |    
  2181        +--- *dData = 0.0;
  2182        +--- LastTokId = -1;
  2183        +--- EvalConstF = false;
  2184        +--- //  for(i = sPos ; i &lt;= ePos ; i++){
              |  +----------------------------------+ 
  2185        +--+ for(i = sPos ; i &lt; ePos ; i++){  | 
              |  +--+-------------------------------+ 
  2186        |     +--- Token = (TToken *)TokenList-&gt;Items[i];
  2187        |     +--- TokId = Token-&gt;TokId;
  2188        |     +--- TokStr = Token-&gt;Str;
  2189        |     |    
              |     |  +----------------+ 
  2190        |     +--+ switch(TokId){ | 
              |     |  +--+-------------+ 
              |     |     +-------------------------------+ 
  2191        |     |     |  case tid_ConstInt:  // 定数  | 
              |     |     +-------------------------------+ 
              |     |     +-------------------------------+ 
  2192        |     |     |  case tid_ConstReal: // 定数  | 
              |     |     +-------------------------------+ 
  2193        |     |     +--- DestList-&gt;Add((void *)Token);
              |     |     |  +--------+ 
  2194        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-----------------------------+ 
  2195        |     |     |  case tid_Opr:   // 演算子  | 
              |     |     +-----------------------------+ 
              |     |     +---------------------------------------------------------+ 
  2196        |     |     |  case tid_Koron: // 部分配列用演算子 f90対応.2013/03/07 | 
              |     |     +---------------------------------------------------------+ 
  2197        |     |     +--- //
  2198        |     |     |    // 演算子の単項かどうかと優先順位を求める。  
  2199        |     |     |    // 前が空か、演算子か、（ならば単項となる。  
  2200        |     |     |    //                                           
              |     |     |  +--------------------------------------------------------------------+ 
  2201        |     |     +--+ if((i == sPos)||(LastTokId == tid_Opr)||(LastTokId == tid_Kakko)){ | 
              |     |     |  +--+-----------------------------------------------------------------+ 
  2202        |     |     |     +--- // 単項演算子
  2203        |     |     |     +--- Token-&gt;priority = 10; // 優先度を変更
  2204        |     |     |     +--- OpcList-&gt;Add((void *)Token);
              |     |     |     |  +--------+ 
  2205        |     |     |     +--+ break; | 
              |     |     |     |  +--------+ 
              |     |     |   +-+---+ 
  2206        |     |     |   |  }  | 
              |     |     |   +-----+ 
  2207        |     |     +--- //
  2208        |     |     |    // ２項演算子の処理（優先順位を求めること）  
  2209        |     |     |    //                                           
              |     |     |  +--------------------------+ 
  2210        |     |     +--+ if(OpcList-&gt;Count &gt; 0){  | 
              |     |     |  +--+-----------------------+ 
  2211        |     |     |     +--- LastTokData = (TToken *)OpcList-&gt;Items[OpcList-&gt;Count-1];
  2212        |     |     |     +--- LastTokStr = LastTokData-&gt;Str;
              |     |     |     |  +--------------------------------------+ 
  2213        |     |     |     +--+ if(LastTokData-&gt;TokId == tid_Kakko){ | 
              |     |     |     |  +--+-----------------------------------+ 
  2214        |     |     |     |     +--- OpcList-&gt;Add((void *)Token); // スタックに積む
              |     |     |     |   +-+---+ 
  2215        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+-----------------------------------------------------------------------+ 
  2215        |     |     |     |   |  else if((Token-&gt;priority &lt;= LastTokData-&gt;priority)&amp;&amp;(TokStr == &quot;**&quot;)){ | 
              |     |     |     |   +-+-----------------------------------------------------------------------+ 
  2216        |     |     |     |     +--- // ** 演算子は、右側結合
  2217        |     |     |     |     +--- OpcList-&gt;Add((void *)Token); // スタックに積む
              |     |     |     |   +-+---+ 
  2218        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+---------------------------------------------------+ 
  2218        |     |     |     |   |  else if(Token-&gt;priority &lt; LastTokData-&gt;priority){  | 
              |     |     |     |   +-+---------------------------------------------------+ 
  2219        |     |     |     |     +--- OpcList-&gt;Add((void *)Token); // スタックに積む
              |     |     |     |   +-+---+ 
  2220        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+-------+ 
  2220        |     |     |     |   |  else{  | 
              |     |     |     |   +-+-------+ 
              |     |     |     |     |  +----------------------------+ 
  2221        |     |     |     |     +--+ while(OpcList-&gt;Count &gt; 0){ | 
              |     |     |     |     |  +--+-------------------------+ 
  2222        |     |     |     |     |     +--- //
  2223        |     |     |     |     |     |    //  スタックの内容を取り出す。 
  2224        |     |     |     |     |     |    //                             
  2225        |     |     |     |     |     +--- LastTokData = (TToken *)OpcList-&gt;Items[OpcList-&gt;Count-1];
  2226        |     |     |     |     |     +--- LastTokStr = LastTokData-&gt;Str;
              |     |     |     |     |     |  +----------------------------------------------+ 
  2227        |     |     |     |     |     +--+ if(Token-&gt;priority &lt; LastTokData-&gt;priority){ | 
              |     |     |     |     |     |  +--+-------------------------------------------+ 
              |     |     |     |     |     |     |  +----------------------------+ 
  2228        |     |     |     |     |     |     +--+ if(Token-&gt;priority != 10){ | 
              |     |     |     |     |     |     |  +--+-------------------------+ 
              |     |     |     |     |     |     |     |  +--------+ 
  2229        |     |     |     |     |     |     |     +--+ break; | 
              |     |     |     |     |     |     |     |  +--------+ 
              |     |     |     |     |     |     |   +-+---+ 
  2230        |     |     |     |     |     |     |   |  }  | 
              |     |     |     |     |     |     |   +-+---+ 
              |     |     |     |     |     |     |   +-+-------+ 
  2230        |     |     |     |     |     |     |   |  else{  | 
              |     |     |     |     |     |     |   +-+-------+ 
  2231        |     |     |     |     |     |     |     +--- // 単項演算子どおしの場合は、後方から
              |     |     |     |     |     |     |     |  +------------------------------------------------+ 
  2232        |     |     |     |     |     |     |     +--+ if(Token-&gt;priority &lt;= LastTokData-&gt;priority){  | 
              |     |     |     |     |     |     |     |  +--+---------------------------------------------+ 
              |     |     |     |     |     |     |     |     |  +--------+ 
  2233        |     |     |     |     |     |     |     |     +--+ break; | 
              |     |     |     |     |     |     |     |     |  +--------+ 
              |     |     |     |     |     |     |     |   +-+---+ 
  2234        |     |     |     |     |     |     |     |   |  }  | 
              |     |     |     |     |     |     |     |   +-----+ 
              |     |     |     |     |     |     |   +-+---+ 
  2235        |     |     |     |     |     |     |   |  }  | 
              |     |     |     |     |     |     |   +-----+ 
              |     |     |     |     |     |   +-+---+ 
  2236        |     |     |     |     |     |   |  }  | 
              |     |     |     |     |     |   +-----+ 
  2237        |     |     |     |     |     +--- DestList-&gt;Add((void *)LastTokData);
  2238        |     |     |     |     |     +--- OpcList-&gt;Delete(OpcList-&gt;Count-1);
              |     |     |     |     |   +-+---+ 
  2239        |     |     |     |     |   |  }  | 
              |     |     |     |     |   +-----+ 
  2240        |     |     |     |     +--- OpcList-&gt;Add((void *)Token); // スタックに積む
              |     |     |     |   +-+---+ 
  2241        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  2242        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  2242        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  2243        |     |     |     +--- OpcList-&gt;Add((void *)Token); // スタックに積む
              |     |     |   +-+---+ 
  2244        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------+ 
  2245        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-------------------+ 
  2246        |     |     |  case tid_Kakko:  | 
              |     |     +-------------------+ 
  2247        |     |     +--- brLevel++;
              |     |     |  +--------+ 
  2248        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +---------------------------------------------------+ 
  2249        |     |     |  case tid_Kokka: // Nest = 0の場合は終了となる。  | 
              |     |     +---------------------------------------------------+ 
              |     |     |  +--------------------+ 
  2250        |     |     +--+ if(brLevel &lt;= 0){  | 
              |     |     |  +--+-----------------+ 
  2251        |     |     |     +--- // )まで解析があるので、エラーとはしない
  2252        |     |     |     +--- UseToken = i-sPos;
  2253        |     |     |     +--- i = ePos+1;
              |     |     |     |  +--------+ 
  2254        |     |     |     +--+ break; | 
              |     |     |     |  +--------+ 
              |     |     |   +-+---+ 
  2255        |     |     |   |  }  | 
              |     |     |   +-----+ 
  2256        |     |     +--- brLevel--;
              |     |     |  +----------------------------+ 
  2257        |     |     +--+ while(OpcList-&gt;Count &gt; 0){ | 
              |     |     |  +--+-------------------------+ 
  2258        |     |     |     +--- LastTokData = (TToken *)OpcList-&gt;Items[OpcList-&gt;Count-1];
  2259        |     |     |     +--- LastTokStr = LastTokData-&gt;Str;
              |     |     |     |  +----------------------------------------+ 
  2260        |     |     |     +--+ if(LastTokData -&gt;TokId == tid_Kakko){  | 
              |     |     |     |  +--+-------------------------------------+ 
  2261        |     |     |     |     +--- // 最後が（なら削除で終わり
  2262        |     |     |     |     +--- OpcList-&gt;Delete(OpcList-&gt;Count-1);
              |     |     |     |     |  +--------+ 
  2263        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  2264        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
  2265        |     |     |     +--- DestList-&gt;Add((void *)LastTokData);
  2266        |     |     |     +--- OpcList-&gt;Delete(OpcList-&gt;Count-1);
              |     |     |     |  +--------------------------+ 
  2267        |     |     |     +--+ if(OpcList-&gt;Count == 0){ | 
              |     |     |     |  +--+-----------------------+ 
  2268        |     |     |     |     +--- // )まで解析があるので、エラーとはしない
  2269        |     |     |     |     +--- //                  ErrMsg(TokenList,i,&quot;対応する'('がありません。&quot;);
              |     |     |     |     |  +--------+ 
  2270        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  2271        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  2272        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------+ 
  2273        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-------------------+ 
  2274        |     |     |  case tid_Kannma: | 
              |     |     +-------------------+ 
              |     |     |  +------------------------------------------------------+ 
  2275        |     |     +--+ if(brLevel == 0){ // ()内以外の&quot;,&quot;は評価を終了する。 | 
              |     |     |  +--+---------------------------------------------------+ 
  2276        |     |     |     +--- UseToken = i-sPos;
  2277        |     |     |     +--- i = ePos+1;
              |     |     |   +-+---+ 
  2278        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------+ 
  2279        |     |     +--+ break; | 
              |     |     |  +--------+ 
  2280        |     |     +--- //      case tid_Koron:
              |     |     +-----------------------+ 
  2281        |     |     |  case tid_KoronKoron: | 
              |     |     +-----------------------+ 
              |     |     +-----------------+ 
  2282        |     |     |  case tid_Set:  | 
              |     |     +-----------------+ 
              |     |     +---------------------+ 
  2283        |     |     |  case tid_LineEnd:  | 
              |     |     +---------------------+ 
  2284        |     |     +--- UseToken = i-sPos;
  2285        |     |     +--- i = ePos+1;
              |     |     |  +--------+ 
  2286        |     |     +--+ break; | 
              |     |     |  +--------+ 
  2287        |     |     +--- //      case -1:    // 変数・関数トークン
              |     |     +-----------------------------------------+ 
  2288        |     |     |  case tid_Val:    // 変数・関数トークン | 
              |     |     +-----------------------------------------+ 
  2289        |     |     +--- //
  2290        |     |     |    // 未定義トークン、PARAMETER変数でないかをチェックする 
  2291        |     |     |    // PARAMETER変数の場合は、定数と同じ扱いとする。       
  2292        |     |     |    // それ以外の場合は、終了する。                        
  2293        |     |     |    // Nestが０の場合は、エラーとはしない。                
  2294        |     |     |    // Exp.  12*34*??? はエラー（スタックに残る）          
  2295        |     |     |    // Exp.  12*34 ??? はエラー（スタックに残らない）      
  2296        |     |     |    //                                                     
  2297        |     |     +--- int ValIdx;
  2298        |     |     +--- TValData *ValData;
  2299        |     |     |    
  2300        |     |     +--- Token-&gt;RefType = vrf_ref; // 変数参照
              |     |     |  +------------------------------------------------------------+ 
  2301        |     |     +--+ for(ValIdx = 0 ; ValIdx &lt; ValDataList-&gt;Count ; ValIdx++){  | 
              |     |     |  +--+---------------------------------------------------------+ 
  2302        |     |     |     +--- // 有効なPARAMETER変数が見つかった場合には、
  2303        |     |     |     |    // その値をToken-&gt;dDataにセットして抜ける    
  2304        |     |     |     +--- ValData = (TValData *)ValDataList-&gt;Items[ValIdx];
              |     |     |     |  +------------------------------------------------------+ 
  2305        |     |     |     +--+ if((LowerCase(ValData-&gt;Str) == LowerCase(TokStr))&amp;&amp;  | 
  2306        |     |     |     |  |     (ValData-&gt;ModuleIdx == Token-&gt;ModuleIdx)){       | 
              |     |     |     |  +--+---------------------------------------------------+ 
  2307        |     |     |     |     +--- Token-&gt;ValData = ValData; // トークンに変数を関連付ける
  2308        |     |     |     |     +--- ValData-&gt;RefCount++;
  2309        |     |     |     |     +--- Token-&gt;dData = ValData-&gt;dData;
  2310        |     |     |     |     +--- DestList-&gt;Add((void *)Token);
  2311        |     |     |     |     +--- ValIdx = ValDataList-&gt;Count+10;
              |     |     |     |     |  +--------+ 
  2312        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  2313        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  2314        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------------------------------------+ 
  2315        |     |     +--+ if(ValIdx != ValDataList-&gt;Count+10){ | 
              |     |     |  +--+-----------------------------------+ 
  2316        |     |     |     +--- // 最初に出現した変数
  2317        |     |     |     |    // 本来は、エラー（警告）だが、変数として追加する形としてある。  
  2318        |     |     |     +--- ValData = new TValData(TokStr);
  2319        |     |     |     +--- ValDataList-&gt;Add((void *)ValData);
  2320        |     |     |     +--- ValData-&gt;ModuleIdx = Token-&gt;ModuleIdx;
  2321        |     |     |     +--- ValData-&gt;DataType = ImplType[(int)TokStr[0]]; // 暗黙の宣言
  2322        |     |     |     +--- Token-&gt;ValData = ValData; // トークンに変数を関連付ける
  2323        |     |     |     +--- ValData-&gt;RefCount++;
  2324        |     |     |     +--- Token-&gt;dData = ValData-&gt;dData;
  2325        |     |     |     +--- DestList-&gt;Add((void *)Token);
  2326        |     |     |     |    
  2327        |     |     |     +--- // 次が(で 定義が以前にない場合は、関数
  2328        |     |     |     +--- Token = (TToken *)TokenList-&gt;Items[i+1];
              |     |     |     |  +--------------------------------+ 
  2329        |     |     |     +--+ if(Token-&gt;TokId == tid_Kakko){ | 
              |     |     |     |  +--+-----------------------------+ 
  2330        |     |     |     |     +--- ValData-&gt;ArrayOrFuncF = true;
  2331        |     |     |     |     +--- ValData-&gt;DataType = (Enum_DataType)(ImplType[(int)TokStr[0]] + (int)dt_IntFunc);
              |     |     |     |   +-+---+ 
  2332        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  2333        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------+ 
  2334        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +---------------------------------------+ 
  2335        |     |     |  default:    // その他のトークン then | 
              |     |     +---------------------------------------+ 
  2336        |     |     +--- UseToken = i-sPos;
  2337        |     |     +--- i = ePos+1;
              |     |     |  +--------+ 
  2338        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |   +-+---+ 
  2339        |     |   |  }  | 
              |     |   +-----+ 
  2340        |     +--- LastTokId = TokId;
              |   +-+---+ 
  2341        |   |  }  | 
              |   +-----+ 
  2342        +--- //
  2343        |    //  スタック上に残ったトークンを掃き出す 
  2344        |    //                                       
              |  +------------------------------+ 
  2345        +--+ while(OpcList-&gt;Count != 0){  | 
              |  +--+---------------------------+ 
  2346        |     +--- Token = (TToken *)OpcList-&gt;Items[OpcList-&gt;Count-1];
  2347        |     +--- TokStr = Token-&gt;Str;
              |     |  +--------------------------------+ 
  2348        |     +--+ if(Token-&gt;TokId == tid_Kakko){ | 
              |     |  +--+-----------------------------+ 
  2349        |     |     +--- MainF-&gt;ErrMessage(i,&quot;対応する')'がありません。&quot;);
              |     |   +-+---+ 
  2350        |     |   |  }  | 
              |     |   +-----+ 
  2351        |     +--- DestList-&gt;Add((void *)Token);
  2352        |     +--- OpcList-&gt;Delete(OpcList-&gt;Count-1);
              |   +-+---+ 
  2353        |   |  }  | 
              |   +-----+ 
  2354        +--- //
  2355        |    // 実際の演算を実行する。                            
  2356        |    // 型としては、 Int,Realの２種類だけをサポートする。 
  2357        |    // 論理型、複素数、文字型は、エラーとして扱う。      
  2358        |    //                                                   
  2359        +--- double stack[1024];
  2360        +--- double IntF[1024];
  2361        +--- int sp = 0;
  2362        |    
  2363        +--- EvalConstF = true;
              |  +------------------------------------------+ 
  2364        +--+ for(i = 0 ; i &lt; DestList-&gt;Count ; i++){  | 
              |  +--+---------------------------------------+ 
              |     |  +------------------+ 
  2365        |     +--+ if(!EvalConstF){ | 
              |     |  +--+---------------+ 
              |     |     |  +--------+ 
  2366        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |   +-+---+ 
  2367        |     |   |  }  | 
              |     |   +-----+ 
  2368        |     +--- Token = (TToken *)DestList-&gt;Items[i];
  2369        |     +--- TokStr = Token-&gt;Str;
              |     |  +------------------------+ 
  2370        |     +--+ switch(Token-&gt;TokId){  | 
              |     |  +--+---------------------+ 
              |     |     +-------------------------------+ 
  2371        |     |     |  case tid_ConstInt:  // 定数  | 
              |     |     +-------------------------------+ 
  2372        |     |     +--- IntF[sp] = true;
  2373        |     |     +--- stack[sp++] = Token-&gt;dData;
              |     |     |  +--------+ 
  2374        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-------------------------------+ 
  2375        |     |     |  case tid_ConstReal: // 定数  | 
              |     |     +-------------------------------+ 
  2376        |     |     +--- IntF[sp] = false;
  2377        |     |     +--- stack[sp++] = Token-&gt;dData;
              |     |     |  +--------+ 
  2378        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-----------------+ 
  2379        |     |     |  case tid_Opr:  | 
              |     |     +-----------------+ 
              |     |     |  +------------------------------------------+ 
  2380        |     |     +--+ if(Token-&gt;priority == 10){ // 単項演算子 | 
              |     |     |  +--+---------------------------------------+ 
              |     |     |     |  +--------------+ 
  2381        |     |     |     +--+ if(sp &lt; 1){  | 
              |     |     |     |  +--+-----------+ 
  2382        |     |     |     |     +--- UseToken = -1;
              |     |     |     |     |  +--------+ 
  2383        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  2384        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |     |  +--------------------+ 
  2385        |     |     |     +--+ if(TokStr == &quot;-&quot;){ | 
              |     |     |     |  +--+-----------------+ 
  2386        |     |     |     |     +--- stack[sp-1] = -stack[sp-1];
              |     |     |     |   +-+---+ 
  2387        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |     |  +--------+ 
  2388        |     |     |     +--+ break; | 
              |     |     |     |  +--------+ 
              |     |     |   +-+---+ 
  2389        |     |     |   |  }  | 
              |     |     |   +-----+ 
  2390        |     |     +--- //
  2391        |     |     |    // ２項演算子  
  2392        |     |     |    //             
              |     |     |  +--------------+ 
  2393        |     |     +--+ if(sp &lt; 2){  | 
              |     |     |  +--+-----------+ 
  2394        |     |     |     +--- UseToken = -1;
              |     |     |     |  +--------+ 
  2395        |     |     |     +--+ break; | 
              |     |     |     |  +--------+ 
              |     |     |   +-+---+ 
  2396        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------------------+ 
  2397        |     |     +--+ if(TokStr == &quot;+&quot;){ | 
              |     |     |  +--+-----------------+ 
  2398        |     |     |     +--- stack[sp-2] = stack[sp-2] + stack[sp-1];
              |     |     |   +-+---+ 
  2399        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------------------------+ 
  2399        |     |     |   |  else if(TokStr == &quot;-&quot;){  | 
              |     |     |   +-+-------------------------+ 
  2400        |     |     |     +--- stack[sp-2] = stack[sp-2] - stack[sp-1];
              |     |     |   +-+---+ 
  2401        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------------------------+ 
  2401        |     |     |   |  else if(TokStr == &quot;*&quot;){  | 
              |     |     |   +-+-------------------------+ 
  2402        |     |     |     +--- stack[sp-2] = stack[sp-2] * stack[sp-1];
              |     |     |   +-+---+ 
  2403        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------------------------+ 
  2403        |     |     |   |  else if(TokStr == &quot;/&quot;){  | 
              |     |     |   +-+-------------------------+ 
              |     |     |     |  +----------------------------------------+ 
  2404        |     |     |     +--+ if(stack[sp-1] == 0){   // 0除算エラー | 
              |     |     |     |  +--+-------------------------------------+ 
  2405        |     |     |     |     +--- EvalConstF = false;
              |     |     |     |   +-+---+ 
  2406        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+-------+ 
  2406        |     |     |     |   |  else{  | 
              |     |     |     |   +-+-------+ 
  2407        |     |     |     |     +--- stack[sp-2] = stack[sp-2] / stack[sp-1];
              |     |     |     |   +-+---+ 
  2408        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  2409        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------------------------+ 
  2409        |     |     |   |  else if(TokStr == &quot;**&quot;){ | 
              |     |     |   +-+-------------------------+ 
  2410        |     |     |     +--- stack[sp-2] = pow(stack[sp-2],stack[sp-1]);
              |     |     |   +-+---+ 
  2411        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------------------------------+ 
  2412        |     |     +--+ if(IntF[sp-2] &amp;&amp; IntF[sp-1]){  | 
              |     |     |  +--+-----------------------------+ 
  2413        |     |     |     +--- stack[sp-2] = (int)stack[sp-2];
              |     |     |   +-+---+ 
  2414        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  2414        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  2415        |     |     |     +--- IntF[sp-2] = false;
              |     |     |   +-+---+ 
  2416        |     |     |   |  }  | 
              |     |     |   +-----+ 
  2417        |     |     +--- sp--;
              |     |     |  +--------+ 
  2418        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +---------------------------------------+ 
  2419        |     |     |  default:    // パラメータ変数の処理  | 
              |     |     +---------------------------------------+ 
              |     |     |  +----------------------------------------------------------------------------+ 
  2420        |     |     +--+ if((Token-&gt;ValData == NULL)||(!((TValData *)Token-&gt;ValData)-&gt;ParamValF)){  | 
              |     |     |  +--+-------------------------------------------------------------------------+ 
  2421        |     |     |     +--- EvalConstF = false;
              |     |     |   +-+---+ 
  2422        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  2422        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
              |     |     |     |  +--------------------------------------------------------+ 
  2423        |     |     |     +--+ if(((TValData *)Token-&gt;ValData)-&gt;DataType == dt_Int){  | 
              |     |     |     |  +--+-----------------------------------------------------+ 
  2424        |     |     |     |     +--- IntF[sp] = true;
              |     |     |     |   +-+---+ 
  2425        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+-------+ 
  2425        |     |     |     |   |  else{  | 
              |     |     |     |   +-+-------+ 
  2426        |     |     |     |     +--- IntF[sp] = false;
              |     |     |     |   +-+---+ 
  2427        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  2428        |     |     |   |  }  | 
              |     |     |   +-----+ 
  2429        |     |     +--- stack[sp++] = Token-&gt;dData;
              |     |     |  +--------+ 
  2430        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |   +-+---+ 
  2431        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
  2432        |   |  }  | 
              |   +-----+ 
              |  +--------------+ 
  2433        +--+ if(sp != 1){ | 
              |  +--+-----------+ 
  2434        |     +--- EvalConstF = false;
              |   +-+---+ 
  2435        |   |  }  | 
              |   +-----+ 
  2436        +--- *dData = stack[0]; // 最後のスタックが値となる。
  2437        |                                                     
  2438        +--- delete DestList;
  2439        +--- delete OpcList;
              |  +------------------+ 
  2440        +--+ return UseToken; | 
              |  +------------------+ 
            +-+---+ 
  2441      |  }  | 
            +-----+ 
</pre>


</body>
</html>
