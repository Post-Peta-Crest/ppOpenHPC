
<html>
<head>
<title>AddDataDef_C 関数説明</title><base target="main">
<link rel ="stylesheet" type="text/css" href="stylesheet.css" title="stylesheet">
<meta http-equiv="Content-Type" content="text/html;charset=Shift_JIS">
</head>

<body bgcolor="#ffffff">

<div align="right"><font size="2">ABCLibScriptC プロジェクト</font></div>

<table width=100% bgcolor="#e6e6fa" class="titlebgcolor" border="1" cellpadding="7" cellspacing="0">
<tr>
    <td><font class="titlefont">21.1. AddDataDef_C 関数説明</font></td>
</tr>
</table>

<p></p>
<table border="1">
<tr><th align="left" nowrap>関数名</th>        <td nowrap>AddDataDef_C</td></tr>
<tr><th align="left" nowrap>定義ファイル名</th><td nowrap>pass2.cpp</td></tr>
<tr><th align="left" nowrap>定義行</th>        <td nowrap>1038</td></tr>
<tr><th align="left" nowrap>宣言形式</th>      <td nowrap>void AddDataDef_C ( TList * TokenList , int sPos , int ePos , TList * ValDataList )</td></tr>
<tr><th align="left" nowrap>概要</th>          <td nowrap>intやdoubleなどのデータ宣言の処理を行ない、変数リストに変数と型を追加す<br>る。変数と関数の両方が対象となる。<br>定義の順番に沿った解析を行う。元の定義文字列を保持する。</td></tr>
<tr><th align="left" nowrap>戻り値</th>        <td nowrap>なし</td></tr>
<tr><th align="left" nowrap>パラメタ説明</th>  <td nowrap>TokenList   処理するトークンリスト<br>sPos    TokenList上での開始位置<br>ePos    TokenList上での終了位置<br>ValDataList 変数データリスト</td></tr>
<tr><th align="left" nowrap>機能説明</th>      <td nowrap>intやdoubleなどのデータ宣言の処理を行ない、変数リストに変数と型を追加。<br>ValDataには、どのモジュールでの宣言かが、ModuleIdxかかから設定される。<br>変数には、ModuleIdxも保持して、ModuleIdxが異なる場合は別変数とする。</td></tr>
<tr><th align="left" nowrap>備考</th>          <td nowrap></td></tr>
</table>

<p></p>
呼出し元関数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap><a href="31_17.htm">Pass2_C</a></td>
<td nowrap><a href="5_3.htm">pass2.cpp</a></td>
<td nowrap><a href="31_17.htm">657</a></td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap><a href="16_5_6.htm">TScript::TScript</a></td>
<td nowrap><a href="5_4.htm">pass3.cpp</a></td>
<td nowrap><a href="16_5_6.htm">135</a></td>
</tr>
</table>

<p></p>
呼出し先関数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap>TList::Add</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap>64</td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap>Trim</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap>105</td>
</tr>
<tr>
<td nowrap>3</td>
<td nowrap>compare</td>
<td nowrap><br></td>
<td nowrap><br></td>
</tr>
</table>

<p></p>

<p></p>
参照先一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>種別</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap><a href="27_1.htm">Enum_DataType</a></td>
<td nowrap>列挙型</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap><a href="27_1.htm">75</a></td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap><a href="16_1_1.htm">TList</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap><a href="16_1_1.htm">57</a></td>
</tr>
<tr>
<td nowrap>3</td>
<td nowrap><a href="16_9_1.htm">TToken</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_10.htm">pass1.h</a></td>
<td nowrap><a href="16_9_1.htm">294</a></td>
</tr>
<tr>
<td nowrap>4</td>
<td nowrap><a href="16_11_1.htm">TValData</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap><a href="16_11_1.htm">106</a></td>
</tr>
</table>

<p></p>
<pre>
関数論理チャート

        |  +--------------------------------------------------------------------------+ 
  1038  +--+ void AddDataDef_C(TList *TokenList,int sPos,int ePos,TList *ValDataList) | 
  1039     | {                                                                        | 
           +--+-----------------------------------------------------------------------+ 
  1040        +--- int i,j;
  1041        +--- TToken *Token,*Token2;
  1042        +--- int TokId;
  1043        +--- string TokStr,ValName;
  1044        +--- Enum_DataType DataType;
  1045        +--- int Nest,ArrayLevel;
  1046        +--- int DefPosS;
  1047        +--- string DefBaseStr,DefStr;
  1048        +--- bool SepF = false;
  1049        +--- bool NotValDefF = false;
  1050        |    
  1051        +--- DefPosS = sPos;
  1052        +--- DataType = dt_Int;
  1053        +--- DefBaseStr = &quot;&quot;;
  1054        +--- DefStr = &quot;&quot;;
  1055        +--- Token = (TToken *)TokenList-&gt;Items[sPos];
              |  +----------------------------------+ 
  1056        +--+ for(i = sPos ; i &lt; ePos ; i++){  | 
              |  +--+-------------------------------+ 
              |     |  +----------------------------------------+ 
  1057        |     +--+ if(i &gt;= TokenList-&gt;Count){ // tid_null | 
              |     |  +--+-------------------------------------+ 
              |     |     |  +--------+ 
  1058        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |   +-+---+ 
  1059        |     |   |  }  | 
              |     |   +-----+ 
  1060        |     +--- Token = (TToken *)TokenList-&gt;Items[i];
  1061        |     +--- TokId = Token-&gt;TokId;
  1062        |     +--- TokStr = Token-&gt;Str;
  1063        |     |    
              |     |  +----------------+ 
  1064        |     +--+ switch(TokId){ | 
              |     |  +--+-------------+ 
              |     |     +-----------------+ 
  1065        |     |     |  case tid_Val:  | 
              |     |     +-----------------+ 
              |     |     +-----------------+ 
  1066        |     |     |  case tid_Func: | 
              |     |     +-----------------+ 
              |     |     |  +--------+ 
  1067        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +---------------------+ 
  1068        |     |     |  case tid_LineEnd:  | 
              |     |     +---------------------+ 
              |     |     +---------------------+ 
  1069        |     |     |  case tid_ConstNum: | 
              |     |     +---------------------+ 
              |     |     |  +--------+ 
  1070        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-----------------------+ 
  1071        |     |     |  case tid_KagiKakko:  | 
              |     |     +-----------------------+ 
              |     |     +-----------------------+ 
  1072        |     |     |  case tid_KagiKokka:  | 
              |     |     +-----------------------+ 
              |     |     |  +--------+ 
  1073        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-------------------+ 
  1074        |     |     |  case tid_Kakko:  | 
              |     |     +-------------------+ 
              |     |     +-------------------+ 
  1075        |     |     |  case tid_Kokka:  | 
              |     |     +-------------------+ 
  1076        |     |     +--- // Cの場合、（)が出現した場合は、それ以前をクリア。（簡略化）
  1077        |     |     |    // Exp.  void func(int a); の voidはaの定義ではない。          
  1078        |     |     +--- SepF = true;
  1079        |     |     +--- DefStr = &quot;&quot;;
              |     |     |  +--------+ 
  1080        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-----------------+ 
  1081        |     |     |  case tid_Set:  | 
              |     |     +-----------------+ 
              |     |     +-----------------+ 
  1082        |     |     |  case tid_Set2: | 
              |     |     +-----------------+ 
              |     |     +---------------------+ 
  1083        |     |     |  case tid_Comment:  | 
              |     |     +---------------------+ 
  1084        |     |     +--- DefBaseStr = &quot;&quot;;
  1085        |     |     +--- DefStr = &quot;&quot;;
              |     |     |  +--------+ 
  1086        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +---------------------------+ 
  1087        |     |     |  case tid_Semikoron: // ; | 
              |     |     +---------------------------+ 
  1088        |     |     +--- NotValDefF = false; // 定義でない式フラグをクリア
              |     |     |  +--------+ 
  1089        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +---------------------------------------+ 
  1090        |     |     |  case tid_Kannma:    // 変数の区切り  | 
              |     |     +---------------------------------------+ 
  1091        |     |     +--- SepF = true;
  1092        |     |     +--- DefStr = &quot;&quot;;
              |     |     |  +--------+ 
  1093        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-----------------+ 
  1094        |     |     |  case tid_Opr:  | 
              |     |     +-----------------+ 
              |     |     |  +--------------------+ 
  1095        |     |     +--+ if(TokStr == &quot;*&quot;){ | 
              |     |     |  +--+-----------------+ 
  1096        |     |     |     +--- DefStr += Token-&gt;OrgStr;    // ポインタ
              |     |     |   +-+---+ 
  1097        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  1097        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
  1098        |     |     |     +--- DefBaseStr = &quot;&quot;;
  1099        |     |     |     +--- DefStr = &quot;&quot;;
              |     |     |   +-+---+ 
  1100        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------+ 
  1101        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-------------------------------------------------------------+ 
  1102        |     |     |  case tid_static:    // static は定義文字としては含めない。 | 
              |     |     +-------------------------------------------------------------+ 
              |     |     +-------------------------------------------------------------+ 
  1103        |     |     |  case tid_const:     // const は定義文字としては含めない。  | 
              |     |     +-------------------------------------------------------------+ 
  1104        |     |     +--- DefBaseStr = &quot;&quot;;
              |     |     |  +--------+ 
  1105        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-------------------------------+ 
  1106        |     |     |  case tid_void:      // 定義  | 
              |     |     +-------------------------------+ 
              |     |     +-----------------+ 
  1107        |     |     |  case tid_int:  | 
              |     |     +-----------------+ 
              |     |     +-------------------+ 
  1108        |     |     |  case tid_double: | 
              |     |     +-------------------+ 
              |     |     +-----------------+ 
  1109        |     |     |  case tid_char: | 
              |     |     +-----------------+ 
              |     |     +-------------------+ 
  1110        |     |     |  case tid_float:  | 
              |     |     +-------------------+ 
              |     |     +-------------------+ 
  1111        |     |     |  case tid_struct: | 
              |     |     +-------------------+ 
              |     |     |  +------------+ 
  1112        |     |     +--+ if(SepF){  | 
              |     |     |  +--+---------+ 
  1113        |     |     |     +--- DefBaseStr = &quot;&quot;;
              |     |     |   +-+---+ 
  1114        |     |     |   |  }  | 
              |     |     |   +-----+ 
  1115        |     |     +--- DefBaseStr += Token-&gt;OrgStr;
  1116        |     |     +--- // 次のトークンが,()の場合は、クリアする。
  1117        |     |     |    // Exp.  printf(&quot;%d&quot;,c); の &quot;%d&quot;は定義ではない。 
              |     |     |  +------------------------------+ 
  1118        |     |     +--+ if(i+1 &lt; TokenList-&gt;Count){  | 
              |     |     |  +--+---------------------------+ 
  1119        |     |     |     +--- Token2 = (TToken *)TokenList-&gt;Items[i+1];
              |     |     |     |  +------------------------------------+ 
  1120        |     |     |     +--+ if((Token2-&gt;TokId == tid_Kannma)|| | 
  1121        |     |     |     |  |     (Token2-&gt;TokId == tid_Kakko)|| | 
  1122        |     |     |     |  |     (Token2-&gt;TokId == tid_Kokka)){ | 
              |     |     |     |  +--+---------------------------------+ 
  1123        |     |     |     |     +--- DefBaseStr = &quot;&quot;;
              |     |     |     |   +-+---+ 
  1124        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  1125        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------+ 
  1126        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-----------+ 
  1127        |     |     |  default: | 
              |     |     +-----------+ 
              |     |     |  +------------+ 
  1128        |     |     +--+ if(SepF){  | 
              |     |     |  +--+---------+ 
  1129        |     |     |     +--- DefBaseStr = &quot;&quot;;
              |     |     |   +-+---+ 
  1130        |     |     |   |  }  | 
              |     |     |   +-----+ 
  1131        |     |     +--- // 未定義の単語も定義用として追加。WORD等のマクロへの対抗
  1132        |     |     +--- DefBaseStr += Token-&gt;OrgStr;
  1133        |     |     +--- // 次のトークンが,()の場合は、クリアする。
  1134        |     |     |    // Exp.  printf(&quot;%d&quot;,c); の &quot;%d&quot;は定義ではない。 
              |     |     |  +------------------------------+ 
  1135        |     |     +--+ if(i+1 &lt; TokenList-&gt;Count){  | 
              |     |     |  +--+---------------------------+ 
  1136        |     |     |     +--- Token2 = (TToken *)TokenList-&gt;Items[i+1];
              |     |     |     |  +------------------------------------+ 
  1137        |     |     |     +--+ if((Token2-&gt;TokId == tid_Kannma)|| | 
  1138        |     |     |     |  |     (Token2-&gt;TokId == tid_Kakko)|| | 
  1139        |     |     |     |  |     (Token2-&gt;TokId == tid_Kokka)){ | 
              |     |     |     |  +--+---------------------------------+ 
  1140        |     |     |     |     +--- DefBaseStr = &quot;&quot;;
              |     |     |     |   +-+---+ 
  1141        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  1142        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------+ 
  1143        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |   +-+---+ 
  1144        |     |   |  }  | 
              |     |   +-----+ 
              |     |  +----------------+ 
  1145        |     +--+ switch(TokId){ | 
              |     |  +--+-------------+ 
              |     |     +-----------------+ 
  1146        |     |     |  case tid_void: | 
              |     |     +-----------------+ 
  1147        |     |     +--- DataType = dt_Void;
              |     |     |  +--------+ 
  1148        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-----------------+ 
  1149        |     |     |  case tid_int:  | 
              |     |     +-----------------+ 
  1150        |     |     +--- DataType = dt_Int;
              |     |     |  +--------+ 
  1151        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-------------------+ 
  1152        |     |     |  case tid_double: | 
              |     |     +-------------------+ 
  1153        |     |     +--- DataType = dt_Real; // とりあえず、Fortan版に合わせる。
              |     |     |  +--------+ 
  1154        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-----------------+ 
  1155        |     |     |  case tid_char: | 
              |     |     +-----------------+ 
  1156        |     |     +--- DataType = dt_Char;
              |     |     |  +--------+ 
  1157        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-------------------+ 
  1158        |     |     |  case tid_float:  | 
              |     |     +-------------------+ 
  1159        |     |     +--- DataType = dt_Float;
              |     |     |  +--------+ 
  1160        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-------------------+ 
  1161        |     |     |  case tid_struct: | 
              |     |     +-------------------+ 
  1162        |     |     +--- DataType = dt_Void;
              |     |     |  +--------+ 
  1163        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |   +-+---+ 
  1164        |     |   |  }  | 
              |     |   +-----+ 
              |     |  +----------------------------------------------+ 
  1165        |     +--+ if((TokId != tid_Val)&amp;&amp;(TokId != tid_Func)){ | 
              |     |  +--+-------------------------------------------+ 
  1166        |     |     +--- // 変数と関数トークン以外次へ
              |     |     |  +------------+ 
  1167        |     |     +--+ continue;  | 
              |     |     |  +------------+ 
              |     |   +-+---+ 
  1168        |     |   |  }  | 
              |     |   +-----+ 
              |     |  +------------------------+ 
  1169        |     +--+ if(DefBaseStr == &quot;&quot;){  | 
              |     |  +--+---------------------+ 
  1170        |     |     +--- // 定義文字なしでの変数や関数の出現は、式になるので、
  1171        |     |     |    // セミコロンまで定義なしになる。                      
  1172        |     |     +--- NotValDefF = true;
              |     |   +-+---+ 
  1173        |     |   |  }  | 
              |     |   +-----+ 
  1174        |     +--- //
  1175        |     |    // すでに、同じ名前で、宣言されている関数か変数があるかを調べる。      
  1176        |     |    // あれば、追加しない。（型の一致かどうかの判定は、コンパイラまかせ）  
  1177        |     |    //                                                                     
  1178        |     +--- TValData *ValData = NULL;
  1179        |     +--- bool NewValDataF = true;
  1180        |     |    
  1181        |     +--- ValName = Trim(TokStr);
  1182        |     |    
              |     |  +--------------------------------+ 
  1183        |     +--+ if(Token-&gt;TokId == tid_Func){  | 
              |     |  +--+-----------------------------+ 
  1184        |     |     +--- NewValDataF = false;     // 関数
              |     |   +-+---+ 
  1185        |     |   |  }  | 
              |     |   +-----+ 
  1186        |     +--- //      for(j = 0 ; j &lt; ValDataList-&gt;Count ; j++){
              |     |  +------------------------------------------------+ 
  1187        |     +--+ for(j = ValDataList-&gt;Count-1 ; j &gt;= 0 ; j--){  | 
              |     |  +--+---------------------------------------------+ 
  1188        |     |     +--- ValData = (TValData *)ValDataList-&gt;Items[j];
              |     |     |  +------------------------------------------+ 
  1189        |     |     +--+ if(ValData-&gt;Str.compare(ValName) == 0){  | 
              |     |     |  +--+---------------------------------------+ 
              |     |     |     |  +--------------------------------+ 
  1190        |     |     |     +--+ if(Token-&gt;TokId == tid_Func){  | 
              |     |     |     |  +--+-----------------------------+ 
  1191        |     |     |     |     +--- NewValDataF = false;     // 関数で2回目の出現
              |     |     |     |     |  +--------+ 
  1192        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  1193        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+-----------------------------------+ 
  1193        |     |     |     |   |  else if(Token-&gt;BrNestLevel == 0){  | 
              |     |     |     |   +-+-----------------------------------+ 
  1194        |     |     |     |     +--- NewValDataF = false;    // ネストなしでの2回目の出現
              |     |     |     |     |  +--------+ 
  1195        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  1196        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+-------------------------------------------------+ 
  1196        |     |     |     |   |  else if(ValData-&gt;ModuleIdx == Token-&gt;ModuleIdx){ | 
              |     |     |     |   +-+-------------------------------------------------+ 
  1197        |     |     |     |     +--- // 同じモジュール内での同じ名前の2回目の変数も定義済としている。
  1198        |     |     |     |     +--- NewValDataF = false;
              |     |     |     |     |  +--------+ 
  1199        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  1200        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+-----------------------------------------------------------+ 
  1200        |     |     |     |   |  else if((DefBaseStr == &quot;&quot;)&amp;&amp;(ValData-&gt;BrNestLevel == 0)){  | 
              |     |     |     |   +-+-----------------------------------------------------------+ 
  1201        |     |     |     |     +--- // 定義でなく、グローバル変数を参照
  1202        |     |     |     |     +--- NewValDataF = false;
              |     |     |     |     |  +--------+ 
  1203        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  1204        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  1205        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |   +-+---+ 
  1206        |     |   |  }  | 
              |     |   +-----+ 
  1207        |     +--- #if 0
              |     |  +------------------------------------------------+ 
  1208        |     +--+ if((NotValDefF)&amp;&amp;(Token-&gt;TokId != tid_Func)){  | 
              |     |  +--+---------------------------------------------+ 
  1209        |     |     +--- // 定義なしで、変数出現の場合は、定義でない式とする。
  1210        |     |     +--- NewValDataF = false;
              |     |   +-+---+ 
  1211        |     |   |  }  | 
              |     |   +-----+ 
  1212        |     +--- #endif
              |     |  +--------------------------------------------------------------------+ 
  1213        |     +--+ if((NotValDefF)&amp;&amp;(DefBaseStr == &quot;&quot;)&amp;&amp;(Token-&gt;TokId != tid_Func)){  | 
              |     |  +--+-----------------------------------------------------------------+ 
  1214        |     |     +--- // 定義なしで、変数出現の場合は、定義でない式とする。
  1215        |     |     +--- NewValDataF = false;
              |     |   +-+---+ 
  1216        |     |   |  }  | 
              |     |   +-----+ 
              |     |  +--------------------+ 
  1217        |     +--+ if(!NewValDataF){  | 
              |     |  +--+-----------------+ 
  1218        |     |     +--- Token-&gt;ValData = ValData;
              |     |     |  +------------+ 
  1219        |     |     +--+ continue;  | 
              |     |     |  +------------+ 
              |     |   +-+---+ 
  1220        |     |   |  }  | 
              |     |   +-----+ 
  1221        |     +--- //
  1222        |     |    // 変数リストに追加する。  
  1223        |     |    //                         
  1224        |     +--- ValData = new TValData(ValName);
  1225        |     +--- Token-&gt;ValData = ValData;
  1226        |     +--- ValDataList-&gt;Add((void *)ValData);
  1227        |     +--- ValData-&gt;ModuleIdx = Token-&gt;ModuleIdx;
  1228        |     +--- ValData-&gt;BrNestLevel = Token-&gt;BrNestLevel;
  1229        |     +--- ValData-&gt;DataType = DataType;
              |     |  +------------------------+ 
  1230        |     +--+ if(TokId == tid_Func){ | 
              |     |  +--+---------------------+ 
  1231        |     |     +--- ValData-&gt;DataType = (Enum_DataType)(DataType+dt_IntFunc-dt_Int);
  1232        |     |     +--- //      }else if(ValData-&gt;BrNestLevel &gt; FuncBrNestLevel){
              |     |   +-+---+ 
  1233        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------------------------------------------------------------+ 
  1233        |     |   |  else if((Token-&gt;NestLevel == 0)&amp;&amp;(Token-&gt;BrNestLevel &gt; 0)){  | 
              |     |   +-+-------------------------------------------------------------+ 
  1234        |     |     +--- // 関数定義 Func( xxx ) の引数の場合にArgFをセット
  1235        |     |     +--- ValData-&gt;ArgF = true;   // 引数であるArgFをセット
              |     |   +-+---+ 
  1236        |     |   |  }  | 
              |     |   +-----+ 
  1237        |     +--- ValData-&gt;SetCount = 0;
  1238        |     +--- ValData-&gt;DefPos = i;    // 変数自体の位置
  1239        |     +--- ValData-&gt;DefStr1 = DefBaseStr;
  1240        |     +--- ValData-&gt;DefStr2 = DefStr;
  1241        |     +--- ValData-&gt;DefPosS = DefPosS;     // 実体とは異なるがセット
  1242        |     +--- ValData-&gt;DefPosE = i;
  1243        |     +--- ValData-&gt;ArrayDefPosS = i+1;
  1244        |     +--- Token-&gt;ValData = ValData;
  1245        |     +--- Nest = 0;
  1246        |     +--- ArrayLevel = 0;
              |     |  +------------------------------------------------------------+ 
  1247        |     +--+ for(j = i-1 ; j &gt;= sPos ; j--){ // 変数の前の * をチェック | 
              |     |  +--+---------------------------------------------------------+ 
  1248        |     |     +--- Token = (TToken *)TokenList-&gt;Items[j];
              |     |     |  +------------------------------+ 
  1249        |     |     +--+ if(Token-&gt;Str == &quot;*&quot;){  // * | 
              |     |     |  +--+---------------------------+ 
  1250        |     |     |     +--- ArrayLevel++;
              |     |     |   +-+---+ 
  1251        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
  1251        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
              |     |     |     |  +--------+ 
  1252        |     |     |     +--+ break; | 
              |     |     |     |  +--------+ 
              |     |     |   +-+---+ 
  1253        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |   +-+---+ 
  1254        |     |   |  }  | 
              |     |   +-----+ 
              |     |  +------------------------------------------------------------+ 
  1255        |     +--+ for(j = i+1 ; j &lt; ePos ; j++){ // 変数の後の [] をチェック | 
              |     |  +--+---------------------------------------------------------+ 
  1256        |     |     +--- Token = (TToken *)TokenList-&gt;Items[j];
  1257        |     |     +--- TokId = Token-&gt;TokId;
              |     |     |  +----------------------------------+ 
  1258        |     |     +--+ if(TokId == tid_KagiKakko){ // [ | 
              |     |     |  +--+-------------------------------+ 
  1259        |     |     |     +--- Nest++;
  1260        |     |     |     +--- ArrayLevel++;
              |     |     |   +-+---+ 
  1261        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+---------------------------------------+ 
  1261        |     |     |   |  else if(TokId == tid_KagiKokka){ // ]  | 
              |     |     |   +-+---------------------------------------+ 
  1262        |     |     |     +--- Nest--;
              |     |     |   +-+---+ 
  1263        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+---------------------+ 
  1263        |     |     |   |  else if(Nest == 0){  | 
              |     |     |   +-+---------------------+ 
              |     |     |     |  +--------+ 
  1264        |     |     |     +--+ break; | 
              |     |     |     |  +--------+ 
              |     |     |   +-+---+ 
  1265        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |   +-+---+ 
  1266        |     |   |  }  | 
              |     |   +-----+ 
  1267        |     +--- ValData-&gt;ArrayDefPosE = j;
  1268        |     +--- ValData-&gt;ArrayLevel = ArrayLevel; // 配列次元数
              |   +-+---+ 
  1269        |   |  }  | 
              |   +-----+ 
            +-+---+ 
  1270      |  }  | 
            +-----+ 
</pre>


</body>
</html>
