
<html>
<head>
<title>Pass2 関数説明</title><base target="main">
<link rel ="stylesheet" type="text/css" href="stylesheet.css" title="stylesheet">
<meta http-equiv="Content-Type" content="text/html;charset=Shift_JIS">
</head>

<body bgcolor="#ffffff">

<div align="right"><font size="2">ABCLibScriptC プロジェクト</font></div>

<table width=100% bgcolor="#e6e6fa" class="titlebgcolor" border="1" cellpadding="7" cellspacing="0">
<tr>
    <td><font class="titlefont">21.16. Pass2 関数説明</font></td>
</tr>
</table>

<p></p>
<table border="1">
<tr><th align="left" nowrap>関数名</th>        <td nowrap>Pass2</td></tr>
<tr><th align="left" nowrap>定義ファイル名</th><td nowrap>pass2.cpp</td></tr>
<tr><th align="left" nowrap>定義行</th>        <td nowrap>87</td></tr>
<tr><th align="left" nowrap>宣言形式</th>      <td nowrap>void Pass2 ( TList * TokenList , TList * ValDataList )</td></tr>
<tr><th align="left" nowrap>概要</th>          <td nowrap>構文解析と変数リストを作成し、変数の型などを設定する。<br><br>  １）モジュール構造識別（ModukeIdxを割り振って、異なるモジュールの区別)<br>  ２）｛｝のネストをNestLevelにセットする。<br>  ３）for , if の終了先をセットする<br>  ４）変数定義 (int , double ) などの情報から、変数一覧(ValDataList)を作成し<br>      リンクを設定する。（モジュールが異なる変数は、別物とする）<br>      変数の型、バイトサイズも保持すること。（一時変数作成の場合に必要）</td></tr>
<tr><th align="left" nowrap>戻り値</th>        <td nowrap></td></tr>
<tr><th align="left" nowrap>パラメタ説明</th>  <td nowrap>TokenList   トークンリスト<br>ValDataList 変数リスト</td></tr>
<tr><th align="left" nowrap>機能説明</th>      <td nowrap></td></tr>
<tr><th align="left" nowrap>備考</th>          <td nowrap></td></tr>
</table>

<p></p>
呼出し元関数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap><a href="16_2_3.htm">TMainF::CodeGen</a></td>
<td nowrap><a href="5_1.htm">main.cpp</a></td>
<td nowrap><a href="16_2_3.htm">493</a></td>
</tr>
</table>

<p></p>
呼出し先関数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap><a href="31_17.htm">Pass2_C</a></td>
<td nowrap><a href="5_3.htm">pass2.cpp</a></td>
<td nowrap><a href="31_17.htm">657</a></td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap><a href="31_18.htm">Pass2_Fortran</a></td>
<td nowrap><a href="5_3.htm">pass2.cpp</a></td>
<td nowrap><a href="31_18.htm">292</a></td>
</tr>
<tr>
<td nowrap>3</td>
<td nowrap><a href="31_20.htm">ResetModule</a></td>
<td nowrap><a href="5_3.htm">pass2.cpp</a></td>
<td nowrap><a href="31_20.htm">2127</a></td>
</tr>
<tr>
<td nowrap>4</td>
<td nowrap>find</td>
<td nowrap><br></td>
<td nowrap><br></td>
</tr>
</table>

<p></p>
参照外部変数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap>MainF</td>
<td nowrap><a href="5_1.htm">main.cpp</a></td>
<td nowrap>53</td>
</tr>
</table>

<p></p>
参照先一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>種別</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap><a href="16_1_1.htm">TList</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap><a href="16_1_1.htm">57</a></td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap><a href="16_9_1.htm">TToken</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_10.htm">pass1.h</a></td>
<td nowrap><a href="16_9_1.htm">294</a></td>
</tr>
</table>

<p></p>
<pre>
関数論理チャート

        |  +--------------------------------------------------+ 
    87  +--+ void Pass2(TList *TokenList,TList *ValDataList)  | 
    88     | {                                                | 
           +--+-----------------------------------------------+ 
    89        +--- int i,j;
    90        +--- TToken *Token;
    91        +--- TToken *Token2;
    92        +--- int ModuleIdx = 0;      // 何番目のモジュールを処理中か
    93        +--- int NestLevel = 0;      // プログラム構造ネストの状態
    94        +--- int BrNestLevel = 0;    // 括弧のネストの状態
    95        |                                                   
    96        +--- ModuleIdx = 0;
    97        +--- NestLevel = 0;
    98        +--- BrNestLevel = 0;
    99        +--- ResetModule();
              |  +------------------------------------------+ 
   100        +--+ for(i = 0 ; i &lt; TokenList-&gt;Count ;i++){  | 
              |  +--+---------------------------------------+ 
   101        |     +--- Token = (TToken *)TokenList-&gt;Items[i];
   102        |     +--- Token-&gt;ModuleIdx = ModuleIdx;   // トークンにモジュールやネスト番号をセット
   103        |     +--- Token-&gt;NestLevel = NestLevel;
   104        |     +--- Token-&gt;BrNestLevel = BrNestLevel;
              |     |  +------------------------+ 
   105        |     +--+ switch(Token-&gt;TokId){  | 
              |     |  +--+---------------------+ 
              |     |     +-----------------+ 
   106        |     |     |  case tid_END:  | 
              |     |     +-----------------+ 
   107        |     |     +--- // Fortran モジュールを終了。（次行から次モジュールとなる）
   108        |     |     |    // Endの後の名前は、Skipする。                                           
   109        |     |     |    // スクリプトのEndの場合があるので、前が注釈でない（改行まで）かチェック 
              |     |     |  +------------------------------+ 
   110        |     |     +--+ for(j = i-1; j &gt;= 0 ; j--){  | 
              |     |     |  +--+---------------------------+ 
   111        |     |     |     +--- Token2 = (TToken *)TokenList-&gt;Items[j];
              |     |     |     |  +------------------------------------------------+ 
   112        |     |     |     +--+ if((Token2-&gt;TokId == tid_LineEnd)||(j == 0)){  | 
              |     |     |     |  +--+---------------------------------------------+ 
   113        |     |     |     |     +--- NestLevel--; // 文法上のEND
              |     |     |     |     |  +--------+ 
   114        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
   115        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |     |  +------------------------------------+ 
   116        |     |     |     +--+ if(Token2-&gt;TokId == tid_Comment){  | 
              |     |     |     |  +--+---------------------------------+ 
   117        |     |     |     |     +--- Token-&gt;TokId = tid_END_STR; // コメントの後の end (  region end )
              |     |     |     |     |  +--------+ 
   118        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
   119        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
   120        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +------------------------------+ 
   121        |     |     +--+ if(Token-&gt;TokId == tid_END){ | 
              |     |     |  +--+---------------------------+ 
   122        |     |     |     +--- //
   123        |     |     |     |    //  CONTAINS に対応するため、NestLevelが0でなくても別モジュール。  
   124        |     |     |     |    //  サブルーチンの記述の中のサブルーチンの記述への対応。           
   125        |     |     |     |    //                                                                 
              |     |     |     |  +--------------------------------------------------------------+ 
   126        |     |     |     +--+ if((i+1 &gt;= TokenList-&gt;Count)||                               | 
   127        |     |     |     |  |     (((TToken *)TokenList-&gt;Items[i+1])-&gt;TokId != tid_TYPE)){ | 
              |     |     |     |  +--+-----------------------------------------------------------+ 
   128        |     |     |     |     +--- ModuleIdx++;
   129        |     |     |     |     +--- ResetModule();
              |     |     |     |   +-+---+ 
   130        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |     |  +------------------------------------+ 
   131        |     |     |     +--+ for(; i &lt; TokenList-&gt;Count ;i++){  | 
              |     |     |     |  +--+---------------------------------+ 
   132        |     |     |     |     +--- Token2 = (TToken *)TokenList-&gt;Items[i];
   133        |     |     |     |     +--- Token2-&gt;ModuleIdx = ModuleIdx;   // トークンにモジュールやネスト番号をセット
   134        |     |     |     |     +--- Token2-&gt;NestLevel = NestLevel;
   135        |     |     |     |     +--- Token2-&gt;BrNestLevel = BrNestLevel;
              |     |     |     |     |  +------------------------------------+ 
   136        |     |     |     |     +--+ if(Token2-&gt;TokId == tid_LineEnd){  | 
              |     |     |     |     |  +--+---------------------------------+ 
              |     |     |     |     |     |  +----------------------------------------------------------------+ 
   137        |     |     |     |     |     +--+ break; // LineEndまでスキップ END TYPE , END FUNCTION 等の対応 | 
              |     |     |     |     |     |  +----------------------------------------------------------------+ 
              |     |     |     |     |   +-+---+ 
   138        |     |     |     |     |   |  }  | 
              |     |     |     |     |   +-----+ 
              |     |     |     |   +-+---+ 
   139        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
   140        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------+ 
   141        |     |     +--+ break; | 
              |     |     |  +--------+ 
   142        |     |     +--- // Fortran Program関連
              |     |     +---------------------------------------+ 
   143        |     |     |  case tid_CONTAINS:      // CONTAINS  | 
              |     |     +---------------------------------------+ 
   144        |     |     +--- ModuleIdx++;
   145        |     |     +--- ResetModule();
              |     |     |  +--------+ 
   146        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-------------------------------------+ 
   147        |     |     |  case tid_PROGRAM:       // PROGRAM | 
              |     |     +-------------------------------------+ 
              |     |     +-------------------------------------+ 
   148        |     |     |  case tid_MODULE:        // MODULE  | 
              |     |     +-------------------------------------+ 
              |     |     +---------------------------------------+ 
   149        |     |     |  case tid_INTERFACE:     // INTERFACE | 
              |     |     +---------------------------------------+ 
              |     |     +-----------------------------------------+ 
   150        |     |     |  case tid_SUBROUTINE:    // SUBROUTINE  | 
              |     |     +-----------------------------------------+ 
              |     |     +---------------------------------------+ 
   151        |     |     |  case tid_FUNCTION:      // FUNCTION  | 
              |     |     +---------------------------------------+ 
   152        |     |     +--- NestLevel++;
              |     |     |  +--------+ 
   153        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-----------------+ 
   154        |     |     |  case tid_TYPE: | 
              |     |     +-----------------+ 
   155        |     |     +--- // TYPE（）以外の TYPE 構造体名の場合のみ ネストが有効。
              |     |     |  +----------------------------------------------------------------------------------------+ 
   156        |     |     +--+ if((i+1 &lt; TokenList-&gt;Count)&amp;&amp;(((TToken *)TokenList-&gt;Items[i+1])-&gt;TokId != tid_Kakko)){ | 
              |     |     |  +--+-------------------------------------------------------------------------------------+ 
   157        |     |     |     +--- // TYPE 構造名 による定義。 END TYPEを持つ。
   158        |     |     |     +--- NestLevel++;
              |     |     |   +-+---+ 
   159        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
   159        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
   160        |     |     |     +--- Token-&gt;TokId = tid_TYPE_REF;  // 定義でないType。END TYPEを持たない。
              |     |     |   +-+---+ 
   161        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------+ 
   162        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-----------------------------+ 
   163        |     |     |  case tid_DaiKakko:  // C { | 
              |     |     +-----------------------------+ 
   164        |     |     +--- NestLevel++;
   165        |     |     +--- BrNestLevel++;
              |     |     |  +--------+ 
   166        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-----------------------------+ 
   167        |     |     |  case tid_DaiKokka:  // C } | 
              |     |     +-----------------------------+ 
   168        |     |     +--- NestLevel--;
   169        |     |     +--- BrNestLevel--;
              |     |     |  +----------------------------------------------------------------------+ 
   170        |     |     +--+ if(NestLevel == 0){ // Ｃの場合は、一番外側の}で次モジュールとする。 | 
              |     |     |  +--+-------------------------------------------------------------------+ 
   171        |     |     |     +--- ModuleIdx++;
              |     |     |   +-+---+ 
   172        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +--------+ 
   173        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-----------------------+ 
   174        |     |     |  case tid_Kakko: // ( | 
              |     |     +-----------------------+ 
              |     |     +---------------------------+ 
   175        |     |     |  case tid_KagiKakko: // [ | 
              |     |     +---------------------------+ 
   176        |     |     +--- BrNestLevel++;
              |     |     |  +--------+ 
   177        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-----------------------+ 
   178        |     |     |  case tid_Kokka: // ) | 
              |     |     +-----------------------+ 
              |     |     +---------------------------+ 
   179        |     |     |  case tid_KagiKokka: // ] | 
              |     |     +---------------------------+ 
   180        |     |     +--- BrNestLevel--;
              |     |     |  +--------+ 
   181        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |     +-----------+ 
   182        |     |     |  default: | 
              |     |     +-----------+ 
              |     |     |  +--------+ 
   183        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |   +-+---+ 
   184        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
   185        |   |  }  | 
              |   +-----+ 
   186        +--- //
   187        |    //  各トークンに合わせた処理。 
   188        |    //                             
              |  +--------------------------------------+ 
   189        +--+ for(i = 0 ; i &lt; TokenList-&gt;Count ;){ | 
              |  +--+-----------------------------------+ 
   190        |     +--- Token = (TToken *)TokenList-&gt;Items[i];
              |     |  +------------------------+ 
   191        |     +--+ switch(Token-&gt;TokId){  | 
              |     |  +--+---------------------+ 
              |     |     +-----------------+ 
   192        |     |     |  case tid_null: | 
              |     |     +-----------------+ 
              |     |     +---------------------------------------+ 
   193        |     |     |  case tid_Semikoron: // ; セミコロン  | 
              |     |     +---------------------------------------+ 
   194        |     |     +--- i++;
              |     |     |  +------------+ 
   195        |     |     +--+ continue;  | 
              |     |     |  +------------+ 
              |     |     +---------------------+ 
   196        |     |     |  case tid_Comment:  | 
              |     |     +---------------------+ 
              |     |     |  +----------------------------------------+ 
   197        |     |     +--+ if(MainF-&gt;SrcCodeType != MainF-&gt;sctC){ | 
              |     |     |  +--+-------------------------------------+ 
              |     |     |     |  +--------------------------------------+ 
   198        |     |     |     +--+ if((int)Token-&gt;Str.find(&quot;!&quot;) == 0){  | 
              |     |     |     |  +--+-----------------------------------+ 
              |     |     |     |     |  +--------------------------------------+ 
   199        |     |     |     |     +--+ for( ; i &lt; TokenList-&gt;Count ; i++){  | 
              |     |     |     |     |  +--+-----------------------------------+ 
   200        |     |     |     |     |     +--- Token2 = (TToken *)TokenList-&gt;Items[i];
   201        |     |     |     |     |     +--- //                      if(Token-&gt;LineNo != Token2-&gt;LineNo){
              |     |     |     |     |     |  +------------------------------------------------------------------------+ 
   202        |     |     |     |     |     +--+ if((Token2-&gt;TokId == tid_LineEnd)||(Token2-&gt;TokId == tid_Semikoron)){  | 
              |     |     |     |     |     |  +--+---------------------------------------------------------------------+ 
   203        |     |     |     |     |     |     +--- i++;
              |     |     |     |     |     |     |  +------------------------------------------------------------------------------+ 
   204        |     |     |     |     |     |     +--+ break; // 行末トークンまでを行として扱う。継続行の場合は最後にセットされる。 | 
              |     |     |     |     |     |     |  +------------------------------------------------------------------------------+ 
              |     |     |     |     |     |   +-+---+ 
   205        |     |     |     |     |     |   |  }  | 
              |     |     |     |     |     |   +-----+ 
              |     |     |     |     |   +-+---+ 
   206        |     |     |     |     |   |  }  | 
              |     |     |     |     |   +-----+ 
              |     |     |     |   +-+---+ 
   207        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+-------+ 
   207        |     |     |     |   |  else{  | 
              |     |     |     |   +-+-------+ 
   208        |     |     |     |     +--- i++;
              |     |     |     |   +-+---+ 
   209        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
   210        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------+ 
   210        |     |     |   |  else{  | 
              |     |     |   +-+-------+ 
   211        |     |     |     +--- i++;
              |     |     |   +-+---+ 
   212        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +------------+ 
   213        |     |     +--+ continue;  | 
              |     |     |  +------------+ 
              |     |     +-----------------------+ 
   214        |     |     |  case tid_SharpStart: | 
              |     |     +-----------------------+ 
              |     |     +-------------------------+ 
   215        |     |     |  case tid_SharpInclude: | 
              |     |     +-------------------------+ 
              |     |     +-------------------------+ 
   216        |     |     |  case tid_SharpDefine:  | 
              |     |     +-------------------------+ 
              |     |     +-----------------------+ 
   217        |     |     |  case tid_SharpUnDef: | 
              |     |     +-----------------------+ 
              |     |     +---------------------+ 
   218        |     |     |  case tid_SharpIf:  | 
              |     |     +---------------------+ 
              |     |     +-----------------------+ 
   219        |     |     |  case tid_SharpElse:  | 
              |     |     +-----------------------+ 
              |     |     +-----------------------+ 
   220        |     |     |  case tid_SharpElIf:  | 
              |     |     +-----------------------+ 
              |     |     +-----------------------+ 
   221        |     |     |  case tid_SharpEndIf: | 
              |     |     +-----------------------+ 
              |     |     +-----------------------+ 
   222        |     |     |  case tid_SharpIfDef: | 
              |     |     +-----------------------+ 
              |     |     +-------------------------+ 
   223        |     |     |  case tid_SharpIfnDef:  | 
              |     |     +-------------------------+ 
              |     |     +-------------------------+ 
   224        |     |     |  case tid_SharpPragma:  | 
              |     |     +-------------------------+ 
              |     |     +---------------------+ 
   225        |     |     |  case tid_SharpEnd: | 
              |     |     +---------------------+ 
              |     |     |  +--------------------------------------+ 
   226        |     |     +--+ for( ; i &lt; TokenList-&gt;Count ; i++){  | 
              |     |     |  +--+-----------------------------------+ 
   227        |     |     |     +--- Token2 = (TToken *)TokenList-&gt;Items[i];
   228        |     |     |     +--- //              if(Token-&gt;LineNo != Token2-&gt;LineNo){
              |     |     |     |  +------------------------------------------------------------------------+ 
   229        |     |     |     +--+ if((Token2-&gt;TokId == tid_LineEnd)||(Token2-&gt;TokId == tid_Semikoron)){  | 
              |     |     |     |  +--+---------------------------------------------------------------------+ 
   230        |     |     |     |     +--- i++;
              |     |     |     |     |  +------------------------------------------------------------------------------+ 
   231        |     |     |     |     +--+ break; // 行末トークンまでを行として扱う。継続行の場合は最後にセットされる。 | 
              |     |     |     |     |  +------------------------------------------------------------------------------+ 
              |     |     |     |   +-+---+ 
   232        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
   233        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +------------+ 
   234        |     |     +--+ continue;  | 
              |     |     |  +------------+ 
              |     |     +-----------+ 
   235        |     |     |  default: | 
              |     |     +-----------+ 
              |     |     |  +--------+ 
   236        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |   +-+---+ 
   237        |     |   |  }  | 
              |     |   +-----+ 
   238        |     +--- //
   239        |     |    //  文を解析し、トークンを進める。                                 
   240        |     |    //  解析結果は、変数の参照や関数の引数状態等としてトークンデータに 
   241        |     |    //  格納され、以後の処理で参照される。                             
   242        |     |    //                                                                 
              |     |  +----------------------------------------+ 
   243        |     +--+ if(MainF-&gt;SrcCodeType != MainF-&gt;sctC){ | 
              |     |  +--+-------------------------------------+ 
   244        |     |     +--- int ePos;
   245        |     |     |    
   246        |     |     +--- //          for(ePos = i+1 ; ePos &lt; TokenList-&gt;Count ; ePos++){
              |     |     |  +----------------------------------------------------+ 
   247        |     |     +--+ for(ePos = i ; ePos &lt; TokenList-&gt;Count ; ePos++){  | 
              |     |     |  +--+-------------------------------------------------+ 
   248        |     |     |     +--- Token2 = (TToken *)TokenList-&gt;Items[ePos];
   249        |     |     |     +--- //              if(Token-&gt;LineNo != Token2-&gt;LineNo){
              |     |     |     |  +------------------------------------------------------------------------+ 
   250        |     |     |     +--+ if((Token2-&gt;TokId == tid_LineEnd)||(Token2-&gt;TokId == tid_Semikoron)){  | 
              |     |     |     |  +--+---------------------------------------------------------------------+ 
   251        |     |     |     |     +--- ePos++;
              |     |     |     |     |  +------------------------------------------------------------------------------+ 
   252        |     |     |     |     +--+ break; // 行末トークンまでを行として扱う。継続行の場合は最後にセットされる。 | 
              |     |     |     |     |  +------------------------------------------------------------------------------+ 
              |     |     |     |   +-+---+ 
   253        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
   254        |     |     |   |  }  | 
              |     |     |   +-----+ 
   255        |     |     +--- #if 0
   256        |     |     +--- string ss = &quot;&quot;;
              |     |     |  +----------------------------------+ 
   257        |     |     +--+ for(int j = i ; j &lt; ePos ; j++){ | 
              |     |     |  +--+-------------------------------+ 
   258        |     |     |     +--- Token2 = (TToken *)TokenList-&gt;Items[j];
   259        |     |     |     +--- ss += Token2-&gt;Str+&quot; &quot;;
              |     |     |   +-+---+ 
   260        |     |     |   |  }  | 
              |     |     |   +-----+ 
   261        |     |     +--- MainF-&gt;print(&quot;[&quot;+ss+&quot;]&quot;);
   262        |     |     +--- #endif
   263        |     |     +--- Pass2_Fortran(TokenList,i,ePos,ValDataList);
   264        |     |     +--- i = ePos;
              |     |   +-+---+ 
   265        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
   265        |     |   |  else{  | 
              |     |   +-+-------+ 
   266        |     |     +--- i += Pass2_C(TokenList,i,ValDataList);
              |     |   +-+---+ 
   267        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
   268        |   |  }  | 
              |   +-----+ 
            +-+---+ 
   269      |  }  | 
            +-----+ 
</pre>


</body>
</html>
