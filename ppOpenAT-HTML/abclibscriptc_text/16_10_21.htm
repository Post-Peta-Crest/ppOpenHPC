
<html>
<head>
<title>GetValAddValue メンバ関数説明</title><base target="main">
<link rel ="stylesheet" type="text/css" href="stylesheet.css" title="stylesheet">
<meta http-equiv="Content-Type" content="text/html;charset=Shift_JIS">
</head>

<body bgcolor="#ffffff">

<div align="right"><font size="2">ABCLibScriptC プロジェクト</font></div>

<table width=100% bgcolor="#e6e6fa" class="titlebgcolor" border="1" cellpadding="7" cellspacing="0">
<tr>
    <td><font class="titlefont">14.10.21. GetValAddValue メンバ関数説明</font></td>
</tr>
</table>

<p></p>
<table border="1">
<tr><th align="left" nowrap>メンバ関数名</th>  <td nowrap>GetValAddValue</td></tr>
<tr><th align="left" nowrap>定義ファイル名</th><td nowrap>TuneRegion.cpp</td></tr>
<tr><th align="left" nowrap>定義行</th>        <td nowrap>11508</td></tr>
<tr><th align="left" nowrap>所属名</th>        <td nowrap>TTuneRegion</td></tr>
<tr><th align="left" nowrap>アクセス属性</th>  <td nowrap>private</td></tr>
<tr><th align="left" nowrap>宣言形式</th>      <td nowrap>int GetValAddValue ( int RefValIdx , unsigned int UseDoValBits , int DoValIdx , int * Count )</td></tr>
<tr><th align="left" nowrap>概要</th>          <td nowrap>通常変数に、Unroll中の行で加算する値（Ｉｄｘ）を計算して返す。<br>どのDo変数に依存しているかによって決定される。<br><br> ・有効なDoが何かは、DoValIdxとUseDoValBitsで決定されている。<br>      UseDoValBitsは、kkの繰り返し回数（複数行数）の決定に使用される<br> ・変数がどのDo変数に対して束縛（複数化）されているかは、UseValBits。<br> ・もし、束縛を受けていない変数のDoが有効中の場合は、<br>         その部分の増加はSkip(繰り返し参照)対象となる<br><br>複数行数の計算に使用されながら、束縛には、有効でない変数Ｂｉｔ部分の変化が<br>マスクされる形になるが、<br>Bitが詰まったデータなので、計算する必要あり。<br>各bitでのどのIdxを示すかを求めてから、該当UseValBitsでのIdxを求める。</td></tr>
<tr><th align="left" nowrap>戻り値</th>        <td nowrap>変数名に追加される番号</td></tr>
<tr><th align="left" nowrap>パラメタ説明</th>  <td nowrap>RefValIdx   参照変数インデックス<br>UseDoValBits    使用ＤＯ変数Ｂｉｔｓ<br>DoValIdx    ＤＯ変数インデックス<br>Count   各変数のカウント配列</td></tr>
<tr><th align="left" nowrap>機能説明</th>      <td nowrap></td></tr>
<tr><th align="left" nowrap>備考</th>          <td nowrap></td></tr>
</table>

<p></p>
呼出し元関数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap><a href="16_10_44.htm">TTuneRegion::OutputUnroll_DoBlock_C</a></td>
<td nowrap><a href="5_7.htm">TuneRegion.cpp</a></td>
<td nowrap><a href="16_10_44.htm">10311</a></td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap><a href="16_10_45.htm">TTuneRegion::OutputUnroll_DoBlock_Fortran</a></td>
<td nowrap><a href="5_7.htm">TuneRegion.cpp</a></td>
<td nowrap><a href="16_10_45.htm">9728</a></td>
</tr>
<tr>
<td nowrap>3</td>
<td nowrap><a href="16_10_49.htm">TTuneRegion::OutputUnroll_Line_Fortran</a></td>
<td nowrap><a href="5_7.htm">TuneRegion.cpp</a></td>
<td nowrap><a href="16_10_49.htm">9354</a></td>
</tr>
</table>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>
<pre>
関数論理チャート

        |  +--------------------------------------------------------------------------------------------------+ 
 11508  +--+ int TTuneRegion::GetValAddValue(int RefValIdx,unsigned int UseDoValBits,int DoValIdx,int *Count) | 
 11509     | {                                                                                                | 
           +--+-----------------------------------------------------------------------------------------------+ 
 11510        +--- int AddValue = 0;
 11511        +--- int i,Total;
 11512        +--- int IdxTbl[32];
 11513        |    
 11514        +--- //
 11515        |    // kk が　各Ｂｉｔに対して、どのＩｄｘを持つかを計算する。 
 11516        |    //                                                         
 11517        +--- Total = RefValIdx;
              |  +------------------------------------+ 
 11518        +--+ for(i = DoValIdx ; i &gt;= 0 ; i--){  | 
              |  +--+---------------------------------+ 
              |     |  +--------------------------------------+ 
 11519        |     +--+ if((UseDoValBits &amp; (1 &lt;&lt; i)) != 0){  | 
              |     |  +--+-----------------------------------+ 
 11520        |     |     +--- IdxTbl[i] = Total % Count[i];
 11521        |     |     +--- Total /= Count[i];
              |     |   +-+---+ 
 11522        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
 11523        |   |  }  | 
              |   +-----+ 
 11524        +--- //
 11525        |    // 有効BitのIdxだけを集めた Idx(from kk) を再構築  
 11526        |    //                                                 
              |  +----------------------------------+ 
 11527        +--+ for(i = 0 ; i &lt; DoValIdx ; i++){ | 
              |  +--+-------------------------------+ 
              |     |  +--------------------------------------+ 
 11528        |     +--+ if((UseDoValBits &amp; (1 &lt;&lt; i)) != 0){  | 
              |     |  +--+-----------------------------------+ 
 11529        |     |     +--- AddValue *= Count[i];
 11530        |     |     +--- AddValue += IdxTbl[i];
              |     |   +-+---+ 
 11531        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
 11532        |   |  }  | 
              |   +-----+ 
              |  +------------------+ 
 11533        +--+ return AddValue; | 
              |  +------------------+ 
            +-+---+ 
 11534      |  }  | 
            +-----+ 
</pre>


</body>
</html>
