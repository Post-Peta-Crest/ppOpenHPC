
<html>
<head>
<title>MakeLoopFusionSplitData メンバ関数説明</title><base target="main">
<link rel ="stylesheet" type="text/css" href="stylesheet.css" title="stylesheet">
<meta http-equiv="Content-Type" content="text/html;charset=Shift_JIS">
</head>

<body bgcolor="#ffffff">

<div align="right"><font size="2">ABCLibScriptC プロジェクト</font></div>

<table width=100% bgcolor="#e6e6fa" class="titlebgcolor" border="1" cellpadding="7" cellspacing="0">
<tr>
    <td><font class="titlefont">14.10.26. MakeLoopFusionSplitData メンバ関数説明</font></td>
</tr>
</table>

<p></p>
<table border="1">
<tr><th align="left" nowrap>メンバ関数名</th>  <td nowrap>MakeLoopFusionSplitData</td></tr>
<tr><th align="left" nowrap>定義ファイル名</th><td nowrap>TuneRegion.cpp</td></tr>
<tr><th align="left" nowrap>定義行</th>        <td nowrap>1313</td></tr>
<tr><th align="left" nowrap>所属名</th>        <td nowrap>TTuneRegion</td></tr>
<tr><th align="left" nowrap>アクセス属性</th>  <td nowrap>public</td></tr>
<tr><th align="left" nowrap>宣言形式</th>      <td nowrap>void MakeLoopFusionSplitData ( int sPos )</td></tr>
<tr><th align="left" nowrap>概要</th>          <td nowrap>LoopFusionの解析を行う。<br>Type,Name,Do LoopEnd 式,iusw の変数の作成が行われる。<br>現状では、Fortranのみに対応している。</td></tr>
<tr><th align="left" nowrap>戻り値</th>        <td nowrap></td></tr>
<tr><th align="left" nowrap>パラメタ説明</th>  <td nowrap>sPos    開始位置</td></tr>
<tr><th align="left" nowrap>機能説明</th>      <td nowrap></td></tr>
<tr><th align="left" nowrap>備考</th>          <td nowrap></td></tr>
</table>

<p></p>
呼出し元関数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap><a href="16_10_54.htm">TTuneRegion::TTuneRegion</a></td>
<td nowrap><a href="5_7.htm">TuneRegion.cpp</a></td>
<td nowrap><a href="16_10_54.htm">67</a></td>
</tr>
</table>

<p></p>
呼出し先関数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap>TList::Add</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap>64</td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap>TStringList::Add</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap>83</td>
</tr>
<tr>
<td nowrap>3</td>
<td nowrap><a href="16_10_3.htm">TTuneRegion::AddArgValListToATExecArgList</a></td>
<td nowrap><a href="5_7.htm">TuneRegion.cpp</a></td>
<td nowrap><a href="16_10_3.htm">2220</a></td>
</tr>
<tr>
<td nowrap>4</td>
<td nowrap><a href="16_10_5.htm">TTuneRegion::ChackRefDoValF</a></td>
<td nowrap><a href="5_7.htm">TuneRegion.cpp</a></td>
<td nowrap><a href="16_10_5.htm">1968</a></td>
</tr>
<tr>
<td nowrap>5</td>
<td nowrap>TStringList::Clear</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap>87</td>
</tr>
<tr>
<td nowrap>6</td>
<td nowrap><a href="16_2_6.htm">TMainF::ErrMessage</a></td>
<td nowrap><a href="5_1.htm">main.cpp</a></td>
<td nowrap><a href="16_2_6.htm">767</a></td>
</tr>
<tr>
<td nowrap>7</td>
<td nowrap><a href="16_10_16.htm">TTuneRegion::GetNextKanmaPos</a></td>
<td nowrap><a href="5_7.htm">TuneRegion.cpp</a></td>
<td nowrap><a href="16_10_16.htm">1879</a></td>
</tr>
<tr>
<td nowrap>8</td>
<td nowrap><a href="16_10_17.htm">TTuneRegion::GetNextSemikoronPos</a></td>
<td nowrap><a href="5_7.htm">TuneRegion.cpp</a></td>
<td nowrap><a href="16_10_17.htm">1917</a></td>
</tr>
<tr>
<td nowrap>9</td>
<td nowrap><a href="16_10_25.htm">TTuneRegion::MakeArgValList</a></td>
<td nowrap><a href="5_7.htm">TuneRegion.cpp</a></td>
<td nowrap><a href="16_10_25.htm">726</a></td>
</tr>
<tr>
<td nowrap>10</td>
<td nowrap><a href="16_10_53.htm">TTuneRegion::SaveAndResetValBits</a></td>
<td nowrap><a href="5_7.htm">TuneRegion.cpp</a></td>
<td nowrap><a href="16_10_53.htm">2130</a></td>
</tr>
<tr>
<td nowrap>11</td>
<td nowrap>IntToStr</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap>107</td>
</tr>
<tr>
<td nowrap>12</td>
<td nowrap>LowerCase</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap>109</td>
</tr>
<tr>
<td nowrap>13</td>
<td nowrap>atoi</td>
<td nowrap><br></td>
<td nowrap><br></td>
</tr>
<tr>
<td nowrap>14</td>
<td nowrap>c_str</td>
<td nowrap><br></td>
<td nowrap><br></td>
</tr>
</table>

<p></p>
参照外部変数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap>MainF</td>
<td nowrap><a href="5_1.htm">main.cpp</a></td>
<td nowrap>53</td>
</tr>
</table>

<p></p>
参照メンバ変数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap>TTuneRegion::ArgValList</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>207</td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap>TTuneRegion::CaseCount</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>209</td>
</tr>
<tr>
<td nowrap>3</td>
<td nowrap>TTuneRegion::DoEndEPos</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>283</td>
</tr>
<tr>
<td nowrap>4</td>
<td nowrap>TTuneRegion::DoEndSPos</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>282</td>
</tr>
<tr>
<td nowrap>5</td>
<td nowrap>TTuneRegion::DoStartEPos</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>281</td>
</tr>
<tr>
<td nowrap>6</td>
<td nowrap>TTuneRegion::DoStartSPos</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>280</td>
</tr>
<tr>
<td nowrap>7</td>
<td nowrap>TTuneRegion::DoStepEPos</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>285</td>
</tr>
<tr>
<td nowrap>8</td>
<td nowrap>TTuneRegion::DoStepSPos</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>284</td>
</tr>
<tr>
<td nowrap>9</td>
<td nowrap>TTuneRegion::DoToken</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>278</td>
</tr>
<tr>
<td nowrap>10</td>
<td nowrap>TTuneRegion::DoValIdx</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>159</td>
</tr>
<tr>
<td nowrap>11</td>
<td nowrap>TTuneRegion::DoValName</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>158</td>
</tr>
<tr>
<td nowrap>12</td>
<td nowrap>TTuneRegion::DoValToken</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>279</td>
</tr>
<tr>
<td nowrap>13</td>
<td nowrap>TTuneRegion::FuncName</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>193</td>
</tr>
<tr>
<td nowrap>14</td>
<td nowrap>TTuneRegion::FusionCount</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>290</td>
</tr>
<tr>
<td nowrap>15</td>
<td nowrap>TTuneRegion::Name</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>192</td>
</tr>
<tr>
<td nowrap>16</td>
<td nowrap>TTuneRegion::Number</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>205</td>
</tr>
<tr>
<td nowrap>17</td>
<td nowrap>TTuneRegion::RotaionOrderList</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>295</td>
</tr>
<tr>
<td nowrap>18</td>
<td nowrap>TTuneRegion::SplitPointCopyDef_EndPos</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>266</td>
</tr>
<tr>
<td nowrap>19</td>
<td nowrap>TTuneRegion::SplitPointCopyDef_StartPos</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>265</td>
</tr>
<tr>
<td nowrap>20</td>
<td nowrap>TTuneRegion::SubRegionList</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>211</td>
</tr>
<tr>
<td nowrap>21</td>
<td nowrap>TTuneRegion::TokenEndPos</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>190</td>
</tr>
<tr>
<td nowrap>22</td>
<td nowrap>TTuneRegion::TokenList</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>187</td>
</tr>
<tr>
<td nowrap>23</td>
<td nowrap>TTuneRegion::TokenStartPos</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>189</td>
</tr>
<tr>
<td nowrap>24</td>
<td nowrap>TTuneRegion::TuneGroup</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>195</td>
</tr>
<tr>
<td nowrap>25</td>
<td nowrap>TTuneRegion::TuneKind</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>197</td>
</tr>
<tr>
<td nowrap>26</td>
<td nowrap>TTuneRegion::variedCount</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>225</td>
</tr>
<tr>
<td nowrap>27</td>
<td nowrap>TTuneRegion::variedFromValue</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>235</td>
</tr>
<tr>
<td nowrap>28</td>
<td nowrap>TTuneRegion::variedStepValue</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>237</td>
</tr>
<tr>
<td nowrap>29</td>
<td nowrap>TTuneRegion::variedToValue</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>236</td>
</tr>
<tr>
<td nowrap>30</td>
<td nowrap>TTuneRegion::variedValName</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap>226</td>
</tr>
</table>

<p></p>
参照先一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>種別</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap><a href="16_5_1.htm">TScript</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_12.htm">pass3.h</a></td>
<td nowrap><a href="16_5_1.htm">209</a></td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap><a href="16_7_1.htm">TStringList</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap><a href="16_7_1.htm">74</a></td>
</tr>
<tr>
<td nowrap>3</td>
<td nowrap><a href="16_8_1.htm">TSubRegion</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_15.htm">TuneRegion.h</a></td>
<td nowrap><a href="16_8_1.htm">375</a></td>
</tr>
<tr>
<td nowrap>4</td>
<td nowrap><a href="16_9_1.htm">TToken</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_10.htm">pass1.h</a></td>
<td nowrap><a href="16_9_1.htm">294</a></td>
</tr>
<tr>
<td nowrap>5</td>
<td nowrap><a href="16_11_1.htm">TValData</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap><a href="16_11_1.htm">106</a></td>
</tr>
</table>

<p></p>
<pre>
関数論理チャート

        |  +------------------------------------------------------+ 
  1313  +--+ void TTuneRegion::MakeLoopFusionSplitData(int sPos)  | 
  1314     | {                                                    | 
           +--+---------------------------------------------------+ 
  1315        +--- int i,j,k;
  1316        +--- TToken *Token;
  1317        +--- TScript *Script;
  1318        +--- string s;
  1319        +--- string ScValName;
  1320        +--- int DoNest;
  1321        +--- int StepS,StepE;
  1322        +--- TSubRegion *SubRegion;
  1323        +--- TToken *Token1,*Token2;
  1324        +--- int NestLevelOfDoNest[100];
  1325        +--- TValData *ValData;
  1326        |    
  1327        +--- Token = (TToken *)TokenList-&gt;Items[sPos];
  1328        +--- ScValName = &quot;&quot;;
  1329        |    
  1330        +--- //
  1331        |    // 名前、参照変数（Setが先の場合は、不要）、DO変数、DOの終わり値を求める 
  1332        |    // とりあえず、一番外側のunrollのみ。複数は出力サンプルが必要。          
  1333        |    //                                                                       
  1334        |    // OAT_SetParam()                                                        
  1335        |    // OAT_InsetallXXX() の呼び出しを追加する。                              
  1336        |    //                                                                       
  1337        |    // この２つで、メイン側の呼び出しは終わり。                              
  1338        |    //                                                                       
  1339        |    // Name指定なし時の対策 Add 2004/08/26                                   
  1340        +--- Name = IntToStr(MainF-&gt;TuneRegionList-&gt;Count+1);
              |  +------------------------------+ 
  1341        +--+ if(TuneGroup == tgInstall){  | 
              |  +--+---------------------------+ 
  1342        |     +--- FuncName = &quot;OAT_Install&quot;+Name;
              |   +-+---+ 
  1343        |   |  }  | 
              |   +-+---+ 
              |   +-+---------------------------------+ 
  1343        |   |  else if(TuneGroup == tgStatic){  | 
              |   +-+---------------------------------+ 
  1344        |     +--- FuncName = &quot;OAT_Static&quot;+Name;
              |   +-+---+ 
  1345        |   |  }  | 
              |   +-+---+ 
              |   +-+---------------------------------+ 
  1345        |   |  else if(TuneGroup == tgDynamic){ | 
              |   +-+---------------------------------+ 
  1346        |     +--- FuncName = &quot;OAT_Dynamic&quot;+Name;
              |   +-+---+ 
  1347        |   |  }  | 
              |   +-----+ 
  1348        +--- ArgValList-&gt;Clear();
  1349        +--- DoNest = 0;
              |  +------------------------------------------+ 
  1350        +--+ for(i = sPos ; i &lt;= TokenEndPos ; i++){  | 
              |  +--+---------------------------------------+ 
  1351        |     +--- Token = (TToken *)TokenList-&gt;Items[i];
              |     |  +----------------------------+ 
  1352        |     +--+ if(Token-&gt;Script != NULL){ | 
              |     |  +--+-------------------------+ 
  1353        |     |     +--- Script = (TScript *)Token-&gt;Script;
              |     |     |  +----------------------------------------------------------------------------------+ 
  1354        |     |     +--+ if((Script-&gt;ScAction == sca_loopfusionsplit)||                                   | 
  1355        |     |     |  |     (Script-&gt;ScAction == sca_loopfusion)||(Script-&gt;ScAction == sca_loopsplit)){  | 
              |     |     |  +--+-------------------------------------------------------------------------------+ 
              |     |     |     |  +--------------------------------------------------+ 
  1356        |     |     |     +--+ if((Script-&gt;ScRegion == scr_start)&amp;&amp;(i &gt; sPos)){ | 
              |     |     |     |  +--+-----------------------------------------------+ 
  1357        |     |     |     |     +--- MainF-&gt;ErrMessage(i,&quot;LoopFusionSpiltのネストは、サポートしていません。&quot;);
              |     |     |     |   +-+---+ 
  1358        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |     |  +------------+ 
  1359        |     |     |     +--+ continue;  | 
              |     |     |     |  +------------+ 
              |     |     |   +-+---+ 
  1360        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-----------------------------------------------+ 
  1360        |     |     |   |  else if(Script-&gt;ScType == sct_name){   // name | 
              |     |     |   +-+-----------------------------------------------+ 
  1361        |     |     |     +--- Name = Script-&gt;TokStrList-&gt;Strings[2];
              |     |     |     |  +------------------------------+ 
  1362        |     |     |     +--+ if(TuneGroup == tgInstall){  | 
              |     |     |     |  +--+---------------------------+ 
  1363        |     |     |     |     +--- FuncName = &quot;OAT_Install&quot;+Name;
              |     |     |     |   +-+---+ 
  1364        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+---------------------------------+ 
  1364        |     |     |     |   |  else if(TuneGroup == tgStatic){  | 
              |     |     |     |   +-+---------------------------------+ 
  1365        |     |     |     |     +--- FuncName = &quot;OAT_Static&quot;+Name;
              |     |     |     |   +-+---+ 
  1366        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+---------------------------------+ 
  1366        |     |     |     |   |  else if(TuneGroup == tgDynamic){ | 
              |     |     |     |   +-+---------------------------------+ 
  1367        |     |     |     |     +--- FuncName = &quot;OAT_Dynamic&quot;+Name;
              |     |     |     |   +-+---+ 
  1368        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  1369        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------------------------------------------------+ 
  1369        |     |     |   |  else if(Script-&gt;ScType == sct_Number){ // number | 
              |     |     |   +-+-------------------------------------------------+ 
  1370        |     |     |     +--- Number = atoi(Script-&gt;TokStrList-&gt;Strings[2].c_str());
              |     |     |   +-+---+ 
  1371        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+---------------------------------------+ 
  1371        |     |     |   |  else if(Script-&gt;ScType == sct_varied){ | 
              |     |     |   +-+---------------------------------------+ 
  1372        |     |     |     +--- // LoopFusionSplitには variedなし。
              |     |     |   +-+---+ 
  1373        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-----------------------------------------+ 
  1373        |     |     |   |  else if(Script-&gt;ScType == sct_fitting){  | 
              |     |     |   +-+-----------------------------------------+ 
  1374        |     |     |     +--- // LoopFusionSplitには fittingなし
              |     |     |   +-+---+ 
  1375        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-------------------------------------------+ 
  1375        |     |     |   |  else if(Script-&gt;ScType == sct_SplitPoint){ | 
              |     |     |   +-+-------------------------------------------+ 
  1376        |     |     |     +--- // スプリット位置。 SplitPoint ( I,J,K )等の記述もあり。
  1377        |     |     |     |    // １つのリージョンに複数ある場合あり。組み合わせで分割される。  
  1378        |     |     |     |    // SubRegionListとして追加される                                 
  1379        |     |     |     +--- TStringList ScriptArgNameList;
  1380        |     |     |     +--- int k2;
  1381        |     |     |     |    
  1382        |     |     |     +--- SubRegion = new TSubRegion();
  1383        |     |     |     +--- SubRegion-&gt;TokenStartPos = i;
  1384        |     |     |     +--- SubRegion-&gt;ScType = Script-&gt;ScType; // sct_SplitPoint
  1385        |     |     |     +--- //
  1386        |     |     |     |    // SubRegion-&gt;SplitBitsOfFusionIdx[0]に切断可能DO変数Bitsをセットする。  
  1387        |     |     |     |    //                                                                       
  1388        |     |     |     +--- SubRegion-&gt;SplitBitsOfFusionIdx[0] = 0; // FusionIdxによる Split有効無効Bits
              |     |     |     |  +--------------------------------------+ 
  1389        |     |     |     +--+ if(Script-&gt;TokStrList-&gt;Count &gt;= 3){  | 
              |     |     |     |  +--+-----------------------------------+ 
              |     |     |     |     |  +----------------------------------------------------------+ 
  1390        |     |     |     |     +--+ for(int kk = 3 ; kk &lt; Script-&gt;TokStrList-&gt;Count ;kk++){  | 
              |     |     |     |     |  +--+-------------------------------------------------------+ 
  1391        |     |     |     |     |     +--- s = Script-&gt;TokStrList-&gt;Strings[kk];
              |     |     |     |     |     |  +------------------------------------------------------------------+ 
  1392        |     |     |     |     |     +--+ if((s != &quot;(&quot;)&amp;&amp;(s != &quot;)&quot;)&amp;&amp;(s != &quot;,&quot;)&amp;&amp;(s != &quot;&quot;)&amp;&amp;(s[0] &gt; ' ')){ | 
              |     |     |     |     |     |  +--+---------------------------------------------------------------+ 
  1393        |     |     |     |     |     |     +--- ScriptArgNameList.Add(LowerCase(s));
              |     |     |     |     |     |   +-+---+ 
  1394        |     |     |     |     |     |   |  }  | 
              |     |     |     |     |     |   +-----+ 
              |     |     |     |     |   +-+---+ 
  1395        |     |     |     |     |   |  }  | 
              |     |     |     |     |   +-----+ 
              |     |     |     |   +-+---+ 
  1396        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+-------------------------------------------------+ 
  1396        |     |     |     |   |  else{ // DoVal変数指定なしの場合は、全てが対象。 | 
              |     |     |     |   +-+-------------------------------------------------+ 
              |     |     |     |     |  +----------------------------------------------------------+ 
  1397        |     |     |     |     +--+ for(int kk = 0 ; kk &lt; DoNest ; kk++){ // 外側のLoopから  | 
              |     |     |     |     |  +--+-------------------------------------------------------+ 
  1398        |     |     |     |     |     +--- SubRegion-&gt;SplitBitsOfFusionIdx[0] |= (1 &lt;&lt; kk);
              |     |     |     |     |   +-+---+ 
  1399        |     |     |     |     |   |  }  | 
              |     |     |     |     |   +-----+ 
              |     |     |     |   +-+---+ 
  1400        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |     |  +----------------------------------------------------------+ 
  1401        |     |     |     +--+ for(int kk = 0 ; kk &lt; DoNest ; kk++){ // 外側のLoopから  | 
              |     |     |     |  +--+-------------------------------------------------------+ 
  1402        |     |     |     |     +--- s = DoValName[kk];
              |     |     |     |     |  +----------------------------------------------------+ 
  1403        |     |     |     |     +--+ for(k2 = 0 ; k2 &lt; ScriptArgNameList.Count ; k2++){ | 
              |     |     |     |     |  +--+-------------------------------------------------+ 
  1404        |     |     |     |     |     +--- // 名前指定がある場合は名前の一致するLoopのみ切断する。
              |     |     |     |     |     |  +----------------------------------------------------+ 
  1405        |     |     |     |     |     +--+ if(ScriptArgNameList.Strings[k2] == LowerCase(s)){ | 
              |     |     |     |     |     |  +--+-------------------------------------------------+ 
  1406        |     |     |     |     |     |     +--- SubRegion-&gt;SplitBitsOfFusionIdx[0] |= (1 &lt;&lt; kk);
              |     |     |     |     |     |   +-+---+ 
  1407        |     |     |     |     |     |   |  }  | 
              |     |     |     |     |     |   +-----+ 
              |     |     |     |     |   +-+---+ 
  1408        |     |     |     |     |   |  }  | 
              |     |     |     |     |   +-----+ 
              |     |     |     |   +-+---+ 
  1409        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
  1410        |     |     |     +--- SubRegionList-&gt;Add((void *)SubRegion);
              |     |     |   +-+---+ 
  1411        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+---------------------------------------------------+ 
  1411        |     |     |   |  else if(Script-&gt;ScType == sct_SplitPointCopyDef){  | 
              |     |     |   +-+---------------------------------------------------+ 
  1412        |     |     |     +--- // スプリットCOPY元。 Resion StartとEndあり
  1413        |     |     |     |    // 現状は名前がないので、１つのリージョンに１つのみ  
              |     |     |     |  +--------------------------------------------------------------+ 
  1414        |     |     |     +--+ if(Script-&gt;ScRegion == scr_substart){       // region Start  | 
              |     |     |     |  +--+-----------------------------------------------------------+ 
              |     |     |     |     |  +----------------------------------------+ 
  1415        |     |     |     |     +--+ for(j = i+1 ; j &lt; TokenEndPos ; j++){  | 
              |     |     |     |     |  +--+-------------------------------------+ 
  1416        |     |     |     |     |     +--- Token = (TToken *)TokenList-&gt;Items[j];
              |     |     |     |     |     |  +----------------------------------+ 
  1417        |     |     |     |     |     +--+ if(Token-&gt;TokId == tid_LineEnd){ | 
              |     |     |     |     |     |  +--+-------------------------------+ 
              |     |     |     |     |     |     |  +--------+ 
  1418        |     |     |     |     |     |     +--+ break; | 
              |     |     |     |     |     |     |  +--------+ 
              |     |     |     |     |     |   +-+---+ 
  1419        |     |     |     |     |     |   |  }  | 
              |     |     |     |     |     |   +-----+ 
              |     |     |     |     |   +-+---+ 
  1420        |     |     |     |     |   |  }  | 
              |     |     |     |     |   +-----+ 
  1421        |     |     |     |     +--- SplitPointCopyDef_StartPos = j+1;   // Scriptの次から開始
              |     |     |     |   +-+---+ 
  1422        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+-------------------------------------------------------------+ 
  1422        |     |     |     |   |  else if(Script-&gt;ScRegion == scr_subend){       // region End | 
              |     |     |     |   +-+-------------------------------------------------------------+ 
  1423        |     |     |     |     +--- SplitPointCopyDef_EndPos = i;
              |     |     |     |   +-+---+ 
  1424        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+-------+ 
  1424        |     |     |     |   |  else{  | 
              |     |     |     |   +-+-------+ 
  1425        |     |     |     |     +--- MainF-&gt;ErrMessage(i,&quot;LoopPointCopyDef region err.&quot;);
              |     |     |     |   +-+---+ 
  1426        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  1427        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-----------------------------------------------------+ 
  1427        |     |     |   |  else if(Script-&gt;ScType == sct_SplitPointCopyInsert){ | 
              |     |     |   +-+-----------------------------------------------------+ 
  1428        |     |     |     +--- // スプリットCOPY先。CopyDefとInsertが別ループになった場合にのみ
  1429        |     |     |     |    // コピーする。各スプリット後に複数存在可能。２回スプリットの場合は  
  1430        |     |     |     |    // ２回コピーされる場合もあり。                                      
  1431        |     |     |     |    // これについては、Split出力中に行われる。                           
              |     |     |   +-+---+ 
  1432        |     |     |   |  }  | 
              |     |     |   +-+---+ 
              |     |     |   +-+-----------------------------------------------+ 
  1432        |     |     |   |  else if(Script-&gt;ScType == sct_RotationOrder){  | 
              |     |     |   +-+-----------------------------------------------+ 
              |     |     |     |  +----------------------------------------+ 
  1433        |     |     |     +--+ if(Script-&gt;ScRegion == scr_substart){  | 
              |     |     |     |  +--+-------------------------------------+ 
              |     |     |     |     |  +------------------------------------------+ 
  1434        |     |     |     |     +--+ if((RotaionOrderList-&gt;Count % 2) != 0){  | 
              |     |     |     |     |  +--+---------------------------------------+ 
  1435        |     |     |     |     |     +--- MainF-&gt;ErrMessage(i,&quot;RotationOrder sub region err.&quot;);
              |     |     |     |     |   +-+---+ 
  1436        |     |     |     |     |   |  }  | 
              |     |     |     |     |   +-----+ 
  1437        |     |     |     |     +--- RotaionOrderList-&gt;Add((void *)((long)i));
              |     |     |     |   +-+---+ 
  1438        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+-----------------------------------------+ 
  1438        |     |     |     |   |  else if(Script-&gt;ScRegion == scr_subend){ | 
              |     |     |     |   +-+-----------------------------------------+ 
              |     |     |     |     |  +------------------------------------------+ 
  1439        |     |     |     |     +--+ if((RotaionOrderList-&gt;Count % 2) != 1){  | 
              |     |     |     |     |  +--+---------------------------------------+ 
  1440        |     |     |     |     |     +--- MainF-&gt;ErrMessage(i,&quot;RotationOrder sub region err.&quot;);
              |     |     |     |     |   +-+---+ 
  1441        |     |     |     |     |   |  }  | 
              |     |     |     |     |   +-----+ 
  1442        |     |     |     |     +--- RotaionOrderList-&gt;Add((void *)((long)i));
              |     |     |     |   +-+---+ 
  1443        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+-------+ 
  1443        |     |     |     |   |  else{  | 
              |     |     |     |   +-+-------+ 
  1444        |     |     |     |     +--- MainF-&gt;ErrMessage(i,&quot;RotationOrder sub region err.&quot;);
              |     |     |     |   +-+---+ 
  1445        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  1446        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |   +-+---+ 
  1447        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+---------------------------------+ 
  1447        |     |   |  else if(Token-&gt;TokId == tid_DO){ | 
              |     |   +-+---------------------------------+ 
  1448        |     |     +--- //
  1449        |     |     |    // DOの終わりの式を求める。Fortran用                               
  1450        |     |     |    // DOの終わりの式は カンマとカンマの間（関数がある可能性があるので 
  1451        |     |     |    // ()のレベルチェックは行うこと！（関数作成）                      
  1452        |     |     |    //                                                                 
  1453        |     |     +--- int kk,DoSPos;
  1454        |     |     |    
  1455        |     |     +--- NestLevelOfDoNest[DoNest] = Token-&gt;NestLevel;
  1456        |     |     +--- DoNest++;
  1457        |     |     +--- Token1 = Token; // DOのトークン
  1458        |     |     +--- DoSPos = i + 1;
              |     |     |  +--------------------------------+ 
  1459        |     |     +--+ for(kk = 0 ; kk &lt; 100 ; kk++){ | 
              |     |     |  +--+-----------------------------+ 
  1460        |     |     |     +--- Token = (TToken *)TokenList-&gt;Items[DoSPos++];
              |     |     |     |  +------------------------------+ 
  1461        |     |     |     +--+ if(Token-&gt;TokId == tid_Set){ | 
              |     |     |     |  +--+---------------------------+ 
              |     |     |     |     |  +--------+ 
  1462        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  1463        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  1464        |     |     |   |  }  | 
              |     |     |   +-----+ 
  1465        |     |     +--- //
  1466        |     |     |    // スクリプトの変数名と一致するかを調べる。                    
  1467        |     |     |    // LoopFusionSplitの場合は、variedなしで全てのDoが対象となる。 
  1468        |     |     |    //  同じDO変数名でのLoopはなしとする。（変数名で区別する）     
  1469        |     |     |    //                                                             
  1470        |     |     +--- Token2 = (TToken *)TokenList-&gt;Items[DoSPos-2];
              |     |     |  +----------------------------------------+ 
  1471        |     |     +--+ for(kk = 0 ; kk &lt; variedCount ; kk++){ | 
              |     |     |  +--+-------------------------------------+ 
              |     |     |     |  +--------------------------------------------------------------+ 
  1472        |     |     |     +--+ if(LowerCase(Token2-&gt;Str) == LowerCase(variedValName[kk])){  | 
              |     |     |     |  +--+-----------------------------------------------------------+ 
  1473        |     |     |     |     +--- MainF-&gt;ErrMessage(DoSPos,&quot;LoopFusionSplitで複数回、同じDoがあります。&quot;);
              |     |     |     |     |  +--------+ 
  1474        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  1475        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  1476        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +------------------------+ 
  1477        |     |     +--+ if(kk &gt;= variedCount){ | 
              |     |     |  +--+---------------------+ 
  1478        |     |     |     +--- kk = variedCount++;
  1479        |     |     |     +--- variedValName[kk] = Token2-&gt;Str;
  1480        |     |     |     +--- variedFromValue[kk] = 0;
  1481        |     |     |     +--- variedToValue[kk] = 0;
  1482        |     |     |     +--- /*****************************************/
  1483        |     |     |     |    //                                           
  1484        |     |     |     |    //Kogakuin Irie                              
  1485        |     |     |     |    //step（増分値の任意設定）対応のための処理   
  1486        |     |     |     |    //                                           
  1487        |     |     |     +--- variedStepValue[kk] = 1;
  1488        |     |     |     +--- //
  1489        |     |     |     |    //ここまで                                   
  1490        |     |     |     |    //                                           
  1491        |     |     |     |    /*****************************************/  
  1492        |     |     |     +--- DoToken[kk] = Token1;
  1493        |     |     |     +--- DoValToken[kk] = Token2;
  1494        |     |     |     +--- ValData = (TValData *)Token2-&gt;ValData;
              |     |     |     |  +----------------------+ 
  1495        |     |     |     +--+ if(ValData == NULL){ | 
              |     |     |     |  +--+-------------------+ 
  1496        |     |     |     |     +--- MainF-&gt;ErrMessage(DoSPos,&quot;Do変数が不明です。&quot;);
              |     |     |     |     |  +----------+ 
  1497        |     |     |     |     +--+ return;  | 
              |     |     |     |     |  +----------+ 
              |     |     |     |   +-+---+ 
  1498        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
  1499        |     |     |     +--- DoValName[kk] = Token2-&gt;Str;
  1500        |     |     |     +--- ValData-&gt;DoValBits = (1 &lt;&lt; kk); // 変数Bitsをセットする。
  1501        |     |     |     +--- ValData-&gt;RefDoValBits = (1 &lt;&lt; kk); // 変数Bitsをセットする。
  1502        |     |     |     +--- DoStartSPos[kk] = DoSPos;
  1503        |     |     |     +--- DoStartEPos[kk] = GetNextKanmaPos(i);
  1504        |     |     |     +--- DoEndSPos[kk] = GetNextKanmaPos(i) + 1;
  1505        |     |     |     +--- DoEndEPos[kk] = GetNextKanmaPos(DoEndSPos[kk]);
  1506        |     |     |     |    
              |     |     |     |  +------------------------------------------------------------------------+ 
  1507        |     |     |     +--+ if(((TToken *)TokenList-&gt;Items[DoEndEPos[kk]])-&gt;TokId == tid_Kannma){  | 
              |     |     |     |  +--+---------------------------------------------------------------------+ 
  1508        |     |     |     |     +--- DoStepSPos[kk] = GetNextKanmaPos(DoEndEPos[kk]) + 1;
  1509        |     |     |     |     +--- DoStepEPos[kk] = GetNextKanmaPos(DoStepSPos[kk]);
              |     |     |     |   +-+---+ 
  1510        |     |     |     |   |  }  | 
              |     |     |     |   +-+---+ 
              |     |     |     |   +-+-------+ 
  1510        |     |     |     |   |  else{  | 
              |     |     |     |   +-+-------+ 
  1511        |     |     |     |     +--- DoStepSPos[kk] = -1;
  1512        |     |     |     |     +--- DoStepEPos[kk] = -1;
              |     |     |     |   +-+---+ 
  1513        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  1514        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |   +-+---+ 
  1515        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------------------------------------+ 
  1515        |     |   |  else if(Token-&gt;TokId == tid_ENDDO){  | 
              |     |   +-+-------------------------------------+ 
              |     |     |  +------------------+ 
  1516        |     |     +--+ if(DoNest &gt; 0){  | 
              |     |     |  +--+---------------+ 
  1517        |     |     |     +--- DoNest--;
              |     |     |   +-+---+ 
  1518        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |   +-+---+ 
  1519        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-----------------------------------+ 
  1519        |     |   |  else if(Token-&gt;TokId == tid_for){  | 
              |     |   +-+-----------------------------------+ 
  1520        |     |     +--- //
  1521        |     |     |    // Forの終りの式を求める。C言語用                    
  1522        |     |     |    // forの終わりの式は １つめのセミコロンと２つめの間  
  1523        |     |     |    // ()のレベルチェックは行うこと！（関数作成）        
  1524        |     |     |    //                                                   
  1525        |     |     +--- TToken *Token1,*Token2;
  1526        |     |     +--- int kk,DoSPos;
  1527        |     |     |    
  1528        |     |     +--- NestLevelOfDoNest[DoNest] = Token-&gt;NestLevel;
  1529        |     |     +--- DoNest++;
  1530        |     |     +--- Token1 = Token; // Forのトークン
  1531        |     |     +--- DoSPos = i + 1;
              |     |     |  +--------------------------------+ 
  1532        |     |     +--+ for(kk = 0 ; kk &lt; 100 ; kk++){ | 
              |     |     |  +--+-----------------------------+ 
  1533        |     |     |     +--- Token = (TToken *)TokenList-&gt;Items[DoSPos++];
              |     |     |     |  +------------------------------+ 
  1534        |     |     |     +--+ if(Token-&gt;TokId == tid_Set){ | 
              |     |     |     |  +--+---------------------------+ 
              |     |     |     |     |  +--------+ 
  1535        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  1536        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  1537        |     |     |   |  }  | 
              |     |     |   +-----+ 
  1538        |     |     +--- //
  1539        |     |     |    // スクリプトの変数名と一致するかを調べる。  
  1540        |     |     |    //                                           
  1541        |     |     +--- Token2 = (TToken *)TokenList-&gt;Items[DoSPos-2];
              |     |     |  +----------------------------------------+ 
  1542        |     |     +--+ for(kk = 0 ; kk &lt; variedCount ; kk++){ | 
              |     |     |  +--+-------------------------------------+ 
              |     |     |     |  +----------------------------------------+ 
  1543        |     |     |     +--+ if(Token2-&gt;Str == variedValName[kk]){  | 
              |     |     |     |  +--+-------------------------------------+ 
  1544        |     |     |     |     +--- MainF-&gt;ErrMessage(DoSPos,&quot;LoopFusionSplitで複数回、同じDoがあります。&quot;);
              |     |     |     |     |  +--------+ 
  1545        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  1546        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  1547        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +------------------------+ 
  1548        |     |     +--+ if(kk &gt;= variedCount){ | 
              |     |     |  +--+---------------------+ 
  1549        |     |     |     +--- kk = variedCount++;
  1550        |     |     |     +--- variedValName[kk] = Token2-&gt;Str;
  1551        |     |     |     +--- variedFromValue[kk] = 0;
  1552        |     |     |     +--- variedToValue[kk] = 0;
  1553        |     |     |     +--- /*****************************************/
  1554        |     |     |     |    //                                           
  1555        |     |     |     |    //Kogakuin Irie                              
  1556        |     |     |     |    //step（増分値の任意設定）対応のための処理   
  1557        |     |     |     |    //                                           
  1558        |     |     |     +--- variedStepValue[kk] = 1;
  1559        |     |     |     +--- //
  1560        |     |     |     |    //ここまで                                   
  1561        |     |     |     |    //                                           
  1562        |     |     |     |    /*****************************************/  
  1563        |     |     |     +--- DoToken[kk] = Token1;
  1564        |     |     |     +--- DoValToken[kk] = Token2;
  1565        |     |     |     +--- DoValName[kk] = Token2-&gt;Str;
  1566        |     |     |     +--- ValData = (TValData *)Token2-&gt;ValData;
  1567        |     |     |     +--- ValData-&gt;DoValBits = (1 &lt;&lt; kk); // 変数Bitsをセットする。
  1568        |     |     |     +--- ValData-&gt;RefDoValBits = (1 &lt;&lt; kk); // 変数Bitsをセットする。
  1569        |     |     |     +--- DoStartSPos[kk] = DoSPos;
  1570        |     |     |     +--- DoStartEPos[kk] = GetNextSemikoronPos(DoStartSPos[kk]);
  1571        |     |     |     +--- DoEndSPos[kk] = DoStartEPos[kk]+1;
  1572        |     |     |     +--- DoEndEPos[kk] = GetNextSemikoronPos(DoEndSPos[kk]);
  1573        |     |     |     |    
              |     |     |     |  +----------------------------------------------------------------------+ 
  1574        |     |     |     +--+ if((((TToken *)TokenList-&gt;Items[DoEndSPos[kk]])-&gt;TokId != tid_Val)|| | 
  1575        |     |     |     |  |     (((TToken *)TokenList-&gt;Items[DoEndSPos[kk]+1])-&gt;Str != &quot;&lt;&quot;)){    | 
              |     |     |     |  +--+-------------------------------------------------------------------+ 
  1576        |     |     |     |     +--- MainF-&gt;ErrMessage(i,&quot;forのC for文の継続条件式には、変数&lt;式 以外は使えません。&quot;);
              |     |     |     |     |  +--------+ 
  1577        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  1578        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
  1579        |     |     |     +--- StepS = DoEndEPos[kk] + 1;
  1580        |     |     |     +--- StepE = GetNextSemikoronPos(StepS);
              |     |     |     |  +------------------------+ 
  1581        |     |     |     +--+ if(StepE != StepS+2){  | 
              |     |     |     |  +--+---------------------+ 
  1582        |     |     |     |     +--- MainF-&gt;ErrMessage(i,&quot;forの増分には、変数++ 以外は使えません。&quot;);
              |     |     |     |     |  +--------+ 
  1583        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  1584        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |     |  +----------------------------------------------------------------+ 
  1585        |     |     |     +--+ if(ValData-&gt;Str != ((TToken *)TokenList-&gt;Items[StepS])-&gt;Str){  | 
              |     |     |     |  +--+-------------------------------------------------------------+ 
  1586        |     |     |     |     +--- MainF-&gt;ErrMessage(i,&quot;forの増分には、変数++ 以外は使えません。&quot;);
              |     |     |     |     |  +--------+ 
  1587        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  1588        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |     |  +----------------------------------------------------------+ 
  1589        |     |     |     +--+ if(((TToken *)TokenList-&gt;Items[StepS+1])-&gt;Str != &quot;++&quot;){  | 
              |     |     |     |  +--+-------------------------------------------------------+ 
  1590        |     |     |     |     +--- MainF-&gt;ErrMessage(i,&quot;forの増分には、変数++ 以外は使えません。&quot;);
              |     |     |     |     |  +--------+ 
  1591        |     |     |     |     +--+ break; | 
              |     |     |     |     |  +--------+ 
              |     |     |     |   +-+---+ 
  1592        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
  1593        |     |     |     +--- DoStepSPos[kk] = -1;
  1594        |     |     |     +--- DoStepEPos[kk] = -1;
              |     |     |     |  +--------+ 
  1595        |     |     |     +--+ break; | 
              |     |     |     |  +--------+ 
              |     |     |   +-+---+ 
  1596        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |   +-+---+ 
  1597        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------------------------------------------------------------------------+ 
  1597        |     |   |  else if((DoNest &gt; 0)&amp;&amp;(Token-&gt;NestLevel &lt; NestLevelOfDoNest[DoNest-1])){ | 
              |     |   +-+-------------------------------------------------------------------------+ 
  1598        |     |     +--- DoNest--;
              |     |   +-+---+ 
  1599        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
  1600        |   |  }  | 
              |   +-----+ 
  1601        +--- MakeArgValList();   // TRのサブルーチンに渡す引数リストを生成する。
  1602        +--- //
  1603        |    // Case数を計算する。Fusion（ループのネスト数-1) * Split数となる。 
  1604        |    //                                                                 
  1605        |    // フィージョンありの場合は、ループネスト数のCaseが発生する。      
  1606        |    //                                                                 
              |  +------------------------------------------------------------------+ 
  1607        +--+ if((TuneKind == tkLoopFusionSplit)||(TuneKind == tkLoopFusion)){ | 
              |  +--+---------------------------------------------------------------+ 
  1608        |     +--- FusionCount = variedCount;
  1609        |     +--- #if 0
  1610        |     +--- //  常にネストなしでDo変数１つごとの分割のみは、FusionCount = 1とする。
  1611        |     +--- FusionCount = 1;
  1612        |     +--- #endif
              |   +-+---+ 
  1613        |   |  }  | 
              |   +-+---+ 
              |   +-+-------+ 
  1613        |   |  else{  | 
              |   +-+-------+ 
  1614        |     +--- FusionCount = 1;
              |   +-+---+ 
  1615        |   |  }  | 
              |   +-----+ 
  1616        +--- //
  1617        |    //  SubRegion(SplitPoint)のFusionIdxごとの有効・無効を設定する。 
  1618        |    //                                                               
  1619        +--- CaseCount = FusionCount;
              |  +------------------------------------------------------------------+ 
  1620        +--+ if((TuneKind == tkLoopFusionSplit)||(TuneKind == tkLoopSplit)){  | 
              |  +--+---------------------------------------------------------------+ 
  1621        |     +--- unsigned int BaseSplitBits,SplitBits; // 切断対象Do変数Bits
  1622        |     +--- unsigned int LoopDoValBits; // Fusion後に有効なDo変数。 K_J フィージョンの場合は Kのみ有効。
  1623        |     +--- int DoValCount = variedCount;
  1624        |     +--- int SubCaseCount = 0;
  1625        |     +--- int CaseCountOfFusuinIdx;
  1626        |     +--- string LoopDoValName;
  1627        |     |    
              |     |  +----------------------------------------------+ 
  1628        |     +--+ for(k = 0 ; k &lt; SubRegionList-&gt;Count ; k++){ | 
              |     |  +--+-------------------------------------------+ 
  1629        |     |     +--- SubRegion = (TSubRegion *)SubRegionList-&gt;Items[k];
  1630        |     |     +--- SubRegion-&gt;CaseCount = 0;   // FusionIdxごとのCase数
  1631        |     |     +--- BaseSplitBits = SubRegion-&gt;SplitBitsOfFusionIdx[0];
  1632        |     |     +--- //
  1633        |     |     |    // LoopFusionSplitのCase数を求める。                                               
  1634        |     |     |    // FusionIdx == 0 の場合は、SplitBitsOfFusionIdx[0] のビット数だけの位置＋１の数。 
  1635        |     |     |    // それ以外は、全体に対して Splitありとなしの２種類とする。                        
  1636        |     |     |    //                                                                                 
  1637        |     |     +--- #if 1
  1638        |     |     +--- //
  1639        |     |     |    // Fusion なしの場合の Splitなし＋指定位置のSplit設定でのCase数に修正  
  1640        |     |     |    //   2013/08/06                                                        
  1641        |     |     |    //                                                                     
  1642        |     |     +--- SubCaseCount = 1;
  1643        |     |     +--- s = &quot;[&quot;;
              |     |     |  +----------------------------------------------------------+ 
  1644        |     |     +--+ for(DoValIdx = 0 ; DoValIdx &lt; DoValCount ; DoValIdx++){  | 
              |     |     |  +--+-------------------------------------------------------+ 
  1645        |     |     |     +--- s += DoValName[DoValIdx]+&quot;,&quot;;
              |     |     |     |  +--------------------------------------------+ 
  1646        |     |     |     +--+ if((BaseSplitBits &amp; (1&lt;&lt; DoValIdx)) != 0){ | 
              |     |     |     |  +--+-----------------------------------------+ 
  1647        |     |     |     |     +--- SubCaseCount++;
              |     |     |     |   +-+---+ 
  1648        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
              |     |     |   +-+---+ 
  1649        |     |     |   |  }  | 
              |     |     |   +-----+ 
  1650        |     |     +--- s += &quot;]&quot;;
  1651        |     |     +--- SubRegion-&gt;SplitCaseCountOfFusionIdx[0] = SubCaseCount;
  1652        |     |     +--- SubRegion-&gt;variedValName[0] = s;
              |     |     |  +------------------------------------------------------------------+ 
  1653        |     |     +--+ for(int FusionIdx = 1 ; FusionIdx &lt; FusionCount ; FusionIdx++){  | 
              |     |     |  +--+---------------------------------------------------------------+ 
  1654        |     |     |     +--- s = &quot;[&quot;;
              |     |     |     |  +----------------------------------------------------------+ 
  1655        |     |     |     +--+ for(DoValIdx = 0 ; DoValIdx &lt;= FusionIdx ; DoValIdx++){  | 
              |     |     |     |  +--+-------------------------------------------------------+ 
  1656        |     |     |     |     +--- s += DoValName[DoValIdx]+&quot;_&quot;;
              |     |     |     |     |  +--------------------------------------------+ 
  1657        |     |     |     |     +--+ if((BaseSplitBits &amp; (1&lt;&lt; DoValIdx)) != 0){ | 
              |     |     |     |     |  +--+-----------------------------------------+ 
  1658        |     |     |     |     |     +--- SubCaseCount++;
              |     |     |     |     |   +-+---+ 
  1659        |     |     |     |     |   |  }  | 
              |     |     |     |     |   +-----+ 
              |     |     |     |   +-+---+ 
  1660        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
  1661        |     |     |     +--- s += &quot;]&quot;;
  1662        |     |     |     +--- SubRegion-&gt;SplitBitsOfFusionIdx[FusionIdx] = 1;
  1663        |     |     |     +--- SubRegion-&gt;SplitCaseCountOfFusionIdx[FusionIdx] = 2;
  1664        |     |     |     +--- SubCaseCount += 2;
  1665        |     |     |     +--- SubRegion-&gt;variedValName[FusionIdx] = s;
              |     |     |   +-+---+ 
  1666        |     |     |   |  }  | 
              |     |     |   +-----+ 
  1667        |     |     +--- SubRegion-&gt;CaseCount += SubCaseCount;   // FusionIdxごとのCase数
  1668        |     |     +--- #else
              |     |     |  +------------------------------------------------------------------+ 
  1669        |     |     +--+ for(int FusionIdx = 0 ; FusionIdx &lt; FusionCount ; FusionIdx++){  | 
              |     |     |  +--+---------------------------------------------------------------+ 
  1670        |     |     |     +--- SplitBits = BaseSplitBits;
  1671        |     |     |     +--- LoopDoValBits = 0;
  1672        |     |     |     +--- LoopDoValName = &quot;&quot;;
              |     |     |     |  +----------------------------------------------------------+ 
  1673        |     |     |     +--+ for(DoValIdx = 0 ; DoValIdx &lt; DoValCount ; DoValIdx++){  | 
              |     |     |     |  +--+-------------------------------------------------------+ 
              |     |     |     |     |  +--------------------------------------+ 
  1674        |     |     |     |     +--+ if(DoValIdx &lt; DoValCount-FusionIdx){ | 
              |     |     |     |     |  +--+-----------------------------------+ 
  1675        |     |     |     |     |     +--- LoopDoValBits |= (1 &lt;&lt; DoValIdx); // 切断可能Do変数。
  1676        |     |     |     |     |     +--- LoopDoValName += &quot;,&quot;;
              |     |     |     |     |   +-+---+ 
  1677        |     |     |     |     |   |  }  | 
              |     |     |     |     |   +-+---+ 
              |     |     |     |     |   +-+-------+ 
  1677        |     |     |     |     |   |  else{  | 
              |     |     |     |     |   +-+-------+ 
  1678        |     |     |     |     |     +--- LoopDoValName += &quot;_&quot;+DoValName[DoValIdx];
              |     |     |     |     |   +-+---+ 
  1679        |     |     |     |     |   |  }  | 
              |     |     |     |     |   +-----+ 
              |     |     |     |   +-+---+ 
  1680        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
  1681        |     |     |     +--- SubRegion-&gt;SplitBitsOfFusionIdx[FusionIdx] = SplitBits &amp; LoopDoValBits;
  1682        |     |     |     +--- s = &quot; [&quot;+LoopDoValName+&quot;] &quot;;
  1683        |     |     |     +--- SubCaseCount = 1;
              |     |     |     |  +----------------------------------------------------------+ 
  1684        |     |     |     +--+ for(DoValIdx = 0 ; DoValIdx &lt; DoValCount ; DoValIdx++){  | 
              |     |     |     |  +--+-------------------------------------------------------+ 
              |     |     |     |     |  +--------------------------------------------------------------------------+ 
  1685        |     |     |     |     +--+ if((SubRegion-&gt;SplitBitsOfFusionIdx[FusionIdx] &amp; (1&lt;&lt; DoValIdx)) != 0){  | 
              |     |     |     |     |  +--+-----------------------------------------------------------------------+ 
  1686        |     |     |     |     |     +--- s += DoValName[DoValIdx]+&quot;,&quot;;
  1687        |     |     |     |     |     +--- SubCaseCount++;
              |     |     |     |     |   +-+---+ 
  1688        |     |     |     |     |   |  }  | 
              |     |     |     |     |   +-----+ 
              |     |     |     |   +-+---+ 
  1689        |     |     |     |   |  }  | 
              |     |     |     |   +-----+ 
  1690        |     |     |     +--- SubRegion-&gt;variedValName[FusionIdx] = s;
  1691        |     |     |     +--- SubRegion-&gt;SplitCaseCountOfFusionIdx[FusionIdx] = SubCaseCount;
  1692        |     |     |     +--- SubRegion-&gt;CaseCount += SubCaseCount;   // FusionIdxごとのCase数
              |     |     |   +-+---+ 
  1693        |     |     |   |  }  | 
              |     |     |   +-----+ 
  1694        |     |     +--- #endif
  1695        |     |     +--- SubRegion-&gt;variedCount = FusionCount;
  1696        |     |     +--- CaseCount *= SubCaseCount;
              |     |   +-+---+ 
  1697        |     |   |  }  | 
              |     |   +-----+ 
  1698        |     +--- //
  1699        |     |    // 全体のCase数を求める。  
  1700        |     |    //                         
  1701        |     +--- CaseCount = 0;
              |     |  +------------------------------------------------------------------+ 
  1702        |     +--+ for(int FusionIdx = 0 ; FusionIdx &lt; FusionCount ; FusionIdx++){  | 
              |     |  +--+---------------------------------------------------------------+ 
  1703        |     |     +--- CaseCountOfFusuinIdx = 1;
              |     |     |  +----------------------------------------------+ 
  1704        |     |     +--+ for(k = 0 ; k &lt; SubRegionList-&gt;Count ; k++){ | 
              |     |     |  +--+-------------------------------------------+ 
  1705        |     |     |     +--- SubRegion = (TSubRegion *)SubRegionList-&gt;Items[k];
  1706        |     |     |     +--- CaseCountOfFusuinIdx *= SubRegion-&gt;SplitCaseCountOfFusionIdx[FusionIdx];
              |     |     |   +-+---+ 
  1707        |     |     |   |  }  | 
              |     |     |   +-----+ 
  1708        |     |     +--- CaseCount += CaseCountOfFusuinIdx;
              |     |   +-+---+ 
  1709        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
  1710        |   |  }  | 
              |   +-----+ 
              |  +------------------------------------+ 
  1711        +--+ if(RotaionOrderList-&gt;Count != 0){  | 
              |  +--+---------------------------------+ 
  1712        |     +--- CaseCount *= 2;
              |   +-+---+ 
  1713        |   |  }  | 
              |   +-----+ 
  1714        +--- #if 1
              |  +--------------------------------------+ 
  1715        +--+ for(k = 0 ; k &lt; variedCount ; k++){  | 
              |  +--+-----------------------------------+ 
              |     |  +--------------------------------------------------------+ 
  1716        |     +--+ for(int k2 = DoEndSPos[k] ; k2 &lt; DoEndEPos[k] ; k2++){ | 
              |     |  +--+-----------------------------------------------------+ 
  1717        |     |     +--- Token = (TToken *)TokenList-&gt;Items[k2];
  1718        |     |     +--- ValData = (TValData *)Token-&gt;ValData;
              |     |     |  +----------------------+ 
  1719        |     |     +--+ if(ValData != NULL){ | 
              |     |     |  +--+-------------------+ 
  1720        |     |     |     +--- ValData-&gt;DoEndValBits |= (1 &lt;&lt; k);  // Doの終わり値を示す変数を確定
              |     |     |   +-+---+ 
  1721        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |   +-+---+ 
  1722        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
  1723        |   |  }  | 
              |   +-----+ 
  1724        +--- //
  1725        |    // ArgValListを追加 &quot;&quot;(最初に代入で使用)も、必要なので、削除はしないこと 
  1726        |    //                                                                       
  1727        +--- AddArgValListToATExecArgList();
  1728        |    
  1729        +--- //
  1730        |    // 各変数がDo変数からの依存かどうかをチェックする。                  
  1731        |    // Do依存の変数は、UnRollの数だけ、別変数に置き換えられる。          
  1732        |    //                                                                   
  1733        |    //  DO i = 1,100 で da = b(i); の場合は、 daは、Do変数依存           
  1734        |    //  a(i) = b(i) の場合は、 aに(Do変数 i)があるために依存でない。     
  1735        |    //  da = b(i) で daがDo変数依存の場合に dc = 2*da での dcは、Do依存  
  1736        |    //  da = b(i) で da = da + c(i) は、 daは Do依存だが、元々Do依存     
  1737        |    //                                                                   
  1738        |    //                                                                   
  1739        +--- ChackRefDoValF(TokenStartPos,TokenEndPos);
  1740        +--- SaveAndResetValBits(TokenStartPos,TokenEndPos);  // DoVal関連の識別を、保存してリセット
  1741        +--- // 使用時は、RestoreValBitsを行うこと。
  1742        +--- #endif
            +-+---+ 
  1743      |  }  | 
            +-----+ 
</pre>


</body>
</html>
