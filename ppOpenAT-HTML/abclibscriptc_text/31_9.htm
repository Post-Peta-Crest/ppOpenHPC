
<html>
<head>
<title>IMPLICIT 関数説明</title><base target="main">
<link rel ="stylesheet" type="text/css" href="stylesheet.css" title="stylesheet">
<meta http-equiv="Content-Type" content="text/html;charset=Shift_JIS">
</head>

<body bgcolor="#ffffff">

<div align="right"><font size="2">ABCLibScriptC プロジェクト</font></div>

<table width=100% bgcolor="#e6e6fa" class="titlebgcolor" border="1" cellpadding="7" cellspacing="0">
<tr>
    <td><font class="titlefont">21.9. IMPLICIT 関数説明</font></td>
</tr>
</table>

<p></p>
<table border="1">
<tr><th align="left" nowrap>関数名</th>        <td nowrap>IMPLICIT</td></tr>
<tr><th align="left" nowrap>定義ファイル名</th><td nowrap>pass2.cpp</td></tr>
<tr><th align="left" nowrap>定義行</th>        <td nowrap>2466</td></tr>
<tr><th align="left" nowrap>宣言形式</th>      <td nowrap>void IMPLICIT ( TList * TokenList , int sPos , int ePos )</td></tr>
<tr><th align="left" nowrap>概要</th>          <td nowrap>暗黙の型宣言の変更<br>暗黙の型宣言の変更に伴って、暗黙の型宣言テーブルの内容を変更する。<br><br>   IMPLICIT NONE、<br>   IMPLICIT 型指定子(x1,x2-x3,…)</td></tr>
<tr><th align="left" nowrap>戻り値</th>        <td nowrap></td></tr>
<tr><th align="left" nowrap>パラメタ説明</th>  <td nowrap>TokenList   トークンリスト<br>sPos    開始位置<br>ePos    終了位置</td></tr>
<tr><th align="left" nowrap>機能説明</th>      <td nowrap></td></tr>
<tr><th align="left" nowrap>備考</th>          <td nowrap></td></tr>
</table>

<p></p>
呼出し元関数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap><a href="31_18.htm">Pass2_Fortran</a></td>
<td nowrap><a href="5_3.htm">pass2.cpp</a></td>
<td nowrap><a href="31_18.htm">292</a></td>
</tr>
</table>

<p></p>
呼出し先関数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap>LowerCase</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap>109</td>
</tr>
</table>

<p></p>
参照外部変数一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap>ImplType</td>
<td nowrap><a href="5_3.htm">pass2.cpp</a></td>
<td nowrap>59</td>
</tr>
</table>

<p></p>
参照先一覧表
<table border="1">
<tr>
<th nowrap>№</th>
<th nowrap>名称</th>
<th nowrap>種別</th>
<th nowrap>定義ファイル名</th>
<th nowrap>定義行</th>
</tr>
<tr>
<td nowrap>1</td>
<td nowrap><a href="27_1.htm">Enum_DataType</a></td>
<td nowrap>列挙型</td>
<td nowrap><a href="5_11.htm">pass2.h</a></td>
<td nowrap><a href="27_1.htm">75</a></td>
</tr>
<tr>
<td nowrap>2</td>
<td nowrap><a href="16_1_1.htm">TList</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_16.htm">VCL_Lib.h</a></td>
<td nowrap><a href="16_1_1.htm">57</a></td>
</tr>
<tr>
<td nowrap>3</td>
<td nowrap><a href="16_9_1.htm">TToken</a></td>
<td nowrap>クラス</td>
<td nowrap><a href="5_10.htm">pass1.h</a></td>
<td nowrap><a href="16_9_1.htm">294</a></td>
</tr>
</table>

<p></p>
<pre>
関数論理チャート

        |  +----------------------------------------------------+ 
  2466  +--+ void IMPLICIT(TList *TokenList,int sPos,int ePos)  | 
  2467     | {                                                  | 
           +--+-------------------------------------------------+ 
  2468        +--- TToken *Token;
  2469        +--- int i,j;
  2470        +--- int Nest;
  2471        +--- char c,c2;
  2472        +--- Enum_DataType Type;
  2473        |    
  2474        +--- Nest = 0;
  2475        +--- c = 0;
  2476        +--- Type = dt_Real;
  2477        +--- //  for(i = sPos; i &lt;= ePos ; i++){
              |  +--------------------------------+ 
  2478        +--+ for(i = sPos; i &lt; ePos ; i++){ | 
              |  +--+-----------------------------+ 
  2479        |     +--- Token = (TToken *)TokenList-&gt;Items[i];
              |     |  +----------------------------------+ 
  2480        |     +--+ if(Token-&gt;TokId == tid_INTEGER){ | 
              |     |  +--+-------------------------------+ 
  2481        |     |     +--- Type = dt_Int;
              |     |   +-+---+ 
  2482        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-----------------------------------+ 
  2482        |     |   |  else if(Token-&gt;TokId == tid_REAL){ | 
              |     |   +-+-----------------------------------+ 
  2483        |     |     +--- Type = dt_Real;
              |     |   +-+---+ 
  2484        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-----------------------------------------------+ 
  2484        |     |   |  else if(Token-&gt;TokId == tid_DOUBLEPRECISION){  | 
              |     |   +-+-----------------------------------------------+ 
  2485        |     |     +--- Type = dt_Real;
              |     |   +-+---+ 
  2486        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-----------------------------------------+ 
  2486        |     |   |  else if(Token-&gt;TokId == tid_CHARACTER){  | 
              |     |   +-+-----------------------------------------+ 
  2487        |     |     +--- Type = dt_Char;
              |     |   +-+---+ 
  2488        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+---------------------------------------+ 
  2488        |     |   |  else if(Token-&gt;TokId == tid_LOGICAL){  | 
              |     |   +-+---------------------------------------+ 
  2489        |     |     +--- Type = dt_Logic;
              |     |   +-+---+ 
  2490        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+---------------------------------------+ 
  2490        |     |   |  else if(Token-&gt;TokId == tid_COMPLEX){  | 
              |     |   +-+---------------------------------------+ 
  2491        |     |     +--- Type = dt_Complex;
              |     |   +-+---+ 
  2492        |     |   |  }  | 
              |     |   +-----+ 
              |     |  +--------------------------------+ 
  2493        |     +--+ if(Token-&gt;TokId == tid_Kakko){ | 
              |     |  +--+-----------------------------+ 
  2494        |     |     +--- Nest++;
              |     |   +-+---+ 
  2495        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------------------------------------+ 
  2495        |     |   |  else if(Token-&gt;TokId == tid_Kokka){  | 
              |     |   +-+-------------------------------------+ 
  2496        |     |     +--- Nest--;
              |     |   +-+---+ 
  2497        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-----------------------------+ 
  2497        |     |   |  else if(Token-&gt;Str == &quot;-&quot;){  | 
              |     |   +-+-----------------------------+ 
  2498        |     |     +--- Nest--;
  2499        |     |     +--- Token = (TToken *)TokenList-&gt;Items[++i];
  2500        |     |     +--- c2 = LowerCase(Token-&gt;Str)[0];
              |     |     |  +------------------------------+ 
  2501        |     |     +--+ if((c2 &lt; 'a')||(c2 &gt; 'z')){  | 
              |     |     |  +--+---------------------------+ 
  2502        |     |     |     +--- c2 = 'z';
              |     |     |   +-+---+ 
  2503        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |     |  +------------------------------+ 
  2504        |     |     +--+ for(j = c ; j &lt;= c2 ; j++){  | 
              |     |     |  +--+---------------------------+ 
  2505        |     |     |     +--- ImplType[j] = Type;
  2506        |     |     |     +--- ImplType[j+'A'-'a'] = Type;
              |     |     |   +-+---+ 
  2507        |     |     |   |  }  | 
              |     |     |   +-----+ 
              |     |   +-+---+ 
  2508        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------------------------------------------+ 
  2508        |     |   |  else if(LowerCase(Token-&gt;Str) == &quot;none&quot;){  | 
              |     |   +-+-------------------------------------------+ 
              |     |     |  +--------+ 
  2509        |     |     +--+ break; | 
              |     |     |  +--------+ 
              |     |   +-+---+ 
  2510        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-----------------------------+ 
  2510        |     |   |  else if(Token-&gt;Str == &quot;,&quot;){  | 
              |     |   +-+-----------------------------+ 
  2511        |     |     +--- c = 0;
              |     |   +-+---+ 
  2512        |     |   |  }  | 
              |     |   +-+---+ 
              |     |   +-+-------+ 
  2512        |     |   |  else{  | 
              |     |   +-+-------+ 
  2513        |     |     +--- c = LowerCase(Token-&gt;Str)[0];
  2514        |     |     +--- ImplType[(int)c] = Type;
  2515        |     |     +--- ImplType[(int)c+'A'-'a'] = Type;
              |     |   +-+---+ 
  2516        |     |   |  }  | 
              |     |   +-----+ 
              |   +-+---+ 
  2517        |   |  }  | 
              |   +-----+ 
            +-+---+ 
  2518      |  }  | 
            +-----+ 
</pre>


</body>
</html>
